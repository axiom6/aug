{
  "version": 3,
  "file": "Index.js",
  "sourceRoot": "../../src/data",
  "sources": [
    "Index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Store  from './Store.js'\n\nclass Index extends Store\n\n  constructor:( stream, dbName ) ->\n    super(      stream, dbName )\n    @db        = null\n    @dbVersion = 1\n    window.indexedDB.deleteDatabase( @dbName )\n\n  openDB:( dbName, dbVersion ) ->\n    # @db.close() if @db?\n    dbp = new Promise( ( resolve, reject ) =>\n      request = window.indexedDB.open( dbName, dbVersion )\n      request.onupgradeneeded = ( event ) =>\n        upDb  = event.target['result']\n        upTxn = event.target['transaction']\n        @openStores( upDb )\n        # console.log( 'Index.openDB()', 'upgrade', @dbName, upDb.objectStoreNames )\n        upTxn.complete\n        return\n      request.onsuccess = ( event ) =>\n        db = event.target['result']\n        # console.log( 'Index.openDB()', 'open', @dbName )\n        resolve(db)\n        return\n      request.onblocked = (  ) =>  # event\n        @onerror( dbName, 'Index.openDB()', { cause:'Index.openDB() onblocked', error:request.error } )\n        reject('Request blocked')\n        return\n      request.onerror   = () =>\n        @onerror( dbName, 'Index.openDB()', { cause:'Index.openDB() onerror', error:request.error } )\n        reject('Request error')\n        return\n    )\n    dbp\n\n  openStores:( upDb ) ->\n    for own table, list of @tables\n      for own key, obj of list when key is 'Index'\n        @openStore( upDb, table )\n    return\n\n  contains:( upDb, table ) ->\n    upDb.objectStoreNames.contains(table)\n\n  openStore:( upDb, table ) ->\n    if not @contains( upDb, table )\n      upDb.createObjectStore( table, { keyPath:@keyProp } )\n      # st.createIndex( @keyProp, @keyProp, { unique: true } )\n    return\n\n  # Need to better handle a missing objectStore\n  txo:( table, mode=\"readwrite\" ) ->\n    if @contains( @db, table )\n       txn = @db.transaction( table, mode )\n       sto = txn.objectStore( table )\n       sto\n    else\n       console.error(  'Index.txo() missing ObjectStore for',   table )\n       #hrow new Error('Index.txo() missing ObjectStore for ' + table ) # May not be necessary\n       null\n\n  add:( table, id, obj ) ->\n    txo = @txo( table )\n    txo.add( obj )\n    @results( table, 'add', obj )\n    return\n\n  get:( table, id, callback=null, op='get' ) ->\n    txo = @txo( table )\n    req = txo.get( id )\n    req.onsuccess = () =>\n      if callback?\n         callback( req.result )\n      else\n         @results( table, op, req.result )\n    req.onerror = (error) =>\n      @onerror( table, op, error )\n    return\n\n  put:( table, id, obj ) ->\n    txo = @txo( table )\n    txo.put( obj )\n    @results( table, 'put', obj )\n    return\n\n  del:( table, id ) ->\n    txo = @txo( table )\n    txo['delete']( id )\n    @results( table, 'del', {} ) # Latee with obj\n    return\n\n  insert:( table, objs ) ->\n    txo = @txo( table )\n    for own id, obj of objs\n      txo.add(  obj )\n    @results( table, 'insert', objs )\n    return\n\n  select:    ( table, where, callback=null ) ->\n    @traverse( table, where, callback, 'select' )\n    return\n\n  update:( table, objs ) ->\n    txo = @txo( table )\n    for own id, obj of objs\n      txo.put(  obj )\n    @results( table, 'update', objs )\n    return\n\n  remove:    ( table, where ) ->\n    @traverse( table, where, null, 'remove' )\n    return\n\n  traverse:( table, where, callback=null, op ) ->\n    mode = if op is 'remove' then 'readwrite' else 'readonly'\n    txo  = @txo( table, mode )\n    req  =  txo.getAll()\n    req.onsuccess = () =>\n      objs = {}\n      for own key, obj of req.result when where(obj)\n        objs[obj[@keyProp]] = obj\n        txo['delete'](@keyProp) if op is 'remove'\n      if callback?\n         callback(objs)\n      else\n         @results( table, op, objs  )\n    req.onerror = (error) =>\n      @onerror( table, op, error )\n    return\n\n  show:() ->\n    tables = []\n    for own key, table of @db.objectStoreNames\n      tables.push( table )\n    @results( @dbName, 'show', tables )\n    return\n\n  open:( table ) ->\n    @results( table, 'open', {} )\n\n  drop:( table ) ->\n    try\n      @db.deleteObjectStore(table)\n      @results( table, 'drop', {} )\n    catch error\n       @onerror( table, 'drop', error )\n    return\n\nexport default Index\n\n###\n  addTable:( table, id, obj ) ->\n    if not @contains( @db, table )\n      @openDB( @dbName, @dbVersion, [table] )\n        .then( (db) =>\n           @db = db\n           @addHas( table, id, obj )\n           return )\n        .catch( (error) =>\n           @onerror( table, 'addTable', error )\n           return )\n    else\n      @addHas( table, id, obj )\n    return\n\n  initDB:() ->\n    `function open(that) {\n      return await that.openDB( that.dbName, that.version() ) }`\n    @db = open(@)\n    console.log( 'Index.initDB()', @db.name, @db.version )\n    return\n\n  openDatabase:() ->\n    request = @indexedDB.open( @dbName, @dbVersion ) # request = @indexedDB.IDBFactory.open( database, @dbVersion )\n    request.onupgradeneeded = ( event ) =>\n      @dbs = event.target.result\n      @objectStoreNames = @dbs['objectStoreNames']\n      @createObjectStores()\n      console.log( 'Store.IndexedDB', 'upgrade', @dbName, @objectStoreNames )\n    request.onsuccess = ( event ) =>\n      @dbs = event.target.result\n      console.log( 'Store.IndexedDB', 'open',    @dbName, @objectStoreNames )\n      @publish( 'none', 'open', 'none', @dbs.objectStoreNames )\n    request.onerror   = () =>\n      console.error( 'Store.IndexedDB.openDatabase() unable to open', { database:@dbName, error:request.error } )\n      @onError( 'none', 'open', 'none', @dbName, { error:request.error } )\n###\n\n"
  ]
}
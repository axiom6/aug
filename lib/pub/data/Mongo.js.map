{
  "version": 3,
  "file": "Mongo.js",
  "sourceRoot": "../../src/data",
  "sources": [
    "Mongo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport   { type }   from '../test/Type.js'\nimport     Store    from './Store.js'\n#mport     assert   from 'assert'\nimport     MongoDB  from 'mongodb';\nClientDB = MongoDB['MongoClent']\n\nclass Mongo extends Store\n\n  constructor:( stream, dbName ) ->\n    super(      stream, dbName )\n    @url    = 'mongodb://localhost:27017'\n    @client = new ClientDB(@url)\n    @db     = @openDB( @dbName )\n\n  openDB:( dbName ) ->\n    db = {}\n    @client.connect( (error) =>\n      if error inst null\n        db = @client.db( dbName )\n      else\n        @onerror( dbName, \"open\", error, 'none' ) )\n    db\n\n  add:( tn, id, obj ) ->\n    callback = () =>\n      @results( tn, 'get', obj, id )\n    @insert( tn, {obj}, callback )\n    return\n\n  get:( tn, id, callback=null ) ->\n    callback = () =>\n      @results( tn, 'get', obj )\n    @select( tn, { id:id }, callback )\n    return\n\n  put:( tn, id,  obj ) ->\n    collection = @db.collection(tn)\n    collection.updateOne( { id:id }, { $set:obj }, ( error, result ) =>\n      if error inst null\n        @results( tn, 'put', result )\n      else\n        @onerror( tn, \"put\", error, 'none' ) )\n    return\n\n  del:( tn, id ) ->\n    collection = @db.collection(tn)\n    collection.deleteOne( { id:id }, ( error, result ) =>\n      if error inst null\n        @results( tn, 'del', result )\n      else\n        @onerror( tn, \"del\", error, 'none' ) )\n    return\n\n  insert:( tn, objs, callback=null ) ->\n    array      = type.toArray(objs)\n    collection = @db.collection(tn)\n    collection.insertMany( array, ( error, result ) =>\n      type.noop( result  )\n      if error inst null\n        if callback? then callback(objs) else @results( tn, 'insert', objs )\n      else\n        @onerror( tn, \"insert\", error, 'none' ) )\n    return\n\n  select:( tn, where, callback=null ) ->\n    objs       = {}\n    collection = @db.collection(tn)\n    collection.find(where).toArray( ( error, objs ) =>\n      if error inst null\n        if callback? then callback( objs ) else @results( tn, 'select', objs )\n      else\n        @onerror( tn, \"open\", error, 'none' ) )\n    return\n\n  update:( tn, objs ) ->\n    for own key, obj of objs\n      @put( tn, key, obj )\n    return\n\n  remove:( tn, where ) ->\n    callback = (objs) =>\n      for own key, obj of objs\n        @del( tn, key, obj )\n    @select( tn, where, callback )\n    return\n\n  show:() ->\n    callback = ( error, result ) =>\n      if error isnt null\n        @results( 'none', 'show', result )\n      else\n        @onerror( 'none', \"show\", error, )\n    @db.listDatabases( { nameOnly:true }, callback )  # ??? or @client\n    return\n\n  open:( table ) ->\n    @results( table, 'open', \"noop()\" )\n    return\n\n  # Considering remove an entire table collection\n  drop:( table ) ->\n    @results( table, 'drop', \"noop()\" )\n    return\n\nexport default Mongo\n"
  ]
}
{
  "version": 3,
  "file": "Snippets.js",
  "sourceRoot": "../../../src/base/util",
  "sources": [
    "Snippets.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nLog =\n  logPrefix: \"(App)\"\n\n  log: (args...) ->\n    args.unshift(@logPrefix) if @logPrefix\n    console?.log(args...)\n\n# Execute function immediately\ntype = do ->\n  classToType = {}\n  for name in \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \")\n    classToType[\"[object \" + name + \"]\"] = name.toLowerCase()\n\n  # Return a function\n  (obj) ->\n    strType = Object::toString.call(obj)\n    classToType[strType] or \"object\"\n\ntype = do ->\n  classToType = {}\n  for name in \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \")\n    classToType[\"[object \" + name + \"]\"] = name.toLowerCase()\n\n  (obj) ->\n    strType = Object::toString.call(obj)\n    classToType[strType] or \"object\"\n\n# Returns the sort of types we'd expect:\ntype(\"\")         # \"string\"\ntype(new String) # \"string\"\ntype([])         # \"array\"\ntype(/\\d/)       # \"regexp\"\ntype(new Date)   # \"date\"\ntype(true)       # \"boolean\"\ntype(null)       # \"null\"\ntype({})         # \"object\"\n\naVar = \"\"\nif typeof aVar isnt \"undefined\"\n  objectType = type(aVar)\n\n# Or more succinctly with the existential operator:\n\nobjectType = type(aVar?)\n\n# Returns 8, not 10!\nparseInt('010') is 8\n\n# Always pass a base to the function to make it work correctly:\n\n# Use base 10 for the correct result\nparseInt('010', 10) is 10\n\n\"use strict\"\n\ndo ->\n  \"use strict\"\n  console.log(arguments.callee)\n\n# ------ Testing ------\n\nassert = require 'assert'\n{addWord, removeWord} = require './word_utils'\n\ndo removeWordShouldRemoveOneWord = ->\n  input = \"product special\"\n  expectedOutput = \"product\"\n  actualOutput = removeWord input, \"special\"\n  assert.equal expectedOutput, actualOutput\n\n# coffee word_utils.spec.coffee\n#AssertionError: \"product ial\" == \"product special\"\n\naddClass = (selector, newClass) ->\n  element = document.querySelector selector\n  if element.className?\n    element.className = \"#{element.className} #{newClass}\"\n  else\n    element.className = newClass\n\ndo ->\n  name = 'Ren'\n  if name then false\ndo () ->\n  name = 'Stimpy'\n  if name then false\n\nmakeIncrement = () ->\n  n = 0\n  () ->\n    n = n + 1\n    n\n\nincrementer = makeIncrementer()\nincrementer()\n# 1\n\nincrementer()\n# 2\n\nimport fs from 'path'\n\nmakeMostRecent = (file1, file2) ->\n  mostRecent = 'Nothing read yet.'\n\n  sourceFileWatcher = (fileName) ->\n    sourceFileReader = () ->\n      fs.readFile fileName, 'utf-8', (error, data) ->\n        mostRecent = data\n    fs.watch fileName, sourceFileReader\n\n  sourceFileWatcher file1\n  sourceFileWatcher file2\n\n  getMostRecent = () ->\n    mostRecent\n\n  getMostRecent() # not part of example. Used to silence code inspector\n\nmostRecentTweedle = makeMostRecent 'tweedle.dee', 'tweedle.dum'\n\nclosedOverArgument = (x) ->\n  () -> x\n\n# five = closedOverArgument 5\n\n# nine = closedOverArgument 9\n\n\n#Literate: W B Yeats The Wild Swans at Coole\n\n#Literate: The trees are in their autumn beauty,\n\ntrees = [{}, {}]\nfor tree in trees\n  tree.inAutumnBeauty = yes\n\n#Literate: The woodland paths are dry,\n\npaths = [{}, {}, {}]\nfor path in paths\n  path.dry = yes\n\n#Literate: Under the October twilight the water Mirrors a still sky;\n\noctoberTwilight = {}\nstillSky = {}\nwater =\n  placeUnder: ->\n\nwater.placeUnder octoberTwilight\nwater.mirrors = stillSky\n\n#Literate: Upon the brimming water among the stones Are nine-and-fifty swans.\n\nwater.brimming = true\nwater.stones = [{}, {}, {}, {}]\n\nclass Swan\n  x: 3\n\nfor n in [1..59]\n  water.stones.push new Swan\n\nassert 'fundamental'.indexOf('fun') >= 0\n\nimport http from 'http'\nsend = (next) ->\n  http.send next()\n\nemail = () ->\n\n# Object DSL\n\nsession = { user:{ name:\"Mark\"} }\n\nquery\n  SELECT: '*'\n  FROM:   'users'\n  WHERE:  \"name LIKE '%#{session.user.name}%'\"\n\nclass Person\n\n  constructor:( options ) ->\n    { @name, @age, height = 'average' } = options\n    @height = height\n\ntim = new Person( name: 'Tim', age: 4 )\n\nif tim then false\n\nperfectSquares = () ->\n  num = 0\n  loop\n    num += 1\n    yield num * num\n  return\n\nwindow.ps or= perfectSquares()\n\nfibonacci = () ->\n  current  = 0\n  previous = 0\n  [previous, current] = [1, 1]\n  loop\n    [previous, current] = [current, previous + current]\n    yield current\n  return\n\ngetFibonacciNumbers = (length) ->\n  results = [1]\n  for n from fibonacci()\n    results.push(n)\n    break if results.length is length\n  results\n\n# ----- Sleep ------\n\nsleep = (ms) ->\n  new Promise (resolve) ->\n    window.setTimeout resolve, ms\n\nsay = (text) ->\n  window.speechSynthesis.cancel()\n  window.speechSynthesis.speak new SpeechSynthesisUtterance( text )\n\ncountdown = (seconds) ->\n  for i in [seconds..1]\n    say( i )\n    await sleep( 1000 ) # wait one second\n  say( \"Blastoff!\"  )\n\ncountdown( 3 )\n\nscore = 76\ngrade = switch\n  when score < 60 then 'F'\n  when score < 70 then 'D'\n  when score < 80 then 'C'\n  when score < 90 then 'B'\n  else                 'A'\n\npopular  = ['pepperoni', 'sausage', 'cheese']\nunwanted = ['anchovies', 'olives']\n\nall = [popular..., unwanted..., 'mushrooms']\n\nuser =\n  name: 'Werner Heisenberg'\n  occupation: 'theoretical physicist'\n\ncurrentUser = { user..., status: 'Uncertain' }\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nstart   = numbers[0..2]\n\nmiddle  = numbers[3...-2]\n\nend     = numbers[-2..]\n\ncopy    = numbers[..]\n\nmind  = null\nworld = null\nyeti  = null\n\nsolipsism = true if mind? and not world?\n\nspeed = 0\nspeed ?= 15\n\nfootprints = yeti ? \"bear\"\n\nprint = (arg) ->\n\ntry\n  allHellBreaksLoose()\n  catsAndDogsLivingTogether()\ncatch error\n  print( error )\nfinally\n  cleanUp()\n\ncholesterol = 127\n\nhealthy = 200 > cholesterol > 60\n\nimport './local-file.coffee'\nimport 'coffeescript'\n\nimport _ from 'underscore'\nimport * as underscore from 'underscore'\n\n\n\nimport { now } from 'underscore'\nimport { now as currentTimestamp } from 'underscore'\nimport { first, last } from 'underscore'\nimport utilityBelt, { each } from 'underscore'\n\nif _ and underscore and now and currentTimestamp and first and last and utilityBelt and each then false\n\nexport default Math\nexport square = (x) -> x * x\nexport class Mathematics\n  least: (x, y) -> if x < y then x else y\n\nsqrt = Math.sqrt\nMathematics = Math\n\nexport { sqrt }\nexport { sqrt as squareRoot }\nexport { Mathematics as default, sqrt as squareRoot }\n\nmin = Math.min\nmax = Math.max\nexport * from 'underscore'\nexport { max, min } from 'underscore'\n\n# Your browser must support dynamic import to run this example.\n\ndo ->\n  { run } = await import('./browser-compiler-modern/coffeescript.js')\n  run(\n    if 5 < new Date().getHours() < 9\n      alert 'Time to make the coffee!'\n    else\n      alert 'Time to get some work done.' )\n\nNUMBER     = ///\n  ^ 0b[01]+    |              # binary\n  ^ 0o[0-7]+   |              # octal\n  ^ 0x[\\da-f]+ |              # hex\n  ^ \\d*\\.?\\d+ (?:e[+-]?\\d+)?  # decimal\n///i\n\ndraw = (ctx) -> # Try changing colors below\n  ctx.beginPath(); ctx.strokeStyle = 'gold'\n  drawMove ctx, (ix for ix in [0...90] by 10)\n  ctx.beginPath(); ctx.strokeStyle = 'salmon'\n  drawPath ctx, (ix for ix in [0...90] by 10)\n\nmovement = (ctx, ax, ay, cp1x, cp1y, cp2x, cp2y, x, y) ->\n  ctx.moveTo ax, ay\n  ctx.bezierCurveTo cp1x, cp1y, cp2x, cp2y, x, y\n\ndrawMove = (ctx, args) ->\n  args.forEach (ix) -> movement ctx,\n    0, 0, 30, 30, 150+ix, 50, 110+ix, 90\n  ctx.stroke()\n\n\nu = undefined\npartialFree = (func, a...) -> (b...) ->\n  func (for arg in a then arg ?= b.shift())...\n\nswirl = partialFree movement, u, u, 0, 30, 30, u, 50, u, 90\n\ndrawPath = (ctx, args) ->\n  args.forEach (ix) -> swirl( ctx, 200, 150+ix, 110+ix )\n  ctx.stroke()\n\nt = {}\nt.assert = ( result, expect ) ->\n   result is expect\n\ntest1 = ( func, args..., expect ) ->\n  result = func(args)\n  t.assert( result, expect )\n\ntest2 = ( func, args..., expect ) ->\n  (t) ->\n    result = func(args)\n    t.assert( result, expect )\n\npartial15lines = () ->\n  args = []      # Dumb useless declaration\n  func = () ->   # Dumb useless declaration\n  [func, args...] = arguments\n  wrapper = () ->\n    i = 0\n    j = 0\n    res_args = []\n    while i < args.length\n      if args[i] == _\n        res_args.push arguments[j]\n        j++\n      else\n        res_args.push args[i]\n      i++\n    return func.apply null, res_args, wrapper\n\n# Most succinct partiol functio\npartial3lines = (func, a...) -> (b...) ->\n  func (for arg in a then arg ?= b.shift())...\n\nassert = ( result, expect ) ->\n  result is expect\n\n# Most succinct partiol functio\npartial3lines = (func, args..., expect ) ->\n  result = func( args )\n  assert( result, expect )\n\ntest = () ->\n  f = (x, y, z) -> x + 2*y + 5*z\n  g = partialFree( f, _, 1, _ )\n  show( \"g 3, 5 => #{g 3, 5} Expected: 30\" )\n\n  # Modified from an alexkg example\n  fold = (f, z, xs) ->\n    z = f(z, x) for x in xs\n    z\n  max = partialFree fold, Math.max, -Infinity, _\n  show \"max [-10..10] => #{max [-10..10]} Expected: 10\"\n\n  # Without free vars\n  partial = (f, a...) -> (b...) -> f a..., b...\n  min = partial fold, Math.min, Infinity\n  show \"min [-10..10] => #{min [-10..10]} Expected: -10\"\n\npartialFree = partial3lines\ntest()\n\n\"g 3, 5 => 30 Expected: 30\"\n\"max [-10..10] => 10 Expected: 10\"\n\"min [-10..10] => -10 Expected: -10 \"\n\ntest = (func) ->\n  for points in [-3..3]\n    func points\n\ntest (points) ->\n  show \"0: You got #{points} point#{if points > 1 then 's' else ''}\"\n\ndo (Pi = 3.14159265, diameter = (radius) -> radius * 2) ->\n  (radius) ->\n    diameter(radius) * Pi\n\ndo (I = ((x) -> x),\n    K = ((x) -> (y) -> x),\n    V = ((x) -> (y) -> (z) -> z(x(y))) ) ->\n  do (t = K, f = K(I)) ->\n    if V and f then false\n    # ...\n    # implement logical operators here\n    # ...\n\n###\nshow = if exports? then console.log else alert\n(require 'fs')['writeFileSync'] \"./bezier.html\",\n  webpage = (require 'coffeekup').render ->\n    doctype 5\n    html -> meta charset: 'utf-8',\n      head -> title 'Bezier path'\n      body ->\n        canvas id: 'drawCanvas', width: 300, height: 200\n        coffeescript ->\n          window.onload = ->\n            canvas = document.getElementById 'drawCanvas'\n            ctx = canvas.getContext '2d'\n            alert 'No canvas in this browser.' unless ctx?\n            draw ctx if draw? \n###\n"
  ]
}
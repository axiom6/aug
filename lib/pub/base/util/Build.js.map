{
  "version": 3,
  "file": "Build.js",
  "sourceRoot": "../../../src/base/util",
  "sources": [
    "Build.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util   from '../util/Util.js'\nimport Access   from '../util/Access.js'\n\nclass Build\n\n  # ---- Class Methods for Practices ----\n\n  @planes = ['Info', 'Know','Wise']\n\n  @create:( data, type ) ->\n    switch type\n      when 'Pack' then Build.createPacks( data )\n      when 'Prac' then Build.createPracs( data )\n      else                                data\n\n  @createPacks:( data ) ->\n    for key, pack of data when Util.isChild(key)\n      pack['name'] = key if not pack['name']?\n      Build.createPracs( pack )\n    data\n\n  @createPracs:( data ) ->\n    for pkey, pract of data when Util.isChild(pkey)\n      pract['name']        = pkey if not pract['name']?\n      for skey, study of pract  when Util.isChild(skey)\n        study['name']      = skey if not study['name']?\n        for tkey, topic of study  when Util.isChild(tkey)\n          topic['name']    = tkey if not topic['name']?\n          for ikey, item of topic when Util.isChild(ikey)\n            item['name']   = ikey if not item['name']?\n            for bkey, base of item when Util.isChild(bkey)\n              base['name'] = bkey if not base['name']?\n    data\n\n  @colPractices:( batch ) ->\n    prin = batch.Prin.data['Prin']\n    for plane in Build.planes\n      batch[plane].data['Prin'] = prin\n    return\n\n  @rowPractices:( batch ) ->\n    rows = batch.Rows.data['Rows']\n    for plane in Build.planes\n      batch[plane].data['Rows'] = rows\n    return\n\n  @copyAtt:( src, des ) ->\n    for own key, obj of src when not Util.isChild(key)\n      des[key] = obj\n    des\n\n  # for dir in [ 'west', 'north', 'east', 'south'   ]\n  # Call after all practices and studies have been read in\n  # Not used because we store studies with practices in /pract\n  @expandStudys:( groups, studies ) ->\n    for     gkey, group of groups when Util.isChild(gkey)\n      for   pkey, pract of group  when Util.isChild(pkey)\n        for skey, study of pract  when Util.isChild(skey)\n          pract[skey] = studies[skey] if studies[skey]?\n    return\n\n  # Call after all practices and topics have been read in\n  @expandTopics:( groups, topics, log=false ) ->\n    for       gkey, group of groups when Util.isChild(gkey)\n      console.log(  gkey ) if log\n      for     pkey, pract of group  when Util.isChild(pkey)\n        console.log(  \"  \", pkey ) if log\n        for   skey, study of pract  when Util.isChild(skey)\n          console.log(  \"    \", skey ) if log\n          for tkey, topic of study  when Util.isChild(tkey)\n            if topics[tkey]?\n              console.log( \"      \", tkey, \"match\" ) if log\n              topics[tkey]['name'] = tkey if not topics[tkey]['name']?\n              study[tkey] = topics[tkey]\n            else\n              console.log(  \"      \", tkey ) if log\n    return\n\n  # Build instance\n\n  constructor:( @batch, @komps=null ) ->\n    #@Spec   = @batch.Muse.data\n    @None    = { name:\"None\" }\n    Util.noop( @toGroups, @setAdjacents )\n\n  getPlane:( pracKey ) ->\n    for plane in Build.planes\n      pracs = @batch[plane].data\n      for own pkey, prac of pracs when Util.isChild(pkey)\n        return plane if pracKey is pkey\n    'None'\n\n  getSpecs:(  plane ) ->\n    if @batch[plane]?\n       @batch[plane].data\n    else\n      console.error( \"Build.getSpecs() #{plane}.json has not been input\" )\n      null\n\n  toGroups:( groups ) ->\n    for key, group of groups\n      group['key']     = key\n      group['name']    = if group.name? then group.name else key\n      group['border']  = if group['border']? then group['border'] else '0'\n    groups\n\n  toStudies:( prac ) ->\n    studies = {}\n    for skey, study of prac when Util.isChild(skey)\n      studies[skey] = study\n    @toOrder( studies )\n\n  toOrder:( studies, dirs=['north','west','east','south'] ) ->\n    ordered = {}\n    for dir in dirs\n      for skey, study of studies\n        ordered[skey] = study if study.dir is dir\n    ordered\n\n  combine:() ->\n    obj = {}\n    for arg in arguments\n      for own key, val of arg\n        obj[key] = val\n    obj\n\n  west:(   col ) ->\n    switch col\n      when 'Embrace'   then 'Encourage'\n      when 'Innovate'  then 'Embrace'\n      when 'Encourage' then 'Innovate'\n      else\n        console.error( 'Build.west() unknown col', col )\n        'Embrace'\n\n  east:(   col ) ->\n    switch col\n      when 'Embrace'   then 'Innovate'\n      when 'Innovate'  then 'Encourage'\n      when 'Encourage' then 'Embrace'\n      else\n        console.error( 'Build.east() unknown col', col )\n        'Embrace'\n\n  north:(  row ) ->\n    switch row\n      when 'Dim'   then 'Dim'\n      when 'Learn' then 'Share'\n      when 'Do'    then 'Learn'\n      when 'Share' then 'Do'\n      else\n        console.error( 'Build.north() unknown row', row )\n        'Learn'\n\n  south:(  row ) ->\n    switch row\n      when 'Dim'   then 'Dim'\n      when 'Learn' then 'Do'\n      when 'Do'    then 'Share'\n      when 'Share' then 'Learn'\n      else\n        console.error( 'Build.south() unknown row', row )\n        'Learn'\n\n  prev:(   plane ) ->\n    switch plane\n      when 'Info' then 'Wise'\n      when 'Know' then 'Info'\n      when 'Wise' then 'Know'\n      else           \n        console.error( 'Build.prev() unknown plane', plane )\n        'None'\n\n  next:(   plane ) ->\n    switch plane\n      when 'Info' then 'Know'\n      when 'Know' then 'Wise'\n      when 'Wise' then 'Info'\n      else\n        console.error( 'Build.next() unknown plane', plane )\n        'None'\n\n  adjacentPractice:( prac, dir ) ->\n    # console.log( 'Build.adjacentPractice', { prac:prac, dir:dir } )\n    return @None if not prac? or not prac.name? or prac.name is 'None' or not prac.column?\n\n    col = \"\"\n    row = \"\"\n    pln = \"\"\n    [col,row,pln] = switch dir\n      when 'west','nw','sw' then [@west(prac.column), prac.row,  prac.plane  ]\n      when 'east','sw','se' then [@east(prac.column), prac.row,  prac.plane  ]\n      when 'north'          then [prac.column, @north(prac.row), prac.plane  ]\n      when 'south'          then [prac.column, @south(prac.row), prac.plane  ]\n      when 'prev'           then [prac.column, prac.row,   @prev(prac.plane) ]\n      when 'next'           then [prac.column, prac.row,   @next(prac.plane) ]\n      else                       [\"None\",\"None\",\"None\"]\n\n    return @None if [col,row,pln] is [\"None\",\"None\",\"None\"]\n\n    pracs = {}\n    if @batch[pln]?\n      pracs = @batch[pln].data.pracs\n      # console.log( 'Build.adjacentPractice()', { plane:pln, pracs:pracs } )\n    else\n      console.error( 'Build.adjacentPractice() batch[] not found', [col,row,pln] )\n      return @None\n\n    for own key, adj of pracs when Util.isChild(key)\n      if adj.column is col and adj.row is row and adj.plane is pln\n        # console.log( 'adjacentPractice[col,row,pln]', [col,row,pln], adj )\n        return adj\n\n    console.log( 'Build.adjacentPractice[col,row,pln]', [col,row,pln], 'adj not found' )\n    @None\n\n  adjacentStudies:( practice, dir ) ->\n    adjPrac = @adjacentPractice( practice, dir )\n    if adjPrac.name isnt 'None' then @toStudies(adjPrac) else {}\n\n  connectName:( practice, dir, reverse ) ->\n    adjacent = @adjacentPractice( practice, dir )\n    if adjacent.name isnt 'None' then @centerBegEnd(practice.name,adjacent.name,reverse) else 'None'+'\\n'+'None'\n\n  centerBegEnd:( beg, end, reverse ) ->\n    b = if end.length > beg.length then Util.indent((end.length-beg.length)/2) + beg else beg\n    e = if beg.length > end.length then Util.indent((beg.length-end.length)/2) + end else end\n    # console.log( 'Build.centerBegEnd()', { beg:beg, end:end, blen:beg.length, elen:end.length, b:b, e:e,be:b+'\\n'+e })\n    if not reverse then b+'\\n'+e else e+'\\n'+b\n\n  setAdjacents:( practice ) ->\n    practice.west  = @adjacentPractice( practice, 'west'  )\n    practice.east  = @adjacentPractice( practice, 'east'  )\n    practice.north = @adjacentPractice( practice, 'north' )\n    practice.south = @adjacentPractice( practice, 'south' )\n    practice.prev  = @adjacentPractice( practice, 'prev'  )\n    practice.next  = @adjacentPractice( practice, 'next'  )\n    return\n\n  getPractices:( plane ) ->\n\n    if @batch[plane]? and @batch[plane].data?\n       @batch[plane].data\n    else\n       console.error( 'Build.getPractices()', plane )\n       {}\n\n  getPractice:( row, column, plane ) ->\n    practices = @getPractices(plane)\n    for own pkey, prac of practices when Util.isChild(pkey) and prac.column is column and prac.row is row\n      return prac\n    console.error( 'Prac.getPractice() practice not found for', { column:column, row:row, plane:plane } )\n    null # Landmine\n\n  getPracticeStudy:( row, column, plane, dir ) ->\n    practice = @getPractice( row, column, plane )\n    study    = @getDir( practice, dir )\n    study\n\n  getDir:( practice, dir ) ->\n    for own skey, study of practice when Util.isChild(skey)\n      return study if study.dir is dir\n    null\n\n  getDim:( cname, dir ) ->\n    col = @getCol(cname)\n    for key, dim of col  when Util.isChild(key)\n      # console.log( 'Build.getDim()', { key:key, dim:dim, col:col } )\n      return dim if dim.dir is dir\n    @None\n\n  getCol:( cname ) ->\n    @batch.Prin.data[cname]\n\n  logPlanes:( planes ) ->\n    console.log( '----- Beg Log Planes  ------' )\n    for keyPlane in planes\n      console.log( \"Plane: \",    keyPlane )\n      practices = @getPractices( keyPlane )\n      for own keyPractice, objPractice of practices when Util.isChild(keyPractice)\n        console.log( \"  Practice: \", keyPractice )\n        for own keyStudy, objStudy of objPractice when Util.isChild(keyStudy)\n          console.log( \"    Study: \", keyStudy )\n          for own keyTopic, objTopic of objStudy when Util.isChild(keyTopic)\n            console.log( \"      Topic: \", keyTopic )\n            for own keyItem, objItem of objTopic when Util.isChild(keyItem)\n              console.log( \"        Item: \", keyItem )\n              for own keyBase, objBase of objItem when Util.isChild(keyBase)\n                console.log( \"          Base: \", keyBase )\n    console.log( '----- End Log Planes ------' )\n    return\n\n  logBatch:( batch, comps ) ->  # Build.planes\n    console.log( '----- Beg Log Batch  ------' )\n    for comp in comps\n      console.log( \"Comp: \", comp )\n      pracs = batch[comp].data\n      for own keyPractice, objPractice of pracs when Util.isChild(keyPractice)\n        console.log( \"    Prac: \", keyPractice )\n        for own keyStudy, objStudy of objPractice when Util.isChild(keyStudy)\n          console.log( \"      Disp: \", keyStudy )\n    console.log( '----- End Log Batch ------' )\n    return\n\n  logByConduit:() ->\n    console.log( '----- Beg Log By Conduit  ------' )\n    for   row in ['Learn','Do','Share']\n      for col in ['Embrace','Innovate','Encourage']\n        infop = @getPractice( row, col, 'Info' )\n        knowp = @getPractice( row, col, 'Know' )\n        wisep = @getPractice( row, col, 'Wise' )\n        console.log( infop.name, knowp.name, wisep.name )\n        for dir in ['west','north','east','south']\n          infod = @getDir( infop, dir )\n          knowd = @getDir( knowp, dir )\n          wised = @getDir( wisep, dir )\n          console.log( '    ', infod.name, knowd.name, wised.name )\n    console.log( '----- End Log By Conduit  ------' )\n    return\n\n  planeIcon:( plane ) ->\n    if plane is 'Data' then 'fas fa-table' else if @komps? then @komps[plane].icon else 'fas fa-circle'\n\n  dimDisps:() ->\n    for col in ['Embrace','Innovate','Encourage']\n      planes = if col is  'Innovate' then Build.planes else Build.planes # 'Data',\n      for dir in ['west','north','east','south']\n        dim  = @getDim(col,dir)\n        dim.column = col\n        dim.dims = []\n        for plane in planes\n          dim.dims.push( { name:plane, icon:@planeIcon(plane), klass:@dimKlass('Plane',plane) } )\n          for row in ['Learn','Do',   'Share']\n            prac = @getPractice( row, col, plane )\n            disp = @getDir( prac, dir )\n            disp.klass  = @dimKlass( row, plane )\n            dim.dims.push(disp)\n    return\n\n  dimKlass:( row, plane ) ->\n    row.charAt(0).toLowerCase() + plane.charAt(0).toLowerCase()\n\n  colPracs:() ->\n    for cname in ['Embrace','Innovate','Encourage']\n      planes = if cname is  'Innovate' then Build.planes else Build.planes # 'Data',\n      col = @getCol(cname)\n      col.dims = []\n      for plane in planes\n        col.dims.push( { name:plane, icon:@planeIcon(plane), klass:@dimKlass('Plane',plane) } )\n        for row in ['Learn','Do','Share']\n          prac = @getPractice( row, cname, plane )\n          prac.klass = @dimKlass( row, plane )\n          col.dims.push(prac)\n    return\n\n  logByColumn:() ->\n    console.log( '----- Beg Log By Column  ------' )\n    for cname in ['Embrace','Innovate','Encourage']\n      console.log( cname )\n      for dir in ['west','north','east','south' ]\n        dim  = @getDim(cname,dir)\n        console.log( '  ', dim.name, '------' ) # Learn', 'Do', 'Share ', dir )\n        for plane in Build.planes\n          lprac = @getPractice( 'Learn', cname, plane )\n          dprac = @getPractice( 'Do',    cname, plane )\n          sprac = @getPractice( 'Share', cname, plane )\n          learn = @getDir( lprac, dir )\n          doit  = @getDir( dprac, dir )\n          share = @getDir( sprac, dir )\n          console.log( '    ', plane+':', learn.name, doit.name, share.name )\n    console.log( '----- End Log By Column  ------' )\n    return\n\n  logAsTable:() ->\n    console.log( '----- Beg Log As Table  ------' )\n    for cname in ['Embrace','Innovate','Encourage']\n      console.log( cname )\n      obj = {}\n      for dir in ['west','north','east','south' ]\n        dim  = @getDim(cname,dir)\n        for plane in Build.planes\n          lprac = @getPractice( 'Learn', cname, plane )\n          dprac = @getPractice( 'Do',    cname, plane )\n          sprac = @getPractice( 'Share', cname, plane )\n          learn = @getDir( lprac, dir )\n          doit  = @getDir( dprac, dir )\n          share = @getDir( sprac, dir )\n          obj[plane] = { Dimension:dim.name, Learn:learn.name, Do:doit.name, Share:share.name }\n          # data.push( [ pln, prin, learn.name, doit.name, share.name ] )\n      # console.table( data, ['Plane','Principle','Learn', 'Do', 'Share'])\n      console.table( obj )\n    console.log( '----- End Log As Table  ------' )\n    return\n\n  saveAsHtml:( name ) ->\n    htm  = \"\"\"<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head><meta charset=\"utf-8\">\\n    <title>#{name}</title>\"\"\"\n    htm += \"\"\"\\n    <link href=\"#{name}.css\" rel=\"stylesheet\" type=\"text/css\"/>\\n  </head>\\n  <body>\\n\"\"\"\n    for col in ['Embrace','Innovate','Encourage']\n      htm += \"\"\"    <div class=\"col\">#{col}</div>\\n\"\"\"\n      for dir in ['west','north','east','south' ]\n        dim  = @getDim(col,dir)\n        htm += \"\"\"    <table>\\n      <thead>\\n        \"\"\"\n        htm += \"\"\"<tr><th>Plane</th><th>#{dim}</th><th>Learn</th><th>Do</th><th>Share</th></tr>\\n      </thead>\\n      <tbody>\\n\"\"\"\n        for plane in Build.planes\n\n          lprac = @getPractice( 'Learn', col, plane )\n          dprac = @getPractice( 'Do',    col, plane )\n          sprac = @getPractice( 'Share', col, plane )\n          learn = @getDir( lprac, dir )\n          doit  = @getDir( dprac, dir )\n          share = @getDir( sprac, dir )\n          htm  += \"\"\"        <tr><td>#{plane}:</td><td>#{dim}</td><td>#{learn.name}</td><td>#{doit.name}</td><td>#{share.name}</td></tr>\\n\"\"\"\n        htm += \"\"\"      </tbody>\\n    </table>\\n\"\"\"\n    htm += \"\"\"  </body>\\n</html>\\n\"\"\"\n    Access.saveHtml( name, htm )\n    return\n\nexport default Build"
  ]
}
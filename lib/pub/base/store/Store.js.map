{
  "version": 3,
  "file": "Store.js",
  "sourceRoot": "../../../src/base/store",
  "sources": [
    "Store.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util from '../util/Util.js'\n\nclass Store\n\n  constructor:( stream, dbName ) ->\n    @stream   = stream\n    @dbName   = dbName\n    @source   = @constructor.name\n    @keyProp  = \"_id\"\n    @tables   = @getTables()\n\n  toSubject:( table, op ) ->\n    table + ':' + op\n\n  # id gets lost\n  publish:( table, op, result ) ->\n    @stream.publish( @toSubject(table,op), result )\n    return\n\n  results:  ( table, op, result ) ->\n    obj = if result? then result else {}\n    @publish( table, op, obj )\n    return\n\n  onerror:( table, op, error, id='none' ) ->\n    msg    =  { table:table, op:op, error:error }\n    msg.id = id if id isnt 'none'\n    console.error( 'Store.onerror', msg )\n    return\n\n  subscribe:( table, op, source, onSubscribe  ) ->\n    if op isnt 'change'\n      if not @stream.hasSubject( @toSubject(table,op) )\n        @stream.subscribe( @toSubject(table,op), source, onSubscribe )\n    else\n      for changeOp in Store.changeOps\n        @stream.subscribe( @toSubject(table,changeOp), source, onSubscribe )\n    return\n\n  unsubscribe:( table, op, source  ) ->\n    @stream.unsubscribe( @toSubject(table,op), source )\n    return\n\n  # SQL rowops\n  get:( table, id, callback ) ->  # Get an object from table with id\n  add:( table, id, obj )      -> # Post an object into table with id\n  put:( table, id, obj )      -> # Put an object into table with id\n  del:( table, id )           -> # Delete  an object from table with id\n\n  # SQL tables with multiple objects (rows)    \n  select:( table, where=Store.where, callback ) ->  # Get an object from table with id\n  insert:( table, objs ) -> # Insert objects into table with unique id\n  update:( table, objs ) -> # # Update objects into table mapped by id\n  remove:( table, where=Store.where ) -> # Delete objects from table with where clause\n\n  # Table DDL (Data Definition Language)\n  show:() ->\n    shows = {}\n    for own key,table of @table when @source is table.source\n      shows[key] = table\n    @results( 'Shows', 'show', shows )\n    return\n\n  open:( table ) ->\n\n  drop:( table ) ->\n\n  change:( table, id='None' ) ->\n\n  getTables:() ->\n    str = localStorage.getItem( 'Tables' )\n    if str? then JSON.parse(str) else {}\n\n  showTables:() ->\n    @results( 'Tables', 'show', @tables )\n    return\n\n  openTable:( table ) -> # Create a new table. For now only reallt used by CouchDB\n    @tables[table] = {} if not @tables[table]\n    if not @tables[table][@source]?\n      @tables[table][@source] = {}\n      json = JSON.stringify( @tables )\n      localStorage.setItem( 'Tables', json )\n      @open( table ) if @source is 'Couch'\n    @results( table, 'open', table+@source )\n    return\n\n  dropTable:( table ) -> # Drop the entire @table - good for testing\n    if @tables[table][@source]?\n      delete @tables[table+@source]\n      json = JSON.stringify( @tables )\n      localStorage.setItem( 'Tables', json )\n    @results( table, 'drop', table+@source )\n    return\n\n  # REST Api  CRUD + Subscribe for objectect records\n\n  # A set is Table:{ url:'muse/Prin.json', result:json }\n  batch:( sets, callback ) ->\n    for  own table, set of sets\n      @batchSelect( table, set, sets, callback )\n    return\n\n  batchComplete:( sets ) ->\n    for own table, set of sets\n      return false if not set['result']?\n    true\n\n  batchSelect:( table, set, sets, callback=null ) ->\n    onBatch = (result) =>\n      set.result = result\n      if @batchComplete( sets )\n        if callback?\n           callback( sets )\n        else\n           @results( table, 'batch', sets )\n    where = () -> true\n    @select( table, where, onBatch ) # Calls the derived Store\n    return   \n\n  copyTable:( src, des, table, where=Store.where ) ->\n    callback = (results) ->\n      des.insert( table, results )\n    src.select(   table, where, callback )\n    return\n\n  copyDatabase:( src, des ) ->\n    for own table, data of @tables\n      @copyTable( src, des, table, Store.where )\n    return\n\n  # Utilities\n  toObjects:( results, query ) ->\n    where = if query? then query else (obj)->true\n    if @isArray(results)\n      objs = {}\n      for row in results when where(row)\n        objs[row[@keyProp]] = row\n      objs\n    else\n      objs = {}\n      for own key, obj of results when where(obj)\n         objs[key] = obj\n      objs\n\n  toArray:( objs ) -> Util.toArray( objs )\n  isArray:( a )    -> Util.isArray( a    )\n  isStr:(   s )    -> Util.isStr(   s    )\n\nStore.changeOps = ['change','add','put','del','insert','update','remove']\n\n# RDUDC            Retrieve  Create    Update    Delete   Change\nStore.restOps  = [ 'get',    'add',    'put',    'del'    ]  #batch\nStore.sqlOps   = [ 'select', 'insert', 'update', 'remove' ]\nStore.tableOps = [ 'show',   'open',             'drop'   ]\nStore.allOps   = Store.restOps.concat( Store.sqlOps, Store.tableOps )\n\n# Dafaults for empty arguments\nStore.where  = () -> true # Default where clause filter that returns true to access all records\n \nexport default Store\n"
  ]
}
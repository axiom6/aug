{
  "version": 3,
  "file": "Main.js",
  "sourceRoot": "../../src/docs",
  "sources": [
    "Main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Docs       from \"./Docs.js\"\nimport commander  from 'commander'\n\nclass Main\n\n  ###\n  Command Line Interface\n  ----------------------\n  Finally, let's define the interface to run Docco from the command line.\n  Parse options using [Commander](https://github.com/visionmedia/commander.js).\n  ###\n  Main.run = ( args = process.argv ) ->\n    version = \"1.0.0\"\n    docs    = new Docs()\n    commander.version(version)\n      .usage('[options] files')\n      .option('-L, --languages [file]', 'use a custom languages.json', _.compose JSON.parse, fs.readFileSync)\n      .option('-l, --layout [name]',    'choose a layout (parallel, linear or classic)', docs.layout)\n      .option('-o, --output [path]',    'output to a given folder', docs.output)\n      .option('-c, --css [file]',       'use a custom css file', docs.css)\n      .option('-t, --template [file]',  'use a custom .jst template', docs.template)\n      .option('-e, --extension [ext]',  'assume a file extension for all inputs', docs.extension)\n      .option('-m, --marked [file]',    'use custom marked options', docs.marked)\n      .parse(args)\n      .name = \"docs\"\n    if commander.args.length\n      docs.createDoc()\n    else\n      console.log commander.helpInformation()\n    Main.docs = docs\n\n  ###\n  **Configure** this particular run of Docs. We might use a passed-in external\n  template, or one of the built-in **layouts**. We only attempt to process\n  source files for languages for which we have definitions.\n  ###\n  Main.configure = ( options ) ->\n\n    docs = Main.docs\n\n    config = _.extend {}, @defaults(), _.pick(options.opts(), _.keys(@defaults())...)\n\n    docs.languages = @buildMatchers( docs.languages )\n    ###\n    The user is able to override the layout file used with the `--template` parameter.\n    In this case, it is also neccessary to explicitly specify a stylesheet file.\n    These custom templates are compiled exactly like the predefined ones, but the `public` folder\n    is only copied for the latter.\n    ###\n    if options.template\n      unless options.css\n        console.warn \"docco: no stylesheet file specified\"\n      docs.layout = null\n    else\n      dir = @layout = path.join( __dirname, 'resources', @layout )\n      docs.public   = path.join( dir, 'public' if fs.existsSync path.join dir, 'public' )\n      docs.template = path.join(  dir, 'docco.jst' )\n      docs.css      = options.css or path.join( dir, 'docco.css' )\n    docs.template = _.template( fs.readFileSync(docs.template).toString() )\n\n    if options.markedOpts\n      docs.markedOpts = JSON.parse( fs.readFileSync(options.markedOpts) )\n\n    docs.sources = options.args.filter((source) ->\n      lang = @getLanguage( source )\n      console.warn \"docco: skipped unknown type (#{path.basename source})\" unless lang\n      lang\n    ).sort()\n    return"
  ]
}
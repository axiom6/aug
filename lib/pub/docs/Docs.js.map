{
  "version": 3,
  "file": "Docs.js",
  "sourceRoot": "../../src/docs",
  "sources": [
    "Docs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport _           from 'underscore'\nimport fs          from 'fs-extra'\nimport path        from 'path'\nimport marked      from 'marked'\nimport highlightjs from 'highlight.js'\nimport languages   from '../../doc/public/json/languages.json'\n\n\nclass Docs\n\n  constructor:() ->\n    @layout    = 'parallel'\n    @output    = 'docs'\n    @template   = null\n    @css        = null\n    @extension  = null\n    @markedOpts = null\n    @languages @buildMatchers()\n\n  createDoc:(   options = {}, callback ) ->\n    @configure( options )\n\n    fs.mkdirs @output, () ->\n\n      callback or= (error) -> throw error if error\n      copyAsset  = (file, callback) ->\n        return callback() unless fs.existsSync file\n        fs.copy file, path.join(@output, path.basename(file)), callback\n      complete   = ->\n        copyAsset @css, (error) ->\n          return callback error if error\n          return copyAsset @public, callback if fs.existsSync @public\n          callback()\n\n      files = @sources.slice()\n\n      nextFile = () ->\n        source = files.shift()\n        fs.readFile source, (error, buffer) ->\n          return callback error if error\n\n          code     = buffer.toString()\n          sections = parse( source, code )\n          format( source, sections )\n          write(  source, sections )\n          if files.length then nextFile() else complete()\n\n      nextFile()\n\n  ###\n  Given a string of source code, **parse** out each block of prose and the code that\n  follows it — by detecting which is which, line by line — and then create an\n  individual **section** for it. Each section is an object with `docsText` and\n  `codeText` properties, and eventually `docsHtml` and `codeHtml` as well.\n  ###\n  parse:( source, code ) ->\n    lines    = code.split '\\n'\n    sections = []\n    lang     = getLanguage( source )\n    hasCode  = ''\n    docsText = ''\n    codeText = ''\n\n    save = ->\n      sections.push {docsText, codeText}\n      hasCode = docsText = codeText = ''\n    ###\n    Our quick-and-dirty implementation of the literate programming style. Simply\n    invert the prose and code relationship on a per-line basis, and then continue as\n    normal below.\n    ###\n    if lang.literate\n      isText    = yes\n      maybeCode = yes\n      for line, i in lines\n        lines[i] = if maybeCode and match = /^([ ]{4}|[ ]{0,3}\\t)/.exec line\n          isText = no\n          line[match[0].length..]\n        else if maybeCode = /^\\s*$/.test line\n          if isText then lang.symbol else ''\n        else\n          isText = yes\n          lang.symbol + ' ' + line\n\n    for line in lines\n      if line.match(lang.commentMatcher) and not line.match(lang.commentFilter)\n        save() if hasCode\n        docsText += (line = line.replace(lang.commentMatcher, '')) + '\\n'\n        save() if /^(---+|===+)$/.test line\n      else\n        hasCode = yes\n        codeText += line + '\\n'\n    save()\n\n  ###\n  To **format** and highlight the now-parsed sections of code, we use **Highlight.js**\n  over stdio, and run the text of their corresponding comments through\n  **Markdown**, using [Marked](https://github.com/chjj/marked).\n  Pass any user defined options to Marked if specified via command line option\n  ###\n  format:( source, sections ) ->\n    language   = @getLanguage( source )\n    markedOpts = { smartypants: true }\n    markedOpts =  @markedOpts if @markedOpts\n    marked.setOptions( markedOpts )\n    ###\n    Tell Marked how to highlight code blocks within comments, treating that code\n    as either the language specified in the code block or the language of the file\n    if not specified.\n    ###\n    marked.setOptions {\n      highlight: (code, lang) ->\n        lang or= language.name\n        if highlightjs.getLanguage(lang)\n           highlightjs.highlight(lang, code).value\n        else\n           console.warn \"docco: couldn't highlight code block with unknown language '#{lang}' in #{source}\"\n           code\n    }\n\n    for section, i in sections\n      code = highlightjs.highlight(language.name, section.codeText).value\n      code = code.replace(/\\s+$/, '')\n      section.codeHtml = \"<div class='highlight'><pre>#{code}</pre></div>\"\n      section.docsHtml = marked(section.docsText)\n  ###\n  Once all of the code has finished highlighting, we can **write** the resulting\n  documentation file by passing the completed HTML sections into the template,\n  and rendering it to the specified output path.\n  ###\n  write:( source, sections ) ->\n\n    destination = (file) ->\n      path.join(@output, path.dirname(file), path.basename(file, path.extname(file)) + '.html')\n\n    relative = (file) ->\n      to   = path.dirname(path.resolve(file))\n      from = path.dirname(path.resolve(destination(source)))\n      path.join(path.relative(from, to), path.basename(file))\n    ###\n    The **title** of the file is either the first heading in the prose, or the\n    name of the source file.\n    ###\n    firstSection = _.find sections, (section) ->\n      section.docsText.length > 0\n    first    = marked.lexer(firstSection.docsText)[0] if firstSection\n    hasTitle = first and first.type is 'heading' and first.depth is 1\n    title    = if hasTitle then first.text else path.basename source\n    css      = relative path.join(@output, path.basename(@css))\n\n    html = @template { sources: @sources, css,\n      title, hasTitle, sections, path, destination, relative }\n\n    console.log \"docco: #{source} -> #{destination source}\"\n    fs.outputFileSync destination(source), html\n\n\n\n\n  ###\n  Build out the appropriate matchers and delimiters for each language.\n  ###\n  buildMatchers:() ->\n    for ext, l of languages\n      l.commentMatcher = ///^\\s*#{l.symbol}\\s?///\n      l.commentFilter = /(^#![/]|^\\s*#\\{)/\n      languages\n\n  ###\n  A function to get the current language we're documenting, based on the\n  file extension. Detect and tag \"literate\" `.ext.md` variants.\n  ###\n  getLanguage:( source ) ->\n    ext  = @extension or path.extname(source) or path.basename(source)\n    lang = @languages?[ext] or @languages[ext]\n    if lang and lang.name is 'markdown'\n      codeExt  = path.extname(path.basename(source, ext))\n      codeLang = @languages?[codeExt] or @languages[codeExt]\n      if codeExt and codeLang\n        lang = _.extend {}, codeLang, {literate: yes}\n    lang\n\nexport default Docs\n"
  ]
}
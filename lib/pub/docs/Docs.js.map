{
  "version": 3,
  "file": "Docs.js",
  "sourceRoot": "../../src/docs",
  "sources": [
    "Docs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport _           from 'underscore'\nimport fs          from 'fs-extra'\nimport path        from 'path'\nimport marked      from 'marked'\nimport commander   from 'commander'\nimport highlightjs from 'highlight.js'\nimport languages   from '../../doc/public/json/languages.json'\n\n\nclass Docs\n\n  constructor:() ->\n\n  createDoc:( options = {}, callback ) ->\n    config = configure options\n\n    fs.mkdirs config.output, () ->\n\n      callback or= (error) -> throw error if error\n      copyAsset  = (file, callback) ->\n        return callback() unless fs.existsSync file\n        fs.copy file, path.join(config.output, path.basename(file)), callback\n      complete   = ->\n        copyAsset config.css, (error) ->\n          return callback error if error\n          return copyAsset config.public, callback if fs.existsSync config.public\n          callback()\n\n      files = config.sources.slice()\n\n      nextFile = () ->\n        source = files.shift()\n        fs.readFile source, (error, buffer) ->\n          return callback error if error\n\n          code = buffer.toString()\n          sections = parse source, code, config\n          format source, sections, config\n          write source, sections, config\n          if files.length then nextFile() else complete()\n\n      nextFile()\n\n  ###\n  Given a string of source code, **parse** out each block of prose and the code that\n  follows it — by detecting which is which, line by line — and then create an\n  individual **section** for it. Each section is an object with `docsText` and\n  `codeText` properties, and eventually `docsHtml` and `codeHtml` as well.\n  ###\n  parse:( source, code, config = {} ) ->\n    lines    = code.split '\\n'\n    sections = []\n    lang     = getLanguage( source, config )\n    hasCode  = ''\n    docsText = ''\n    codeText = ''\n\n    save = ->\n      sections.push {docsText, codeText}\n      hasCode = docsText = codeText = ''\n    ###\n    Our quick-and-dirty implementation of the literate programming style. Simply\n    invert the prose and code relationship on a per-line basis, and then continue as\n    normal below.\n    ###\n    if lang.literate\n      isText    = yes\n      maybeCode = yes\n      for line, i in lines\n        lines[i] = if maybeCode and match = /^([ ]{4}|[ ]{0,3}\\t)/.exec line\n          isText = no\n          line[match[0].length..]\n        else if maybeCode = /^\\s*$/.test line\n          if isText then lang.symbol else ''\n        else\n          isText = yes\n          lang.symbol + ' ' + line\n\n    for line in lines\n      if line.match(lang.commentMatcher) and not line.match(lang.commentFilter)\n        save() if hasCode\n        docsText += (line = line.replace(lang.commentMatcher, '')) + '\\n'\n        save() if /^(---+|===+)$/.test line\n      else\n        hasCode = yes\n        codeText += line + '\\n'\n    save()\n\n  ###\n  To **format** and highlight the now-parsed sections of code, we use **Highlight.js**\n  over stdio, and run the text of their corresponding comments through\n  **Markdown**, using [Marked](https://github.com/chjj/marked).\n  Pass any user defined options to Marked if specified via command line option\n  ###\n  format:( source, sections, config ) ->\n    language      = @getLanguage( source, config )\n    markedOptions = { smartypants: true }\n    markedOptions = config.marked if config.marked\n    marked.setOptions( markedOptions )\n    ###\n    Tell Marked how to highlight code blocks within comments, treating that code\n    as either the language specified in the code block or the language of the file\n    if not specified.\n    ###\n    marked.setOptions {\n      highlight: (code, lang) ->\n        lang or= language.name\n        if highlightjs.getLanguage(lang)\n           highlightjs.highlight(lang, code).value\n        else\n           console.warn \"docco: couldn't highlight code block with unknown language '#{lang}' in #{source}\"\n           code\n    }\n\n    for section, i in sections\n      code = highlightjs.highlight(language.name, section.codeText).value\n      code = code.replace(/\\s+$/, '')\n      section.codeHtml = \"<div class='highlight'><pre>#{code}</pre></div>\"\n      section.docsHtml = marked(section.docsText)\n  ###\n  Once all of the code has finished highlighting, we can **write** the resulting\n  documentation file by passing the completed HTML sections into the template,\n  and rendering it to the specified output path.\n  ###\n  write:( source, sections, config ) ->\n\n    destination = (file) ->\n      path.join(config.output, path.dirname(file), path.basename(file, path.extname(file)) + '.html')\n\n    relative = (file) ->\n      to   = path.dirname(path.resolve(file))\n      from = path.dirname(path.resolve(destination(source)))\n      path.join(path.relative(from, to), path.basename(file))\n    ###\n    The **title** of the file is either the first heading in the prose, or the\n    name of the source file.\n    ###\n    firstSection = _.find sections, (section) ->\n      section.docsText.length > 0\n    first    = marked.lexer(firstSection.docsText)[0] if firstSection\n    hasTitle = first and first.type is 'heading' and first.depth is 1\n    title    = if hasTitle then first.text else path.basename source\n    css      = relative path.join(config.output, path.basename(config.css))\n\n    html = config.template { sources: config.sources, css,\n      title, hasTitle, sections, path, destination, relative }\n\n    console.log \"docco: #{source} -> #{destination source}\"\n    fs.outputFileSync destination(source), html\n\n###\nConfiguration\n-------------\n\nDefault configuration **options**. All of these may be extended by\nuser-specified options.\n###\n\n###\n**Configure** this particular run of Docco. We might use a passed-in external\ntemplate, or one of the built-in **layouts**. We only attempt to process\nsource files for languages for which we have definitions.\n###\nconfigure = (options) ->\n  config = _.extend {}, @defaults(), _.pick(options.opts(), _.keys(@defaults())...)\n\n  config.languages = buildMatchers config.languages\n  ###\n  The user is able to override the layout file used with the `--template` parameter.\n  In this case, it is also neccessary to explicitly specify a stylesheet file.\n  These custom templates are compiled exactly like the predefined ones, but the `public` folder\n  is only copied for the latter.\n  ###\n  if options.template\n    unless options.css\n      console.warn \"docco: no stylesheet file specified\"\n    config.layout = null\n  else\n    dir = config.layout = path.join __dirname, 'resources', config.layout\n    config.public       = path.join dir, 'public' if fs.existsSync path.join dir, 'public'\n    config.template     = path.join dir, 'docco.jst'\n    config.css          = options.css or path.join dir, 'docco.css'\n  config.template = _.template fs.readFileSync(config.template).toString()\n\n  if options.marked\n    config.marked = JSON.parse fs.readFileSync(options.marked)\n\n  config.sources = options.args.filter((source) ->\n    lang = @getLanguage( source, config )\n    console.warn \"docco: skipped unknown type (#{path.basename source})\" unless lang\n    lang\n  ).sort()\n\n  config\n\n  ###\n  Build out the appropriate matchers and delimiters for each language.\n  ###\n  buildMatchers:() ->\n    for ext, l of languages\n      l.commentMatcher = ///^\\s*#{l.symbol}\\s?///\n      l.commentFilter = /(^#![/]|^\\s*#\\{)/\n      languages\n\n  ###\n  A function to get the current language we're documenting, based on the\n  file extension. Detect and tag \"literate\" `.ext.md` variants.\n  ###\n  getLanguage:( source, config ) ->\n    ext  = config.extension or path.extname(source) or path.basename(source)\n    lang = config.languages?[ext] or languages[ext]\n    if lang and lang.name is 'markdown'\n      codeExt = path.extname(path.basename(source, ext))\n      codeLang = config.languages?[codeExt] or languages[codeExt]\n      if codeExt and codeLang\n        lang = _.extend {}, codeLang, {literate: yes}\n    lang\n\n  defaults:() ->\n    layout:    'parallel'\n    output:    'docs'\n    template:   null\n    css:        null\n    extension:  null\n    marked:     null\n    languages:  @buildMatchers()\n\n  ###\n  Command Line Interface\n  ----------------------\n\n  Finally, let's define the interface to run Docco from the command line.\n  Parse options using [Commander](https://github.com/visionmedia/commander.js).\n  ###\n  run:( args = process.argv ) ->\n    version = \"1.0.0\"\n    c = @defaults()\n    commander.version(version)\n      .usage('[options] files')\n      .option('-L, --languages [file]', 'use a custom languages.json', _.compose JSON.parse, fs.readFileSync)\n      .option('-l, --layout [name]',    'choose a layout (parallel, linear or classic)', c.layout)\n      .option('-o, --output [path]',    'output to a given folder', c.output)\n      .option('-c, --css [file]',       'use a custom css file', c.css)\n      .option('-t, --template [file]',  'use a custom .jst template', c.template)\n      .option('-e, --extension [ext]',  'assume a file extension for all inputs', c.extension)\n      .option('-m, --marked [file]',    'use custom marked options', c.marked)\n      .parse(args)\n      .name = \"docco\"\n    if commander.args.length\n      @createDoc( commander )\n    else\n      console.log commander.helpInformation()\n\n# Docco = module.exports = {run, document, parse, format, version}\n\ndocs = new Docs()\nexport { docs }\n"
  ]
}
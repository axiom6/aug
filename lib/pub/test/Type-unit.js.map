{
  "version": 3,
  "file": "Type-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { type } from \"./Type.js\"\nimport { test, tester } from \"./Tester.js\"\nimport Stream from \"../base/util/Stream.js\"\nimport Vis    from '../base/draw/Vis.js'\n\nsubjects   = [\"TestStatus\",\"TestString\",\"TestSummary\"]\nstreamLog  = { subscribe:false, publish:false, subjects:subjects }\nstream     = new Stream( subjects, streamLog )\n\nfunc  = () ->\nundef = undefined\n\ntest().module( \"Type\", \"The type assertion and conversion class libary\")\n\ntest().describe( \"-toStr()\", \"String conversions with toStr(arg)\" )\ntest( '{a:\"a\",b:\"b\"}',  type.toStr({ a:\"a\", b:\"b\" }),   '{a:\"a\" b:\"b\"}' ) # .log( test().status() )\ntest( '[1,2,3]',        type.toStr([1,2,3]),            '[1,2,3]'       ) # .log( test().status() )\ntest( '[\"1\",\"2\",\"3\"]',  type.toStr([\"1\",\"2\",\"3\"],true), '[\"1\",\"2\",\"3\"]' ) # .log( test().status() )\ntest().log( test().summary() ) # Log the all the tests  that began with descripe(...)\n\ntest().describe( \"toEnclose()\", \"\"\"Enclose strings with '\"', '()', '[]' '{}'\"\"\" )\ntest( \"\", type.toEnclose( \"abc\",   '\"'  ), '\"abc\"'   )             # returns \"abc\" - good for JSON keys and values\ntest( \"\", type.toEnclose( \"123\",   \"'\"  ), \"'123'\"   )             # returns '123'\ntest( \"\", type.toEnclose( \"xyz\",   \"()\" ), \"(xyz)\"   )             # returns (xyz)\ntest( \"\", type.toEnclose( \"d,e,f\", \"[]\" ), \"[d,e,f]\" )             # returns [d,e,f]\ntest( \"\", type.toEnclose( \"a:x,b:y,c:z\", \"{}\" ), \"{a:x,b:y,c:z}\" ) # returns {a:x,b:y,c:z}\ntest().log( test().summary() )\n\ntest().describe( \"-type\", \"All 13 types\", true )  # all type(arg) tests needs better reporting\ntest( \"'123'\",        type.type('123'),         'string'    )\ntest(  \"123\",         type.type(123),           'int'       )\ntest( \"123.1\",        type.type(123.1),         'float'     )\ntest( \"123.0 should be float\",  type.type(123.0),         'int'       )\ntest( \"true\",         type.type(true),          'boolean'   )\ntest( \"[1,2,3]\",      type.type([1,2,3]),       'array'     )\ntest( \"{a:'a'}\",      type.type({a:'a'}),       'object'    )\ntest( \"/x/\",          type.type(/x/),           'regexp'    )\ntest( \"func\",         type.type( () => ),       'function'  )\ntest( \"null\",         type.type(null),          'null'      )\ntest( \"undef\",        type.type(undef),         'undefined' )\ntest( \"new Date()\",   type.type(new Date()),    'date'      )\ntest( \"BigInt(123)\",  type.type((BigInt(123))), 'bigint'    ) # 123n not working in CoffeeScript\ntest( \"Symbol\",       type.type(Symbol()),      'symbol'    ) # Symbol not not new Symbol()\ntest( \"stream\",       type.type(stream),        'object'    )\ntest( \"Stream\",       type.type(Stream),        'function'  )\ntest( \"tester\",       type.type(tester),        'object'    )\ntest( \"Vis\",          type.type(Vis),           'function'  )\ntest().log( test().summary() )\n\ntest().describe( \"-klass\", \"klass type on classed\", true )\ntest( \"true\",       type.klass(true),        'Boolean'   )\ntest( \"123\",        type.klass(123),         'Int'       )\ntest( \"'123'\",      type.klass('123'),       'String'    )\ntest( \"func\",       type.klass(func),        'func'      )\ntest( \"{a:'a'}\",    type.klass({a:'a'}),     'Object'    )\ntest( \"[1,2,3]\",    type.klass([1,2,3]),     'Array'     )\ntest( \"/x/\",        type.klass(/x/),         'RegExp'    )\ntest( \"new Date()\", type.klass(new Date()),  'Date'      )\ntest( \"undef\",      type.klass(undef),       'Undefined' )\ntest( \"null\",       type.klass(null),        'Null'      )\ntest( \"stream\",     type.klass(stream),  'Stream' )\ntest( \"Stream\",     type.klass(Stream),  'Stream' )\ntest( \"tester\",     type.klass(tester),  'Tester' )\ntest( \"Vis\",        type.klass(Vis),     'Vis'    )\ntest().log( test().summary() )\n\ntest().describe( \"-is...\", \"Test all class Type is... assertions\" )\ntest( \"isType(v,t)\",       type.isType(\"abc\",\"string\"),       true )\ntest( \"isStr('abc')\",      type.isStr('abc'),                 true )\ntest( \"isInt(i)\",          type.isInt(  123 ),                true )\ntest( \"isInt(i)\",          type.isInt( \"123\"),                true )\ntest( \"isFloat(f)\",        type.isFloat(123.2),               true )\ntest( \"isFloat(f)\",        type.isFloat(\"123.2\"),             true )\ntest( \"isBoolean(b)\",      type.isBoolean( true ),            true )\ntest( \"isBoolean(b)\",      type.isBoolean(\"true\"),            true )\ntest( \"isObject({a:'a'})\", type.isObject({a:'a'}),            true )\ntest( \"isArray([1,2,3])\",  type.isArray([1,2,3]),             true )\ntest( \"isArrayTyped(a,t)\", type.isArrayTyped([1,2,3],\"int\") , true )\ntest( \"isArrayMixed(a)\",   type.isArrayMixed([1,\"2\",3]),      true )\ntest( \"isRegex(r)\",        type.isRegexp(/^-?\\d+$/),          true )\ntest( \"isFunction(f)\",     type.isFunction(type.toStr),       true )\ntest( \"isNull(null)\",      type.isNull(null),                 true )\ntest( \"isUndef(xxxx)\",     type.isUndef(undef),               true )\ntest( \"isNot(null)\",       type.isNot(null),                  true )\ntest( \"isNumber(12345)\",   type.isNumber(12345),              true )\ntest( \"isBigInt(b)\",       type.isBigInt(BigInt(123)),        true )\ntest( \"isSymbol(s)\",       type.isSymbol(Symbol()),           true )\ntest( \"isNaN(NaN)\",        type.isNaN(NaN),                   true )\ntest().log( test().summary() )\n\ntest().describe( \"-Negative\", \"Negative false test failure\" )\ntest( \"isNull('abc')\",    type.isNull('abc'),    false )\ntest( \"isUndef(12345)\",   type.isUndef(12345),   false )\ntest( \"isNot({a:'a'}\",    type.isNot({a:'a'}),   false )\ntest( \"isStr( 123 )\",     type.isStr( 123 ),     false )\ntest( \"isNumber('123')\",  type.isNumber('123'),  false )\ntest( \"isNaN( 123 )\",     type.isNaN( 123 ),     false )\ntest( \"isObject(123)\",    type.isObject(123),    false )\ntest( 'isArray({a:\"a\"})', type.isArray({a:\"a\"}), false )\ntest( \"isArray({a:'a'})\", type.isArray({a:'a'}), false )\ntest().log( test().summary() )\n\ntest().describe( \"-to...\", \"Test all class Type to... assertions\" )\ntest( \"toType( arg, type )\", type.toType( \"123\", \"int\" ), 123 )\ntest( \"toStr( arg )\",        type.toStr( 123 ), \"123\"  )\ntest( \"toFloat( arg )\",      type.toFloat( 1 ), 1.0    )\ntest( \"toInt( arg )\",        type.toInt( 1.0 ), 1      )\ntest( \"toArray( arg )\",      type.toArray( \"[1,2,3]\" ), [1,2,3] )\ntest( \"toObject( arg )\", (t) ->\n  a = \"1\"\n  b = \"2\"\n  t.eq( type.toObject( '{a:\"1\",b:\"2\")', {a:\"1\",b:\"2\"} ) )\n  t.eq( type.toObject( '{a:a,b:b)',     {a:a,b:b}     ) ) )\ntest( \"toFixed(arg,dec=2)\",    type.toFixed( 1.0 ), 1.00 )\ntest( 'toEnclose(str,enc=\"\")', type.toEnclose('abc','\"\"'), \"abc\" )\ntest( \"toKeys(o)\",             type.toKeys({x:\"1\",y:\"2\"}), [\"x\",\"y\"] )\ntest( \"toCap( str )\",          type.toCap(\"cap\"), \"Cap\" )\ntest( \"unCap( str )\",          type.unCap(\"Cap\"), \"cap\" )\ntest( \"toSlice(v,beg,end=null,remove=false)\", type.slice( \"123456\", 3, 4 ), \"34\" )\ntest().log( test().summary() )\n\ntest().describe( \"-in...\", \"Test all class Type in... containmentt\" )\ntest( \"inString(e,s)\", type.inStr(    \"b\", \"abc\" ),         true )\ntest( \"inArray( e,a)\", type.inArray(   2,  [1,2,3] ),       true )\ntest( \"inObject(k,o)\", type.inObject( \"b\", {a:\"1\",b:\"2\"} ), true )\ntest().log( test().summary() )\n\ntest().describe( \"-Utilities\", \"Utilitiy methods\" )\ntest( 'head([1,2,3])',               type.head([1,2,3]),  1  )\ntest( 'tail(\"123\")',                 type.tail(\"123\", ), \"3\" )\n#est( 'pad(n,m)',                    type.pad( \"1\", 2 ),                \"  1\" )  # getting crunched\ntest( 'isIn( \"string\", \"types\"   )', type.isIn( \"string\", \"types\"   ),   true )\ntest( 'isIn( \"string\", \"typeofs\" )', type.isIn( \"string\", \"typeofs\" ),   true )\ntest().log( test().summary() )\n\ntest().describe( \"-Warnings\", \"methods @toWarn(...) @isWarn(...) @inWarn(...)\" )\ntest( \"toWarn(method,text,arg,typeTo,retn, (t)=>t.log(@warn()) )\",\n  type.toWarn(\"toStr()\",\"bad arg\", \"undefined\",\"string\",'\"\"', (t)=>t.log(@warn()) ), \"\" )\ntest( \"isWarn(fail,text,string,[array.object],(t)=>t.log(@warn()) )\"\n  type.isWarn(false,\"bad type\",\"string\",[\"array\",\"object\"],(t)=>t.log(@warn()) ), true )\ntest( \"inWarn(pass,result,expect,oper,spec,text,(t)=>t.log(@warn()) )\"\n  type.inWarn(false,\"4\",\"1|2|3\",\"eq\",\"1|2|3\",\"enums\",(t)=>t.log(@warn()) ), true )\ntest().log( test().summary() )\n"
  ]
}
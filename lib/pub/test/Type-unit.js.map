{
  "version": 3,
  "file": "Type-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { type }         from \"./Type.js\"\nimport { test, exam, tester } from \"./Tester.js\"\nimport Stream           from \"../base/util/Stream.js\"\n#mport Vis              from '../base/draw/Vis.js'\n\nsubjects   = [\"TestStatus\",\"TestString\",\"TestSummary\"]\nstreamLog  = { subscribe:false, publish:false, subjects:subjects }\nstream     = new Stream( subjects, streamLog )\nfunc       = () ->\nundef      = undefined\n\ntest().module( \"Class Type assertion and conversion\" ).on()\n\ntest().describe( \"\"\"Enclose strings with '\"', '()', '[]' '{}'\"\"\" ).name(\"toEnclose()\").on()\ntest( \"abc\",         type.toEnclose( \"abc\",   '\"'  ), '\"abc\"'   )             # returns \"abc\"\ntest( \"123\",         type.toEnclose( \"123\",   \"'\"  ), \"'123'\"   )             # returns '123'\ntest( \"xyz\",         type.toEnclose( \"xyz\",   \"()\" ), \"(xyz)\"   )             # returns (xyz)\ntest( \"d,e,f\",       type.toEnclose( \"d,e,f\", \"[]\" ), \"[d,e,f]\" )             # returns [d,e,f]\ntest( \"a:x,b:y,c:z\", type.toEnclose( \"a:x,b:y,c:z\", \"{}\" ), \"{a:x,b:y,c:z}\" ) # returns {a:x,b:y,c:z}\ntest().log( test().summary() )\n\n# \"|string|int|float|boolean|array|object|enums|range|regexp|null|undefined|function|bigint|symbol|date\"\ntest().describe( \" toType()\" ).obj(type).func(type.toType).on()\ntypeExpects = [[\"123\",'string'],[123,'int'],[123.1,'float'],[123.0,'int'],[true,'boolean'],[[1,2,3],'array'],\n  [{a:'a'},'object'],[\"|a|b|c|\",'enums'],[\"|0-100|\",'enums'],[\"|0-100|\",'range'],[/x/,'regexp'],[null,'null'],\n  [undef,'undefined' ],[func,\"function\"],[BigInt(123),'bigint'],[Symbol(),'symbol'],[new Date(),'date']]\n  # [stream,'object'], [Stream,'function'],[tester,'object'],[Vis,'function']]\nfor args in typeExpects\n  exam(args)\ntest().log( test().summary() )\n\ntest().describe( \" toKlass()\" ).obj(type).func(type.toKlass).on()\nklassExpects = [[true,'Boolean'],[123,'Int'],['\"123\"','String'],[func,'func'],[{a:'a'},'Object'],[[1,2,3],'Array'],\n  [{a:'a'},'Object'],[\"|a|b|c|\",'Enums'],[\"|0-100|\",'Range'],[/x/,'RegExp'],[null,'Null'],\n  [undef,'Undefined' ],[null,\"Null\"]]\n  # [stream,'Stream'], [Stream,'Stream'],[tester,'Tester'],[Vis,'Vis']]\nfor args in klassExpects\n  exam(args)\ntest().log( test().summary() )\n\ntest().describe( \"class Type is... assertions\" ).on()\ntest( 'isType(\"abc\",\"string\")\"',               type.isType(\"abc\",\"string\"),       true )\ntest( \"isStr('abc')\",                type.isStr('abc'),                 true )\ntest( \"isInt(123)\",                  type.isInt(  123 ),                true )\ntest( 'isInt(\"123\")',                type.isInt( \"123\"),                true )\ntest( \"isFloat(123.2)\",              type.isFloat(123.2),               true )\ntest( 'isFloat(\"123.2\")',            type.isFloat(\"123.2\"),             true )\ntest( \"isBoolean(true)\",             type.isBoolean( true ),            true )\ntest( 'isBoolean(\"true\")',           type.isBoolean(\"true\"),            true )\ntest( \"isObject({a:'a'})\",           type.isObject({a:'a'}),            true )\ntest( \"isArray([1,2,3])\",            type.isArray([1,2,3]),             true )\ntest( 'isArrayTyped([1,2,3],\"int\")', type.isArrayTyped([1,2,3],\"int\") , true )\ntest( 'isArrayMixed([1,\"2\",3])',     type.isArrayMixed([1,\"2\",3]),      true )\ntest( 'isEnums(\"|a|b|c|\")',          type.isEnums(\"|a|b|c|\"),           true )\ntest( \"isRegex(/^-?\\\\d+$/)\",         type.isRegexp(/^-?\\d+$/),          true )\ntest( \"isFunction(type.toStr)\",      type.isFunction(type.toStr),       true )\ntest( \"isNull(null)\",                type.isNull(null),                 true )\ntest( \"isUndef(undef\",               type.isUndef(undef),               true )\ntest( \"isNot(null)\",                 type.isNot(null),                  true )\ntest( \"isNumber(12345)\",             type.isNumber(12345),              true )\ntest( \"isBigInt((BigInt(123))\",      type.isBigInt(BigInt(123)),        true )\ntest( \"isSymbol(Symbol())\",          type.isSymbol(Symbol()),           true )\ntest( \"isNaN(NaN)\",                  type.isNaN(NaN),                   true )\ntest( 'isType(\"|0-100|\",\"range\")',   type.isType(\"|0-100|\",\"range\"), true )\ntest().log( test().summary() )\n\ntest().describe( \"Negative type assertsions\" ).on()\ntest( \"isNull('abc')\",    type.isNull('abc'),    false )\ntest( \"isUndef(12345)\",   type.isUndef(12345),   false )\ntest( \"isNot({a:'a'}\",    type.isNot({a:'a'}),   false )\ntest( \"isStr( 123 )\",     type.isStr( 123 ),     false )\ntest( \"isNumber('123')\",  type.isNumber('123'),  false )\ntest( \"isNaN( 123 )\",     type.isNaN( 123 ),     false )\ntest( \"isObject(123)\",    type.isObject(123),    false )\ntest( 'isArray({a:\"a\"})', type.isArray({a:\"a\"}), false )\ntest( \"isArray({a:'a'})\", type.isArray({a:'a'}), false )\ntest().log( test().summary() )\n\ntest().describe( \"Class Type in... containments\" ).on()\ntest( 'inStr(\"b\",\"abc\")',              type.inStr(   \"b\", \"abc\" ),         true )\ntest( 'inArray(2,[1,2,3])',            type.inArray(  2,  [1,2,3] ),       true )\ntest( 'inObject(\"b\",{a:\"1\",b:\"2\"} )', type.inObject( \"b\", {a:\"1\",b:\"2\"} ), true )\ntest().log( test().summary() )\n\ntest().describe( \"Utilities\" ).on()\ntest( 'head([1,2,3])',               type.head([1,2,3]),  1  )\ntest( 'tail(\"123\")',                 type.tail(\"123\", ), \"3\" )\n#est( 'pad(\"1\",2)',                  type.pad( \"1\", 2 ),                \"  1\" )  # getting crunched\ntest( 'isIn( \"string\", \"types\"   )', type.isIn( \"string\", \"types\"   ),   true )\ntest( 'isIn( \"string\", \"typeofs\" )', type.isIn( \"string\", \"typeofs\" ),   true )\ntest().log( test().summary() )\n\ntest().describe( \"Warnings\", \"methods @toWarn(...) @isWarn(...) @inWarn(...)\" ).on()\ntest( \"toWarn(method,text,arg,typeTo,retn, (t)=>t.log(@warn()) )\",\n  type.toWarn(\"toStr()\",\"bad arg\", \"undefined\",\"string\",'\"\"', (t)=>t.log(@warn()) ), '\"\"' )\ntest( \"isWarn(fail,text,string,[array.object],(t)=>t.log(@warn()) )\"\n  type.isWarn(false,\"bad type\",\"string\",[\"array\",\"object\"],(t)=>t.log(@warn()) ), false )\ntest( \"inWarn(pass,result,expect,oper,spec,text,(t)=>t.log(@warn()) )\"\n  type.inWarn(false,\"4\",\"1|2|3\",\"eq\",\"1|2|3\",\"enums\",(t)=>t.log(@warn()) ), false )\ntest().log( test().summary() )\n\ntest().describe( \"Class Type to... conversions\" ).op(\"to\").on()\ntest( 'toConvert(123,\"string\")',             type.toConvert(  123,            \"string\"  ), \"123\"         )\ntest( 'toConvert(\"123\",\"int\")',              type.toConvert( \"123\",           \"int\"     ),  123          )\ntest( 'toConvert(\"123.1\",\"float\")',          type.toConvert( \"123.1\",         \"float\"   ),  123.1        )\ntest( 'toConvert(\"true\",\"boolean\")',         type.toConvert( \"true\",          \"boolean\" ), true          )\ntest( 'toConvert(\"[1,2,3]\",\"array\")',        type.toConvert( \"[1,2,3]\",       \"array\"   ), [1,2,3]       )\ntest( 'toConvert(\"{a:\"1\",b:\"2\"}\",\"object\")', type.toConvert( '{a:\"1\",b:\"2\"}', \"object\"  ), {a:\"1\",b:\"2\"} )\ntest( 'toConvert(\"/x/\",\"string\")',           type.toConvert( \"/x/\",           \"string\"  ), \"none\"        )\ntest( 'toValue(abc)',             type.toValue( \"abc\"           ), \"abc\"         )\ntest( 'toValue(\"123\")',           type.toValue( \"123\"           ),  123          )\ntest( 'toValue(\"123.1\")',         type.toValue( \"123.1\"         ),  123.1        )\ntest( 'toValue(\"true\")',          type.toValue( \"true\"          ), true          )\ntest( 'toValue(\"[1,2,3]\")',       type.toValue( \"[1,2,3]\"       ), [1,2,3]       )\ntest( 'toValue(\"{a:\"1\",b:\"2\"}\")', type.toValue( '{a:\"1\",b:\"2\"}' ), {a:\"1\",b:\"2\"} )\ntest( 'toValue(\"/x/\")',           type.toValue( \"/x/\"           ), /x/           )\ntest( \"toFloat(1)\",          type.toFloat( 1 ),           1.0    )\ntest( \"toInt(1.0)\",          type.toInt( 1.0 ),           1      )\ntest( \"toFixed(1.0,2)\",      type.toFixed( 1.0, 2 ),     \"1.00\" )\ntest( \"toKeys(o)\",           type.toKeys({x:\"1\",y:\"2\"}), [\"x\",\"y\"] )\ntest( \"toCap( str )\",        type.toCap(\"cap\"), \"Cap\" )\ntest( \"unCap( str )\",        type.unCap(\"Cap\"), \"cap\" )\ntest( '\"123456\",3,4)',       type.slice( \"123456\",3,4), \"34\" )\ntest( 'toArray(\"[1,2,3]\")',  type.toArray(\"[1,2,3]\"), [1,2,3] )\ntest().log( test().summary() )\n\ntest().describe( \"String conversions\" ).name(\"toStr()\" ).op(\"to\").on()\ntest( \"abc\",            type.toStr(\"abc\"),              \"abc\"           )\ntest( 123,              type.toStr(123),                \"123\"           )\ntest( 1.1,              type.toStr(1.1),                \"1.1\"           )\ntest( true,             type.toStr(true),               \"true\"          )\ntest( '{a:\"a\",b:\"b\"}',  type.toStr({a:\"a\",b:\"b\"}),     '{a:\"a\" b:\"b\"}' )\ntest( \"[1,2,3]\",        type.toStr([1,2,3]),            '[1,2,3]'       )\ntest( '[\"1\",\"2\",\"3\"]',  type.toStr([\"1\",\"2\",\"3\"]),      '[\"1\",\"2\",\"3\"]' )\ntest( \"null\",           type.toStr(null),               \"null\"          )\ntest( \"undefined\",      type.toStr(undef),              \"undefined\"     )\ntest( func,             type.toStr(func),               \"function\"      )\ntest( \"/x/\",            type.toStr(/x/),                 \"/x/\"          )\ntest( BigInt(123),      type.toStr(BigInt(123)),         \"123\"          )\ntest( 'Symbol(\"desc\")', type.toStr(Symbol(\"desc\")),     'Symbol(desc)'  )\ntest(         'new Date(\"August 19, 1975 23:15:30\")',\n  type.toStr( `new Date(\"August 19, 1975 23:15:30\")` ),\n  \"Tue Aug 19 1975 23:15:30 GMT+0200 (CEST)\"  )\ntest().log( test().summary() )\n\ntest().describe( \"toObject(arg) conversions\" ).name(\"toObject()\").op(\"to\").on()\nt = tester\na = \"a\"\nb = \"b\"\ntest( \"{a:a,b:b}\", type.toObject( \"{a:#{t.v(a)},b:#{t.v(b)})\" ), {a:'\"a\"',b:'\"b\"'} )\na = 3\nb = 4\ntest( \"{a:3,b:4}\", type.toObject( \"{a:#{t.v(a)},b:#{t.v(b)})\" ), {a:3,b:4} )\na = [5,6]\no = {q:7,r:\"8\"}\ntest( \"{a:#{t.v(a)},b:#{t.v(b)})\", type.toObject( \"{a:#{t.v(a)},b:#{t.v(b)})\" ), {a:[5,6],b:{q:7,r:'\"8\"'}  } )\ntest( \"{a:#{t.v(a)},b:#{t.v(o)})\", type.toObject( \"{a:#{t.v(a)},b:#{t.v(o)})\" ), {a:[5,6],b:{q:7,r:'\"8\"'}  } )\ntest( '{a:\"x\",b:\"y\")', type.toObject( '{a:\"x\",b:\"y\")' ),  {a:'\"x\"',b:'\"y\"'} )\ntest( \"{a:1,b:2}\", type.toObject( '{a:1,b:2 }' ), {a:1,b:2} )\ntest().log( test().summary() )\n\n\n"
  ]
}
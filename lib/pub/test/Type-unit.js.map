{
  "version": 3,
  "file": "Type-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { type } from \"./Type.js\"\nimport { test } from \"./Tester.js\"\n\nfunc  = () ->\nundef = undefined\n\n# Prefix 'Type.' to the text output like \"Type.type(true)\"\n\ntest().describe( \"type\", \"All 13 types\", false )\n\ntest( \"type('123')\",        type.type('123'),         'string'    )\ntest( \"type(123)\",          type.type(123),           'int'       )\ntest( \"type(123.0)\",        type.type(123.0),         'float'     )\ntest( \"type(true)\",         type.type(true),          'boolean'   )\ntest( \"type([1,2,3]\",       type.type([1,2,3]),       'array'     )\ntest( \"type({a:'a'})\",      type.type({a:'a'}),       'object'    )\ntest( \"type(/x/)\",          type.type(/x/),           'regexp'    )\ntest( \"type(func)\",         type.type( () => ),       'function'  )\ntest( \"type(null)\",         type.type(null),          'null'      )\ntest( \"type(undef)\",        type.type(undef),         'undefined' )\ntest( \"type(new Date())\",   type.type(new Date()),    'date'      )\ntest( \"type(BigInt(123)))\", type.type((BigInt(123))), 'bigint'    ) # 123n not working in CoffeeScript\ntest( \"type(123n)\",         type.type(Symbol),        'symbol'    ) # Symbol not Symbol\n\ntest().summary().log( test().block() ) # Log the current block of tests\n\ntest().describe( \"Type\", \"toStr\", \"String conversions with toStr(arg)\" )\n\n# String conversions\ntest( 'toStr({ a:\"a\", b:\"b\" })',  type.toStr({ a:\"a\", b:\"b\" }),  '{a:\"a\" b:\"b\"}'  )\ntest( 'toStr([ 1, 2, 3 ])',       type.toStr([ 1, 2, 3 ]),       '[1,2,3]'       )\ntest( 'toStr([ \"1\", \"2\", \"3\" ])', type.toStr([ \"1\", \"2\", \"3\" ]), '[\"1\",\"2\",\"3\"]'  )\n\ntest().summary().log( test().block() )\n\ntest().describe( \"klass\", \"types\", false )\n\ntest( \"klass(true)\",       type.klass(true),        'Boolean'   )\ntest( \"klass(123)\",        type.klass(123),         'Number'    )\ntest( \"klass('123')\",      type.klass('123'),       'String'    )\ntest( \"klass(func)\",       type.klass(func),        'func'      )\ntest( \"klass({a:'a'})\",    type.klass({a:'a'}),     'Object'    )\ntest( \"klass([1,2,3]\",     type.klass([1,2,3]),     'Array'     )\ntest( \"klass(/x/)\",        type.klass(/x/),         'RegExp'    )\ntest( \"klass(new Date())\", type.klass(new Date()),  'Date'      )\ntest( \"klass(undef)\",      type.klass(undef),       'Undefined' )\ntest( \"klass(null)\",       type.klass(null),        'Null'      )\n\ntest().log( test().block() )\n\ntest().describe( \"Type\", \"Positive true tests\" )\n\ntest( \"isNull(null)\",      type.isNull(null),     true  )\ntest( \"isUndef(xxxx)\",     type.isUndef(undef),   true  )\ntest( \"isNot(null)\",       type.isNot(null),      true  )\ntest( \"isStr('abc')\",      type.isStr('abc'),     true  )\ntest( \"isNum(12345)\",      type.isNumber(12345),  true  )\ntest( \"isNaN(NaN)\",        type.isNaN(NaN),       true  )\ntest( \"isObject({a:'a'})\", type.isObject({a:'a'}),   true  )\ntest( \"isArray([1,2,3])\",  type.isArray([1,2,3]), true  )\nconsole.log( test().block() ) # Log the current block of tests\n\ntest().describe( \"Type\", \"Negative false test failuer\" )\n\ntest( \"isNull('abc')\",    type.isNull('abc'),    false )\ntest( \"isUndef(12345)\",   type.isUndef(12345),   false )\ntest( \"isNot({a:'a'}\",    type.isNot({a:'a'}),   false )\ntest( \"isStr( 123 )\",     type.isStr( 123 ),     false )\ntest( \"isNumber('123')\",  type.isNumber('123'),  false )\ntest( \"isNaN( 123 )\",     type.isNaN( 123 ),     false )\ntest( \"isObject(123)\",    type.isObject(123),    false )\ntest( \"isArray({a:'a'})\", type.isArray({a:'a'}), true  )\n\ntest().log( test().block() )\n\n###  \n  -- Type determination --\n  type:(arg,lowerCase=true)\n  klass:(arg)\n\n  -- is Assertions ---\n  isType:(v,t)\n  isString:(s)\n  isInt:(i,sc=false)\n  isFloat:(f,sc=false)\n  isBoolean:(b,sc=false)\n  isArray:( a, type=null, sc=false )\n  isObject:(o,sc=false)\n  isRegex:(r)\n  isFunction:(f)\n  isNull:(m)\n  isUndef:(u)\n  isBigInt:(b)\n  isSymbol:(s)\n\n  isDef:(d)\n  isNumber:(n)\n  isNot:(d)\n  isNaN:(n)\n  isArrayTyped:(a,t)\n  isArrayMixed:(a)\n  isChild: (key)\n  isEmpty:(e)\n  isStringFloat:( str )\n  isStringInt:( str )\n  isStringBoolean:( str )\n  isStringArray:( str )\n  isStringObject:( str )\n  isStringEnclosed:( beg, str, end )\n\n  -- to Conversions --\n  toType:( arg, type )\n  toString:( arg, enc=\"\" )\n  toFloat:( arg )\n  toInt:( arg )\n\n  toArray:( arg, type, sep=\",\" )\n  toObject:( arg )\n  toFixed:( arg, dec=2 )\n  toEnclose:( str, enc=\"\" )\n  toKeys:(o)\n  toSlice:( v, beg, end=null, remove=false )\n  toCap:( str )\n  unCap:( str )\n\n  == in Containment --\n  inString:(e,s)\n  inArray:( e,a)\n  inObject:(k,o)\n\n  -- Info messaging --\n  isInfo:( pass, text, type, types )\n  toInfo:( method, arg, type, typeTo, retnStr, retn )\n  inInfo:( pass, result, expect, oper, spec, text ) ->\n\n  -- Utilities --\n  head:(v,action=false,pop=false)\n  tail:(v,action=false)\n\n  pad:( n, m )\n  noop:( ...args )\n  time:()\n  types\n  typeofs\n###\n\n###\n{\n  \"stream\": {\n    \"subjectNames\": [\n      \"TestStatus\",\n      \"TestString\",\n      \"TestSummary\"\n    ],\n    \"info\": {\n      \"subscribe\": false,\n      \"publish\": false,\n      \"subjects\": [\n        \"TestStatus\",\n        \"TestString\",\n        \"TestSummary\"\n      ]\n    },\n    \"subjects\": {\n      \"TestStatus\": {\n        \"subscribers\": {}\n      },\n      \"TestString\": {\n        \"subscribers\": {}\n      },\n      \"TestSummary\": {\n        \"subscribers\": {}\n      }\n    }\n  },\n  \"testing\": true,\n  \"archive\": true,\n  \"verbose\": false,\n  \"debug\": false,\n  \"schemaKey\": \"schema\",\n  \"statusSubject\": \"TestStatus\",\n  \"stringSubject\": \"TestString\",\n  \"summarySubject\": \"TestSummary\",\n  \"description\": null,\n  \"suite\": \"unit tests\",\n  \"text\": \"five() = 5\",\n  \"code\": \"\",\n  \"statusText\": \"\",\n  \"statusClear\": true,\n  \"blockText\": \"\",\n  \"blockClear\": true,\n  \"module\": \"Tester\",\n  \"modules\": {\n    \"Tester\": {\n      \"name\": \"Tester\",\n      \"path\": \"/lib/pub/test/Tester-unit.js\"\n    }\n  },\n  \"passed\": [],\n  \"failed\": [],\n  \"logging\": true\n}\n  \n###"
  ]
}
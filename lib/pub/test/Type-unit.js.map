{
  "version": 3,
  "file": "Type-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { type }         from \"./Type.js\"\nimport { test, tester } from \"./Tester.js\"\nimport Stream           from \"../base/util/Stream.js\"\nimport Vis              from '../base/draw/Vis.js'\n\nsubjects   = [\"TestStatus\",\"TestString\",\"TestSummary\"]\nstreamLog  = { subscribe:false, publish:false, subjects:subjects }\nstream     = new Stream( subjects, streamLog )\nfunc       = () ->\nundef      = undefined\n\ntest().module( \"Class Type assertion and conversion\" ).onModule()\n\ntest().describe( \"\"\"Enclose strings with '\"', '()', '[]' '{}'\"\"\", \"toEnclose()\" ).on()\ntest( \"\", type.toEnclose( \"abc\",   '\"'  ), '\"abc\"'   )             # returns \"abc\" - good for JSON keys and values\ntest( \"\", type.toEnclose( \"123\",   \"'\"  ), \"'123'\"   )             # returns '123'\ntest( \"\", type.toEnclose( \"xyz\",   \"()\" ), \"(xyz)\"   )             # returns (xyz)\ntest( \"\", type.toEnclose( \"d,e,f\", \"[]\" ), \"[d,e,f]\" )             # returns [d,e,f]\ntest( \"\", type.toEnclose( \"a:x,b:y,c:z\", \"{}\" ), \"{a:x,b:y,c:z}\" ) # returns {a:x,b:y,c:z}\ntest().log( test().summary() )\n\ntest().describe( \"All 13 types\", \"type()\" ).on()  # all type(arg) tests needs better reporting\ntest( \"'123'\",        type.type('123'),         'string'    )\ntest(  \"123\",         type.type(123),           'int'       )\ntest( \"123.1\",        type.type(123.1),         'float'     )\ntest( \"123.0 float?\", type.type(123.0),         'int'       )\ntest( \"true\",         type.type(true),          'boolean'   )\ntest( \"[1,2,3]\",      type.type([1,2,3]),       'array'     )\ntest( \"{a:'a'}\",      type.type({a:'a'}),       'object'    )\ntest( \"/x/\",          type.type(/x/),           'regexp'    )\ntest( \"func\",         type.type( () => ),       'function'  )\ntest( \"null\",         type.type(null),          'null'      )\ntest( \"undef\",        type.type(undef),         'undefined' )\ntest( \"new Date()\",   type.type(new Date()),    'date'      )\ntest( \"BigInt(123)\",  type.type((BigInt(123))), 'bigint'    ) # 123n not working in CoffeeScript\ntest( \"Symbol\",       type.type(Symbol()),      'symbol'    ) # Symbol not not new Symbol()\ntest( \"stream\",       type.type(stream),        'object'    )\ntest( \"Stream\",       type.type(Stream),        'function'  )\ntest( \"tester\",       type.type(tester),        'object'    )\ntest( \"Vis\",          type.type(Vis),           'function'  )\ntest().log( test().summary() )\n\ntest().describe( \"klass types\", \"klass()\" ).on()\ntest( \"true\",       type.klass(true),        'Boolean'   )\ntest( \"123\",        type.klass(123),         'Int'       )\ntest( \"'123'\",      type.klass('123'),       'String'    )\ntest( \"func\",       type.klass(func),        'func'      )\ntest( \"{a:'a'}\",    type.klass({a:'a'}),     'Object'    )\ntest( \"[1,2,3]\",    type.klass([1,2,3]),     'Array'     )\ntest( \"/x/\",        type.klass(/x/),         'RegExp'    )\ntest( \"new Date()\", type.klass(new Date()),  'Date'      )\ntest( \"undef\",      type.klass(undef),       'Undefined' )\ntest( \"null\",       type.klass(null),        'Null'      )\ntest( \"stream\",     type.klass(stream),  'Stream' )\ntest( \"Stream\",     type.klass(Stream),  'Stream' )\ntest( \"tester\",     type.klass(tester),  'Tester' )\ntest( \"Vis\",        type.klass(Vis),     'Vis'    )\ntest().log( test().summary() )\n\ntest().describe( \"All class Type is... assertions\" ).on()\ntest( \"isType(v,t)\",       type.isType(\"abc\",\"string\"),       true )\ntest( \"isStr('abc')\",      type.isStr('abc'),                 true )\ntest( \"isInt(i)\",          type.isInt(  123 ),                true )\ntest( \"isInt(i)\",          type.isInt( \"123\"),                true )\ntest( \"isFloat(f)\",        type.isFloat(123.2),               true )\ntest( \"isFloat(f)\",        type.isFloat(\"123.2\"),             true )\ntest( \"isBoolean(b)\",      type.isBoolean( true ),            true )\ntest( \"isBoolean(b)\",      type.isBoolean(\"true\"),            true )\ntest( \"isObject({a:'a'})\", type.isObject({a:'a'}),            true )\ntest( \"isArray([1,2,3])\",  type.isArray([1,2,3]),             true )\ntest( \"isArrayTyped(a,t)\", type.isArrayTyped([1,2,3],\"int\") , true )\ntest( \"isArrayMixed(a)\",   type.isArrayMixed([1,\"2\",3]),      true )\ntest( \"isRegex(r)\",        type.isRegexp(/^-?\\d+$/),          true )\ntest( \"isFunction(f)\",     type.isFunction(type.toStr),       true )\ntest( \"isNull(null)\",      type.isNull(null),                 true )\ntest( \"isUndef(xxxx)\",     type.isUndef(undef),               true )\ntest( \"isNot(null)\",       type.isNot(null),                  true )\ntest( \"isNumber(12345)\",   type.isNumber(12345),              true )\ntest( \"isBigInt(b)\",       type.isBigInt(BigInt(123)),        true )\ntest( \"isSymbol(s)\",       type.isSymbol(Symbol()),           true )\ntest( \"isNaN(NaN)\",        type.isNaN(NaN),                   true )\ntest().log( test().summary() )\n\ntest().describe( \"Negative type assertsions\" ).on()\ntest( \"isNull('abc')\",    type.isNull('abc'),    false )\ntest( \"isUndef(12345)\",   type.isUndef(12345),   false )\ntest( \"isNot({a:'a'}\",    type.isNot({a:'a'}),   false )\ntest( \"isStr( 123 )\",     type.isStr( 123 ),     false )\ntest( \"isNumber('123')\",  type.isNumber('123'),  false )\ntest( \"isNaN( 123 )\",     type.isNaN( 123 ),     false )\ntest( \"isObject(123)\",    type.isObject(123),    false )\ntest( 'isArray({a:\"a\"})', type.isArray({a:\"a\"}), false )\ntest( \"isArray({a:'a'})\", type.isArray({a:'a'}), false )\ntest().log( test().summary() )\n\ntest().describe( \"Class Type in... containments\" ).on()\ntest( \"inString(e,s)\", type.inStr(    \"b\", \"abc\" ),         true )\ntest( \"inArray( e,a)\", type.inArray(   2,  [1,2,3] ),       true )\ntest( \"inObject(k,o)\", type.inObject( \"b\", {a:\"1\",b:\"2\"} ), true )\ntest().log( test().summary() )\n\ntest().describe( \"Utilities\" ).on()\ntest( 'head([1,2,3])',               type.head([1,2,3]),  1  )\ntest( 'tail(\"123\")',                 type.tail(\"123\", ), \"3\" )\n#est( 'pad(n,m)',                    type.pad( \"1\", 2 ),                \"  1\" )  # getting crunched\ntest( 'isIn( \"string\", \"types\"   )', type.isIn( \"string\", \"types\"   ),   true )\ntest( 'isIn( \"string\", \"typeofs\" )', type.isIn( \"string\", \"typeofs\" ),   true )\ntest().log( test().summary() )\n\ntest().describe( \"Warnings\", \"methods @toWarn(...) @isWarn(...) @inWarn(...)\" ).on()\ntest( \"toWarn(method,text,arg,typeTo,retn, (t)=>t.log(@warn()) )\",\n  type.toWarn(\"toStr()\",\"bad arg\", \"undefined\",\"string\",'\"\"', (t)=>t.log(@warn()) ), '\"\"' )\ntest( \"isWarn(fail,text,string,[array.object],(t)=>t.log(@warn()) )\"\n  type.isWarn(false,\"bad type\",\"string\",[\"array\",\"object\"],(t)=>t.log(@warn()) ), false )\ntest( \"inWarn(pass,result,expect,oper,spec,text,(t)=>t.log(@warn()) )\"\n  type.inWarn(false,\"4\",\"1|2|3\",\"eq\",\"1|2|3\",\"enums\",(t)=>t.log(@warn()) ), false )\ntest().log( test().summary() )\n\ntest().describe( \"Class Type to... conversions\" ).op(\"to\").on()\ntest( 'toType(123,\"int\")',   type.toType( \"123\", \"int\" ), 123 )\ntest( \"toFloat(1)\",          type.toFloat( 1 ),           1.0    )\ntest( \"toInt(1.0)\",          type.toInt( 1.0 ),           1      )\ntest( \"toFixed(1.0,2)\",      type.toFixed( 1.0, 2 ),     \"1.00\" )\ntest( \"toKeys(o)\",           type.toKeys({x:\"1\",y:\"2\"}), [\"x\",\"y\"] )\ntest( \"toCap( str )\",        type.toCap(\"cap\"), \"Cap\" )\ntest( \"unCap( str )\",        type.unCap(\"Cap\"), \"cap\" )\ntest( '\"123456\",3,4)',       type.slice( \"123456\",3,4), \"34\" )\ntest( 'toArray(\"[1,2,3]\")',  type.toArray(\"[1,2,3]\"), [1,2,3] )\ntest( \"toObject( arg )\", (t) ->\n  a = \"1\"\n  b = \"2\"\n  t.eq( type.toObject( '{a:\"1\",b:\"2\")', {a:\"1\",b:\"2\"} ) )\n  t.eq( type.toObject( '{a:a,b:b)',     {a:a,b:b}     ) ) )\ntest().log( test().summary() )\n\ntest().describe( \"String conversions\", \"toStr()\" ).op(\"to\").on()\ntest( \"abc 'string'\",                    type.toStr(\"abc\"),              \"abc\"           )\ntest( \"123 'int'\",                       type.toStr(123),                \"123\"           )\ntest( \"1.1 'float'\",                     type.toStr(1.1),                \"1.1\"           )\ntest( \"true 'boolean'\",                  type.toStr(true),               \"true\"          )\ntest( '{a:\"a\",b:\"b\"} \\'object\\'',        type.toStr({a:\"a\",b:\"b\"}),     '{a:\"a\" b:\"b\"}' )\ntest( \"[1,2,3] 'array[int]'\",            type.toStr([1,2,3]),            '[1,2,3]'       )\ntest( '[\"1\",\"2\",\"3\"] \\'array[string]\\'', type.toStr([\"1\",\"2\",\"3\"]),      '[\"1\",\"2\",\"3\"]' )\ntest( \"null\",                            type.toStr(null),               \"null\"          )\ntest( \"undefined\",                       type.toStr(undef),              \"undefined\"     )\ntest( \"function\",                        type.toStr(func),               \"function\"      )\ntest( \"/x/ 'regexp'\",                    type.toStr(/x/),                 \"/x/\"            )\ntest( \"BigInt(123) no 'n'\",              type.toStr(BigInt(123)),         \"123\"         )\ntest( 'Symbol(\"desc\")',                  type.toStr(Symbol(\"desc\")),     'Symbol(desc)'  )\ntest(         'new Date(\"August 19, 1975 23:15:30\")',\n  type.toStr( `new Date(\"August 19, 1975 23:15:30\")` ),\n  \"Tue Aug 19 1975 23:15:30 GMT+0200 (CEST)\"  )\ntest().log( test().summary() ) # Log the all the tests  that began with descripe(...)\n"
  ]
}
{
  "version": 3,
  "file": "Type-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type-unit.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA,IAAA,EAAA;;AAAA,OAAA;EAAS,IAAT;CAAA,MAAA;;AACA,OAAA;EAAS,IAAT;CAAA,MAAA;;AAEA,IAAA,GAAQ,QAAA,CAAA,CAAA,EAAA;;AACR,KAAA,GAAQ;;AAER,IAAA,CAAA,CAAM,CAAC,MAAP,CAAe,MAAf,EAAuB,gDAAvB;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,OAAjB,EAA0B,oCAA1B;;AACA,IAAA,CAAM,kBAAN,EAA2B,IAAI,CAAC,KAAL,CAAW;EAAE,CAAA,EAAE,GAAJ;EAAS,CAAA,EAAE;AAAX,CAAX,CAA3B,EAA0D,eAA1D,CAA2E,CAAC,GAA5E,CAAiF,IAAA,CAAA,CAAM,CAAC,MAAP,CAAA,CAAjF;;AACA,IAAA,CAAM,aAAN,EAA2B,IAAI,CAAC,KAAL,CAAW,CAAG,CAAH,EAAQ,CAAR,EAAa,CAAb,CAAX,CAA3B,EAA2D,SAA3D,CAA2E,CAAC,GAA5E,CAAiF,IAAA,CAAA,CAAM,CAAC,MAAP,CAAA,CAAjF;;AACA,IAAA,CAAM,mBAAN,EAA2B,IAAI,CAAC,KAAL,CAAW,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAX,CAA3B,EAA0D,eAA1D,CAA2E,CAAC,GAA5E,CAAiF,IAAA,CAAA,CAAM,CAAC,MAAP,CAAA,CAAjF;;AACA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ,EAZA;;AAcA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,WAAjB,EAA8B,CAAA,yCAAA,CAA9B;;AACA,IAAA,CAAM,IAAI,CAAC,SAAL,CAAgB,KAAhB,EAAyB,GAAzB,CAAN,EAAuC,OAAvC,EAfA;;AAgBA,IAAA,CAAM,IAAI,CAAC,SAAL,CAAgB,KAAhB,EAAyB,GAAzB,CAAN,EAAuC,OAAvC,EAhBA;;AAiBA,IAAA,CAAM,IAAI,CAAC,SAAL,CAAgB,KAAhB,EAAyB,IAAzB,CAAN,EAAuC,OAAvC,EAjBA;;AAkBA,IAAA,CAAM,IAAI,CAAC,SAAL,CAAgB,OAAhB,EAAyB,IAAzB,CAAN,EAAuC,SAAvC,EAlBA;;AAmBA,IAAA,CAAM,IAAI,CAAC,SAAL,CAAgB,aAAhB,EAA+B,IAA/B,CAAN,EAA6C,eAA7C,EAnBA;;AAoBA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,MAAjB,EAAyB,cAAzB,EAAyC,KAAzC,EAtBA;;AAuBA,IAAA,CAAM,OAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,KAAV,CAAtB,EAAgD,QAAhD;;AACA,IAAA,CAAO,KAAP,EAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAtB,EAAgD,KAAhD;;AACA,IAAA,CAAM,OAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,KAAV,CAAtB,EAAgD,OAAhD;;AACA,IAAA,CAAM,MAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,IAAV,CAAtB,EAAgD,SAAhD;;AACA,IAAA,CAAM,SAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV,CAAtB,EAAgD,OAAhD;;AACA,IAAA,CAAM,SAAN,EAAsB,IAAI,CAAC,IAAL,CAAU;EAAC,CAAA,EAAE;AAAH,CAAV,CAAtB,EAAgD,QAAhD;;AACA,IAAA,CAAM,KAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAtB,EAAgD,QAAhD;;AACA,IAAA,CAAM,MAAN,EAAsB,IAAI,CAAC,IAAL,CAAW,CAAA,CAAA,GAAA,EAAA,CAAX,CAAtB,EAAgD,UAAhD;;AACA,IAAA,CAAM,MAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,IAAV,CAAtB,EAAgD,MAAhD;;AACA,IAAA,CAAM,OAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,KAAV,CAAtB,EAAgD,WAAhD;;AACA,IAAA,CAAM,YAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,IAAI,IAAJ,CAAA,CAAV,CAAtB,EAAgD,MAAhD;;AACA,IAAA,CAAM,aAAN,EAAsB,IAAI,CAAC,IAAL,CAAW,MAAA,CAAO,GAAP,CAAX,CAAtB,EAAgD,QAAhD,EAlCA;;AAmCA,IAAA,CAAM,QAAN,EAAsB,IAAI,CAAC,IAAL,CAAU,MAAV,CAAtB,EAAgD,QAAhD,EAnCA;;AAoCA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ,EApCA;;AAsCA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,OAAjB,EAA0B,OAA1B,EAAmC,KAAnC;;AACA,IAAA,CAAM,MAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,IAAX,CAApB,EAA6C,SAA7C;;AACA,IAAA,CAAM,KAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,GAAX,CAApB,EAA6C,QAA7C;;AACA,IAAA,CAAM,OAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,KAAX,CAApB,EAA6C,QAA7C;;AACA,IAAA,CAAM,MAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,IAAX,CAApB,EAA6C,MAA7C;;AACA,IAAA,CAAM,SAAN,EAAoB,IAAI,CAAC,KAAL,CAAW;EAAC,CAAA,EAAE;AAAH,CAAX,CAApB,EAA6C,QAA7C;;AACA,IAAA,CAAM,SAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAX,CAApB,EAA6C,OAA7C;;AACA,IAAA,CAAM,KAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,GAAX,CAApB,EAA6C,QAA7C;;AACA,IAAA,CAAM,YAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,IAAI,IAAJ,CAAA,CAAX,CAApB,EAA6C,MAA7C;;AACA,IAAA,CAAM,OAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,KAAX,CAApB,EAA6C,WAA7C;;AACA,IAAA,CAAM,MAAN,EAAoB,IAAI,CAAC,KAAL,CAAW,IAAX,CAApB,EAA6C,MAA7C;;AACA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,EAAjB,EAAqB,qBAArB,EAA4C,KAA5C;;AACA,IAAA,CAAM,cAAN,EAA2B,IAAI,CAAC,MAAL,CAAY,IAAZ,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAM,eAAN,EAA2B,IAAI,CAAC,OAAL,CAAa,KAAb,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAM,aAAN,EAA2B,IAAI,CAAC,KAAL,CAAW,IAAX,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAM,cAAN,EAA2B,IAAI,CAAC,KAAL,CAAW,KAAX,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAM,cAAN,EAA2B,IAAI,CAAC,QAAL,CAAc,KAAd,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAM,YAAN,EAA2B,IAAI,CAAC,KAAL,CAAW,GAAX,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAM,mBAAN,EAA2B,IAAI,CAAC,QAAL,CAAc;EAAC,CAAA,EAAE;AAAH,CAAd,CAA3B,EAAqD,IAArD;;AACA,IAAA,CAAM,kBAAN,EAA2B,IAAI,CAAC,OAAL,CAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAA3B,EAAkD,IAAlD;;AACA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,EAAjB,EAAqB,6BAArB;;AACA,IAAA,CAAM,eAAN,EAA0B,IAAI,CAAC,MAAL,CAAY,KAAZ,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,gBAAN,EAA0B,IAAI,CAAC,OAAL,CAAa,KAAb,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,eAAN,EAA0B,IAAI,CAAC,KAAL,CAAW;EAAC,CAAA,EAAE;AAAH,CAAX,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,cAAN,EAA0B,IAAI,CAAC,KAAL,CAAY,GAAZ,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,iBAAN,EAA0B,IAAI,CAAC,QAAL,CAAc,KAAd,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,cAAN,EAA0B,IAAI,CAAC,KAAL,CAAY,GAAZ,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,eAAN,EAA0B,IAAI,CAAC,QAAL,CAAc,GAAd,CAA1B,EAAiD,KAAjD;;AACA,IAAA,CAAM,kBAAN,EAA0B,IAAI,CAAC,OAAL,CAAa;EAAC,CAAA,EAAE;AAAH,CAAb,CAA1B,EAAiD,IAAjD;;AACA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AAvEA",
  "sourcesContent": [
    "\nimport { type } from \"./Type.js\"\nimport { test } from \"./Tester.js\"\n\nfunc  = () ->\nundef = undefined\n\ntest().module( \"Type\", \"The type assertion and conversion class libary\")\n\ntest().describe( \"toStr\", \"String conversions with toStr(arg)\" )\ntest( '{ a:\"a\", b:\"b\" }',  type.toStr({ a:\"a\", b:\"b\" }),  '{a:\"a\" b:\"b\"}' ).log( test().status() )\ntest( '[ 1, 2, 3 ]',       type.toStr([  1,   2,   3  ]),  '[1,2,3]'      ).log( test().status() )\ntest( '[ \"1\", \"2\", \"3\" ]', type.toStr([ \"1\", \"2\", \"3\" ]), '[\"1\",\"2\",\"3\"]' ).log( test().status() )\ntest().log( test().summary() ) # Log the all the tests  that began with descripe(...)\n\ntest().describe( \"toEnclose\", \"\"\"Enclose strings with '\"', '()', '[]' '{}'\"\"\" )\ntest( type.toEnclose( \"abc\",   '\"'  ), '\"abc\"'   )           # returns \"abc\" - good for JSON keys and values\ntest( type.toEnclose( \"123\",   \"'\"  ), \"'abc'\"   )           # returns '123'\ntest( type.toEnclose( \"xyz\",   \"()\" ), \"(xyz)\"   )           # returns (xyz)\ntest( type.toEnclose( \"d,e,f\", \"[]\" ), \"[d,e,f]\" )           # returns [d,e,f]\ntest( type.toEnclose( \"a:x,b:y,c:z\", \"{}\" ), \"{a:x,b:y,c:z}\" ) # returns {a:x,b:y,c:z}\ntest().log( test().summary() )\n\ntest().describe( \"type\", \"All 13 types\", false )  # false turns off this block of\ntest( \"'123'\",        type.type('123'),         'string'    )\ntest(  \"123\",         type.type(123),           'int'       )\ntest( \"123.0\",        type.type(123.0),         'float'     )\ntest( \"true\",         type.type(true),          'boolean'   )\ntest( \"[1,2,3]\",      type.type([1,2,3]),       'array'     )\ntest( \"{a:'a'}\",      type.type({a:'a'}),       'object'    )\ntest( \"/x/\",          type.type(/x/),           'regexp'    )\ntest( \"func\",         type.type( () => ),       'function'  )\ntest( \"null\",         type.type(null),          'null'      )\ntest( \"undef\",        type.type(undef),         'undefined' )\ntest( \"new Date()\",   type.type(new Date()),    'date'      )\ntest( \"BigInt(123)\",  type.type((BigInt(123))), 'bigint'    ) # 123n not working in CoffeeScript\ntest( \"Symbol\",       type.type(Symbol),        'symbol'    ) # Symbol not not Symbol()\ntest().log( test().summary() ) # Summary will shut off logging by returning a blank when @decribe( ..., false )\n\ntest().describe( \"klass\", \"types\", false )\ntest( \"true\",       type.klass(true),        'Boolean'   )\ntest( \"123\",        type.klass(123),         'Number'    )\ntest( \"'123'\",      type.klass('123'),       'String'    )\ntest( \"func\",       type.klass(func),        'func'      )\ntest( \"{a:'a'}\",    type.klass({a:'a'}),     'Object'    )\ntest( \"[1,2,3]\",    type.klass([1,2,3]),     'Array'     )\ntest( \"/x/\",        type.klass(/x/),         'RegExp'    )\ntest( \"new Date()\", type.klass(new Date()),  'Date'      )\ntest( \"undef\",      type.klass(undef),       'Undefined' )\ntest( \"null\",       type.klass(null),        'Null'      )\ntest().log( test().summary() )\n\ntest().describe( \"\", \"Positive true tests\", false )\ntest( \"isNull(null)\",      type.isNull(null),     true  )\ntest( \"isUndef(xxxx)\",     type.isUndef(undef),   true  )\ntest( \"isNot(null)\",       type.isNot(null),      true  )\ntest( \"isStr('abc')\",      type.isStr('abc'),     true  )\ntest( \"isNum(12345)\",      type.isNumber(12345),  true  )\ntest( \"isNaN(NaN)\",        type.isNaN(NaN),       true  )\ntest( \"isObject({a:'a'})\", type.isObject({a:'a'}),   true  )\ntest( \"isArray([1,2,3])\",  type.isArray([1,2,3]), true  )\ntest().log( test().summary() )\n\ntest().describe( \"\", \"Negative false test failure\" )\ntest( \"isNull('abc')\",    type.isNull('abc'),    false )\ntest( \"isUndef(12345)\",   type.isUndef(12345),   false )\ntest( \"isNot({a:'a'}\",    type.isNot({a:'a'}),   false )\ntest( \"isStr( 123 )\",     type.isStr( 123 ),     false )\ntest( \"isNumber('123')\",  type.isNumber('123'),  false )\ntest( \"isNaN( 123 )\",     type.isNaN( 123 ),     false )\ntest( \"isObject(123)\",    type.isObject(123),    false )\ntest( \"isArray({a:'a'})\", type.isArray({a:'a'}), true  )\ntest().log( test().summary() )\n\n###  \n  -- Type determination --\n  type:(arg,lowerCase=true)\n  klass:(arg)\n\n  -- is Assertions ---\n  isType:(v,t)\n  isString:(s)\n  isInt:(i,sc=false)\n  isFloat:(f,sc=false)\n  isBoolean:(b,sc=false)\n  isArray:( a, type=null, sc=false )\n  isObject:(o,sc=false)\n  isRegex:(r)\n  isFunction:(f)\n  isNull:(m)\n  isUndef:(u)\n  isBigInt:(b)\n  isSymbol:(s)\n\n  isDef:(d)\n  isNumber:(n)\n  isNot:(d)\n  isNaN:(n)\n  isArrayTyped:(a,t)\n  isArrayMixed:(a)\n  isChild: (key)\n  isEmpty:(e)\n  isStringFloat:( str )\n  isStringInt:( str )\n  isStringBoolean:( str )\n  isStringArray:( str )\n  isStringObject:( str )\n  isStringEnclosed:( beg, str, end )\n\n  -- to Conversions --\n  toType:( arg, type )\n  toString:( arg, enc=\"\" )\n  toFloat:( arg )\n  toInt:( arg )\n\n  toArray:( arg, type, sep=\",\" )\n  toObject:( arg )\n  toFixed:( arg, dec=2 )\n  toEnclose:( str, enc=\"\" )\n  toKeys:(o)\n  toSlice:( v, beg, end=null, remove=false )\n  toCap:( str )\n  unCap:( str )\n\n  == in Containment --\n  inString:(e,s)\n  inArray:( e,a)\n  inObject:(k,o)\n\n  -- Info messaging --\n  isInfo:( pass, text, type, types )\n  toInfo:( method, arg, type, typeTo, retnStr, retn )\n  inInfo:( pass, result, expect, oper, spec, text ) ->\n\n  -- Utilities --\n  head:(v,action=false,pop=false)\n  tail:(v,action=false)\n\n  pad:( n, m )\n  noop:( ...args )\n  time:()\n  types\n  typeofs\n###\n\n###\n{\n  \"stream\": {\n    \"subjectNames\": [\n      \"TestStatus\",\n      \"TestString\",\n      \"TestSummary\"\n    ],\n    \"info\": {\n      \"subscribe\": false,\n      \"publish\": false,\n      \"subjects\": [\n        \"TestStatus\",\n        \"TestString\",\n        \"TestSummary\"\n      ]\n    },\n    \"subjects\": {\n      \"TestStatus\": {\n        \"subscribers\": {}\n      },\n      \"TestString\": {\n        \"subscribers\": {}\n      },\n      \"TestSummary\": {\n        \"subscribers\": {}\n      }\n    }\n  },\n  \"testing\": true,\n  \"archive\": true,\n  \"verbose\": false,\n  \"debug\": false,\n  \"schemaKey\": \"schema\",\n  \"statusSubject\": \"TestStatus\",\n  \"stringSubject\": \"TestString\",\n  \"summarySubject\": \"TestSummary\",\n  \"description\": null,\n  \"suite\": \"unit tests\",\n  \"text\": \"five() = 5\",\n  \"code\": \"\",\n  \"statusText\": \"\",\n  \"statusClear\": true,\n  \"blockText\": \"\",\n  \"blockClear\": true,\n  \"module\": \"Tester\",\n  \"modules\": {\n    \"Tester\": {\n      \"name\": \"Tester\",\n      \"path\": \"/lib/pub/test/Tester-unit.js\"\n    }\n  },\n  \"passed\": [],\n  \"failed\": [],\n  \"logging\": true\n}\n  \n###"
  ]
}
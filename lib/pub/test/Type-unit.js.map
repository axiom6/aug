{
  "version": 3,
  "file": "Type-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { type } from \"./Type.js\"\nimport { test } from \"./Tester.js\"\n\nfunc  = () ->\nundef = undefined\n\ntest().module( \"Type\", \"The type assertion and conversion class libary\")\n\ntest().describe( \"toStr()\", \"String conversions with toStr(arg)\" )\ntest( '{a:\"a\",b:\"b\"}',  type.toStr({ a:\"a\", b:\"b\" }), '{a:\"a\" b:\"b\"}' ) # .log( test().status() )\ntest( '[1,2,3]',        type.toStr([1,2,3]),          '[1,2,3]'       ) # .log( test().status() )\ntest( '[\"1\",\"2\",\"3\"]',  type.toStr([\"1\",\"2\",\"3\"]),    '[\"1\",\"2\",\"3\"]' ) # .log( test().status() )\ntest().log( test().summary() ) # Log the all the tests  that began with descripe(...)\n\ntest().describe( \"toEnclose()\", \"\"\"Enclose strings with '\"', '()', '[]' '{}'\"\"\" )\ntest( \"\", type.toEnclose( \"abc\",   '\"'  ), '\"abc\"'   )             # returns \"abc\" - good for JSON keys and values\ntest( \"\", type.toEnclose( \"123\",   \"'\"  ), \"'123'\"   )             # returns '123'\ntest( \"\", type.toEnclose( \"xyz\",   \"()\" ), \"(xyz)\"   )             # returns (xyz)\ntest( \"\", type.toEnclose( \"d,e,f\", \"[]\" ), \"[d,e,f]\" )             # returns [d,e,f]\ntest( \"\", type.toEnclose( \"a:x,b:y,c:z\", \"{}\" ), \"{a:x,b:y,c:z}\" ) # returns {a:x,b:y,c:z}\ntest().log( test().summary() )\n\ntest().describe( \"type()\", \"All 13 types\", true )  # false turns off this block of\ntest( \"'123'\",        type.type('123'),         'string'    )\ntest(  \"123\",         type.type(123),           'int'       )\ntest( \"123.0\",        type.type(123.0),         'float'     )\ntest( \"true\",         type.type(true),          'boolean'   )\ntest( \"[1,2,3]\",      type.type([1,2,3]),       'array'     )\ntest( \"{a:'a'}\",      type.type({a:'a'}),       'object'    )\ntest( \"/x/\",          type.type(/x/),           'regexp'    )\ntest( \"func\",         type.type( () => ),       'function'  )\ntest( \"null\",         type.type(null),          'null'      )\ntest( \"undef\",        type.type(undef),         'undefined' )\ntest( \"new Date()\",   type.type(new Date()),    'date'      )\ntest( \"BigInt(123)\",  type.type((BigInt(123))), 'bigint'    ) # 123n not working in CoffeeScript\ntest( \"Symbol\",       type.type(Symbol),        'symbol'    ) # Symbol not not Symbol()\ntest().log( test().summary() )\n\ntest().describe( \"klass()\", \"types\", true )\ntest( \"true\",       type.klass(true),        'Boolean'   )\ntest( \"123\",        type.klass(123),         'Number'    )\ntest( \"'123'\",      type.klass('123'),       'String'    )\ntest( \"func\",       type.klass(func),        'func'      )\ntest( \"{a:'a'}\",    type.klass({a:'a'}),     'Object'    )\ntest( \"[1,2,3]\",    type.klass([1,2,3]),     'Array'     )\ntest( \"/x/\",        type.klass(/x/),         'RegExp'    )\ntest( \"new Date()\", type.klass(new Date()),  'Date'      )\ntest( \"undef\",      type.klass(undef),       'Undefined' )\ntest( \"null\",       type.klass(null),        'Null'      )\ntest().log( test().summary() )\n\ntest().describe( \"-Positive\", \"Positive true tests\", true )\ntest( \"isNull(null)\",      type.isNull(null),     true  )\ntest( \"isUndef(xxxx)\",     type.isUndef(undef),   true  )\ntest( \"isNot(null)\",       type.isNot(null),      true  )\ntest( \"isStr('abc')\",      type.isStr('abc'),     true  )\ntest( \"isNum(12345)\",      type.isNumber(12345),  true  )\ntest( \"isNaN(NaN)\",        type.isNaN(NaN),       true  )\ntest( \"isObject({a:'a'})\", type.isObject({a:'a'}),   true  )\ntest( \"isArray([1,2,3])\",  type.isArray([1,2,3]), true  )\ntest().log( test().summary() )\n\ntest().describe( \"-Negative\", \"Negative false test failure\" )\ntest( \"isNull('abc')\",    type.isNull('abc'),    false )\ntest( \"isUndef(12345)\",   type.isUndef(12345),   false )\ntest( \"isNot({a:'a'}\",    type.isNot({a:'a'}),   false )\ntest( \"isStr( 123 )\",     type.isStr( 123 ),     false )\ntest( \"isNumber('123')\",  type.isNumber('123'),  false )\ntest( \"isNaN( 123 )\",     type.isNaN( 123 ),     false )\ntest( \"isObject(123)\",    type.isObject(123),    false )\ntest( \"isArray({a:'a'})\", type.isArray({a:'a'}), true  )\ntest().log( test().summary() )\n\ntest().describe( \"-is...\", \"Test all class Type is... assertions\" )\n###\nisType(v,t)\nisString(s)\nisInt(i,sc=false)\nisFloat(f,sc=false)\nisBoolean(b,sc=false)\nisArray( a, type=null, sc=false )\nisObject(o,sc=false)\nisRegex(r)\nisFunction(f)\nisNull(m)\nisUndef(u)\nisBigInt(b)\nisSymbol(s)\nisDef(d)\nisNumber(n)\nisNot(d)\nisNaN(n)\nisArrayTyped(a,t)\nisArrayMixed(a)\nisChild (key)\nisEmpty(e)\nisStringFloat( str )\nisStringInt( str )\nisStringBoolean( str )\nisStringArray( str )\nisStringObject( str )\nisStringEnclosed( beg, str, end )\n###\ntest().log( test().summary() )\n\ntest().describe( \"-to...\", \"Test all class Type to... assertions\" )\ntest( \"toType( arg, type )\", type.toType( \"123\", \"int\" ), 123 )\ntest( \"toStr( arg )\", type.toStr( 123 ), \"123\" )\ntest( \"toFloat( arg )\", type.toFloat( 1 ), 1.0 )\ntest( \"toInt( arg )\", type.toInt( 1.0 ), 1 )\ntest( \"toArray( arg )\", type.toArray( \"[1,2,3]\" ), [1,2,3] )\ntest( \"toObject( arg )\", (t) ->\n  a = \"1\"\n  b = \"2\"\n  t.eq( type.toObject( '{a:\"1\",b:\"2\")', {a:\"1\",b:\"2\"} ) )\n  t.eq( type.toObject( '{a:a,b:b)',     {a:a,b:b}     ) ) )\ntest( \"toFixed( arg, dec=2 )\", type.toFixed( 1.0 ), 1.00 )\ntest( 'toEnclose( str, enc=\"\" )', type.toEnclose('abc',\"\"), \"abc\" )\ntest( \"toKeys(o)\", type.toKeys({x:\"1\",y:\"2\"}), [\"x\",\"y\"] )\ntest( \"toCap( str )\", type.toCap(\"cap\"), \"Cap\" )\ntest( \"unCap( str )\", type.unCap(\"Cap\"), \"cap\" )\ntest( \"toSlice( v, beg, end=null, remove=false )\", type.toSlice( \"123456\", 3, 4 ), \"34\" )\ntest().log( test().summary() )\n\ntest().describe( \"-in...\", \"Test all class Type in... containmentt\" )\ntest( \"inString(e,s)\", type.inString( b, \"abc\" ),         true )\ntest( \"inArray( e,a)\", type.inArray(  2, [1,2,3] ),       true )\ntest( \"inObject(k,o)\", type.inObject( b, {a:\"1\",b:\"2\"} ), true )\ntest().log( test().summary() )\n\ntest().describe( \"-Utilities\", \"Test all class Type in... containmentt\" )\ntest( 'head(v,action=false,pop=false)', type.head(\"BEGabc\", \"BEG\", true ), \"BEG\" )\ntest( 'tail(v,action=false,pop=false)', type.tail(\"abcEND\", \"END\", true ), \"END\" )\ntest( 'pad(n,m)',                       type.pad( \"1\", 2 ),                \"  1\" )\ntest( 'isIn( \"string\", \"types\"   )',    type.isIn( \"string\", \"types\"   ),   true )\ntest( 'isIn( \"string\", \"typeofs\" )',    type.isIn( \"string\", \"typeofs\" ),   true )\ntest().log( test().summary() )\n\ntest().describe( \"-Warnings\", \"methods @toWarn(...) @isWarn(...) @inWarn(...)\" )\ntest( \"toWarn(method,text,arg,typeTo,retn, (t)=>t.log(@warn()) )\",\n  type.toWarn(\"toStr()\",\"bad arg\", \"undefined\",\"string\",'\"\"', (t)=>t.log(@warn()) ), \"\" )\ntest( \"isWarn(fail,text,string,[array.object],(t)=>t.log(@warn()) )\"\n  type.isWarn(fail,text,\"string\",[\"array\",\"object\"],(t)=>t.log(@warn()) ), true )\ntest( \"inWarn(pass,result,expect,oper,spec,text,(t)=>t.log(@warn()) )\"\n  type.inWarn(fail,\"4\",\"1|2|3\",\"eq\",\"1|2|3\",\"enums\",(t)=>t.log(@warn()) ), true )\ntest().log( test().summary() )\n"
  ]
}
{
  "version": 3,
  "file": "Spec-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Spec-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { spec } from \"./Spec.js\"\nimport { test } from \"./Tester.js\"\n\narg    = \"\"\noper   = \"eq\"\ntype   = \"\"\nresult = \"\"\nexpect = \"\"\nrange  = \"\"\nenums  = \"\"\ncard   = \"?\"\nargs   = \"\"\nkey    = null\nindex  = null\ntkey   = \"\"\nresultArray = [300, 30, 50]\nrange       = [360.100,100]\nspecStr = \"string:[360.100,100]:1\"\n\nenumStr   = \"Embrace|Innovate|Encourage\"\nenums     = [\"Embrace\",\"Innovate\",\"Encourage\"]\nspecObj   = { type:\"string\", oper:\"range\", expect:\"string:[360.100,100]:1\", card:\"1\", spec:\"\"  }\nrangeSpec = { type:\"array\",  oper:\"range\", expect:\"string:[360.100,100]:1\", card:\"1\", spec:\"\"  }\nenumsSpec = { type:\"string\", oper:\"enums\", expect:\"#{enums}:1\",             card:\"1\", spec:\"\"  }\n\ntest().module( \"The extended assertion and conversion class libary\" ).on()\n\ntest().describe( \"Initial run through\" ).on()\ntest( \"isEnums(arg,oper,type)\",     spec.isEnums(enumStr,oper,type),     true    )\ntest( \"verifySpec(arg)\",            spec.verifySpec(specObj),           specObj  )  \ntest( \"isResultType(type)\",         spec.isResultType(\"string\"),         true    )\ntest( \"isOper(oper)\",               spec.isOper(oper),                   true    )\ntest( \"isCard(card)\",               spec.isCard(card),                   true    )\ntest( \"isSpec(expect)\",             spec.isSpec(specStr),                true    )\ntest( \"toSpec(expect)\",             spec.toSpec(specStr),                specObj )\ntest( \"isSpecParse(arg)\",           spec.isSpecParse(specStr,),  true    )\ntest( \"toSpecParse(arg)\",           spec.toSpecParse(specStr,\"string\"),  specObj )\ntest( \"isSpecObject (arg)\",         spec.isSpecObject(specObj),          true    )\ntest( \"toSpecObject(spec,arg)\",     spec.toSpecObject(specObj,specObj),  specObj )\ntest( \"isSpecValue(type)\",          spec.isSpecValue(\"string\"),           true   )\ntest( \"inArrayRange(result,range)\", spec.inArrayRange(resultArray,range), true   )\ntest( \"toEnums(arg)\",               spec.toEnums(enumStr),                enums  )\ntest( \"rangeType(range)\",           spec.rangeType(range),               \"range\" )\ntest( \"isRange(range)\",             spec.isRange(range),                  true   )\ntest( \"isIn(type,tkey)\",            spec.isIn(\"range\",\"ranges\"),          true   )\ntest( \"toSpecValue(spec,arg,type)\", spec.toSpecValue(spec,arg,type),      true   )\ntest().log( test().summary() )"
  ]
}
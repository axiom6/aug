{
  "version": 3,
  "file": "Spec-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Spec-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { spec } from \"./Spec.js\"\nimport { test } from \"./Tester.js\"\n\narg    = \"\"\noper   = \"eq\"\ntype   = \"string\"\nresult = \"\"\nexpect = \"\"\nrange  = \"\"\nenums  = \"\"\ncard   = \"?\"\nargs   = \"\"\nkey    = null\nindex  = null\ntkey   = \"\"\nresults = [300, 30, 50]\nrange   = [360.100,100]\nrangeStr = \"string:[360.100,100]:1\"\n\nenumStr   = \"Embrace|Innovate|Encourage\"\nenums     = [\"Embrace\",\"Innovate\",\"Encourage\"]\nspecObj   = { type:\"string\", oper:\"range\", expect:\"string:[360.100,100]:1\", card:\"1\", spec:\"\"  }\nrangeSpec = { type:\"array\",  oper:\"range\", expect:\"string:[360.100,100]:1\", card:\"1\", spec:\"\"  }\nenumsSpec = { type:\"string\", oper:\"enums\", expect:\"#{enums}:1\",             card:\"1\", spec:\"\"  }\nspecStr   = spec.toStr(specObj)\n\ntest().module( \"the extended assertion and conversion class libary\" ).on(true)\n                                                                                    \ntest().describe( \"Initial run through\" ).on()\ntest( \"isEnums(#{enumStr},#{oper},#{type})\", spec.isEnums(enumStr,oper,type),     true    )\ntest( \"verifySpec(#{specObj})\",              spec.verifySpec(specObj),            specObj )\ntest( \"isResult(#{result})\",                 spec.isResult(result),               true    )\ntest( \"isExpect(#{expect})\",                 spec.isExpect(expect),               true    )\ntest( \"isOper('eq')\",                        spec.isOper(oper),                   true    )\ntest( \"isCard('?')\",                         spec.isCard(card),                   true    )\ntest( \"isSpec(#{rangeStr})\",                 spec.isSpec(rangeStr),               true    )\ntest( \"toSpec(#{rangeStr})\",                 spec.toSpec(rangeStr),               specObj )\ntest( \"isSpecParse(#{rangeStr})\",            spec.isSpecParse(rangeStr,),         true    )\ntest( \"toSpecParse(#{rangeStr})\",            spec.toSpecParse(rangeStr,\"string\"), specObj )\ntest( \"isSpecObject(#{specStr})\",            spec.isSpecObject(specObj),          true    )\ntest( \"toSpecObject(#{specStr},#{specStr})\", spec.toSpecObject(specObj,specObj),  specObj )\ntest( \"isSpecValue('string')\",               spec.isSpecValue(\"string\"),           true   )\ntest( \"inArrayRange(#{results},#{range})\",   spec.inArrayRange(results,range),     true   )\ntest( \"toEnums(#{enumStr})\",                 spec.toEnums(enumStr),                enums  )\ntest( \"rangeType(#{range})\",                 spec.rangeType(range),               \"range\" )\ntest( \"isRange(#{range})\",                   spec.isRange(range),                  true   )\ntest( \"isIn('range','ranges')\",              spec.isIn(\"range\",\"ranges\"),          true   )\ntest( \"toSpecValue(#{specStr},#{rangeStr},#{type})\", spec.toSpecValue(specObj,rangeStr,type),      specObj   )\ntest().log( test().summary() )  # Not needed because"
  ]
}
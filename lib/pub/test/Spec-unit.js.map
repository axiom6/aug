{
  "version": 3,
  "file": "Spec-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Spec-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { spec } from \"./Spec.js\"\nimport { test } from \"./Tester.js\"\n\ntest().listFunctions( spec )\n\n\ncard   = \"?\"\n\nexpectA = [300, 30, 50]\nresultA = [300, 30, 50]\nresultE = \"innovate\"\nresultR = \"x\"\nresultO = {a:\"Innovate\",b:\"Embrace\"}\n\nrange   = [360.100,100]\nenums     = [\"Embrace\",\"Innovate\",\"Encourage\"]\nregexp    = /x/\n\nrangeTx      = '[360.100,100]'\nenumsTx      = '[\"Embrace\",\"Innovate\",\"Encourage\"]'\nregexpTx     = '/x/'\n\nrangeStr   = \"string:[360.100,100]:1\"\nenumsStr   = \"string:Embrace|Innovate|Encourage\"\nregexpStr  = \"string:/x/\"\n\nrangeSpec  = { type:\"array\",  match:[360.100,100], card:\"1\" }\nenumsSpec  = { type:\"string\", match:\"#{enums}:1\",  card:\"1\" }\nregexpSpec = { type:\"string\", match:\"/x/\",         card:\"1\" }\nobjectSpec = { a:enumsSpec, b:enumsSpec }\n\nexpects = [\"string\",\"int\",\"float\",\"boolean\",\"object\",\"array\",\"regexp\",\"range\",\"enums\",\"amy\"]\n\ntest().module( \"the extended assertion and conversion class libary\" ).on(true)\n                                                                                    \n\ntest().describe( \"-- is... Spec assertions\" ).on()\ntest( \"isSpec(#{rangeStr})\",         spec.isSpec(rangeStr),         true )\ntest( \"isSpec(#{enumsStr})\",         spec.isSpec(enumsStr),         true )\ntest( \"isSpec(#{regexpStr})\",        spec.isSpec(regexpStr),        true )\ntest( \"isSpecParse(#{rangeStr})\",    spec.isSpecParse(rangeStr),    true )\ntest( \"isSpecParse(#{enumsStr})\",    spec.isSpecParse(enumsStr),    true )\ntest( \"isSpecParse(#{rangeStr})\",    spec.isSpecParse(regexpStr),   true )\ntest( \"isSpecObject(#{rangeSpec})\",  spec.isSpecObject(rangeSpec),  true )\ntest( \"isSpecObject(#{enumsSpec})\",  spec.isSpecObject(enumsSpec),  true )\ntest( \"isSpecObject(#{regexpSpec})\", spec.isSpecObject(regexpSpec), true )\ntest( \"isMatch(#{range})\",           spec.isMatch(range),           true )\ntest( \"isMatch(#{enums})\",           spec.isMatch(range),           true )\ntest( \"isMatch(#{regexp})\",          spec.isMatch(regexp),          true )\ntest( \"isRange(#{range})\",           spec.isRange(range),           true )\ntest( \"isEnums(#{enums})\",           spec.isEnums(range),           true )\ntest( \"isRegexp(#{regexp})\",         spec.isRegexp(regexp),         true )\ntest( \"isResult(#{resultA})\",        spec.isResult(resultA),        true )\ntest( \"isExpect(#{expectA})\",        spec.isExpect(expectA),        true )\ntest( \"isCard(#{\"1\"})\",              spec.isCard(\"1\"),              true )\ntest( \"isIn(#{resultA},'results')\",  spec.isIn(resultA,\"results\"),  true )\ntest().log( test().summary() )\n  \ntest().describe( \"-- to... Spec conversions\" ).op(\"to\").on()\ntest( \"toSpec(#{rangeStr})\",         spec.toSpec(rangeStr),         rangeSpec  )\ntest( \"toSpec(#{enumsStr})\",         spec.toSpec(enumsStr),         enumsSpec  )\ntest( \"toSpec(#{regexpStr})\",        spec.toSpec(regexpStr),        regexpSpec )\ntest( \"toSpecParse(#{rangeStr})\",    spec.toSpecParse(rangeStr),    rangeSpec  )\ntest( \"toSpecParse(#{enumsStr})\",    spec.toSpecParse(enumsStr),    enumsSpec  )\ntest( \"toSpecParse(#{regexpStr})\",   spec.toSpecParse(regexpStr),   regexpSpec )\ntest( \"toSpecObject(#{rangeSpec})\",  spec.toSpecObject(rangeSpec),  rangeSpec  )\ntest( \"toSpecObject(#{enumsSpec})\",  spec.toSpecObject(enumsSpec),  enumsSpec  )\ntest( \"toSpecObject(#{regexpSpec})\", spec.toSpecObject(regexpSpec), regexpSpec )\ntest( \"toRange(#{rangeTx})\",         spec.toRange(rangeTx),         range      )\ntest( \"toEnums(#{enumsTx})\",         spec.toEnums(enumsTx),         enums      )\ntest( \"toRegexp(#{regexpTx})\",       spec.toRegexp(regexpTx),       regexp     )\ntest( \"toMinMax(#{'3-6'})\",          spec.toMinMax('3-6'),          [3,6]      )\ntest( \"toIn(#{'expects'})\",          spec.toIn('expects'),          expects    )\ntest( \"toSpecInit()\",     spec.toSpecInit(), {type:\"any\",match:\"any\",card:\"1\"} )\ntest().log( test().summary() )\n\ntest().describe( \" -- in... Spec verify\" ).on()\ntest( \"inSpec(#{resultA},#{rangeSpec})\",        spec.inSpec(resultA,rangeSpec),        true )\ntest( \"inSpec(#{resultE},#{enumsSpec})\",        spec.inSpec(resultE,enumsSpec),        true )\ntest( \"inSpec(#{resultR},#{regexpSpec})\",       spec.inSpec(resultR,regexpSpec),       true )\ntest( \"inSpecArray(#{resultA},#{rangeSpec})\",   spec.inSpecArray(resultA,rangeSpec),   true )\ntest( \"inSpecObject(#{resultO},#{objectSpec})\", spec.inSpecObject(resultO,objectSpec), true )\ntest( \"inRange(#{resultA},#{range})\",           spec.inRange(resultA,range),           true )\ntest( \"inEnums(#{resultE},#{enums})\",           spec.inEnums(resultE,range),           true )\ntest( \"inRegexp(#{resultR},#{regexp})\",         spec.inRegexp(resultR,regexp),         true )\ntest( \"inCard(#{resultA},#{card})\",             spec.inCard(resultA,card),             true )\ntest().log( test().summary() )\n\n"
  ]
}
{
  "version": 3,
  "file": "Spec-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Spec-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { spec } from \"./Spec.js\"\nimport { test } from \"./Tester.js\"\n\ncard    = \"?\"\nexpectA = [300,  30,    50]\nresultA = [300,  30,    50]\nresultC = [200, 200,   200]\nresultF = [200.1, 50.1, 50.1]\nresultE = \"Innovate\"\nresultR = \"x\"\nresultO = {a:\"Innovate\",b:\"Embrace\"}\n\nrangeStr    = \"| a-z, 0-9, A-Z |\"\narrayStr    = [[\"a\",\"z\"],[0,9],[\"A\",\"Z\"]]\nrangeRgb    = \"| 0-255 |\"\narrayRgb    =  [0,255]\nrangeHsv    = \"| 0-360, 0-100, 0-100 |\"\narrayHsv    =  [[0,360],[0,100],[0,100]]\nrangeFlt    = \"| 0-360+0.001, 0-100+0.001, 0-100+0.001 |\"\narrayFlt    =  [[0,360,0.001],[0,100,0.001],[0,100,0.001]]\n\nenums     = \"|Embrace|Innovate|Encourage|\"\nregexp    = /x/\nregexpTx  = '/x/'\n\nrangeMat   = \"string:#{rangeHsv}:1\"\nenumsMat   = \"string:|Embrace|Innovate|Encourage|\"\nregexpMat  = \"string:/x/\"\nobjectMat  = { a:enumsMat, b:enumsMat }\narrayMat   = [   enumsMat,   enumsMat ]\n\nrangeSpec  = { type:\"array\",  match:rangeHsv, card:\"1\" }\nenumsSpec  = { type:\"string\", match:enums,    card:\"1\" }\nregexpSpec = { type:\"string\", match:regexpTx, card:\"1\" }\nobjectSpec = { a:enumsSpec, b:enumsSpec }\narraySpec  = [   enumsSpec,   enumsSpec ]\n\nrangeSpecStr  = spec.toStr(rangeSpec)\nenumsSpecStr  = spec.toStr(enumsSpec)\nregexpSpecStr = spec.toStr(regexpSpec)\nobjectSpecStr = spec.toStr(objectSpec)\narraySpecStr  = spec.toStr(arraySpec)\n\nexpects = [\"string\",\"int\",\"float\",\"boolean\",\"object\",\"array\",\"regexp\",\"range\",\"enums\",\"amy\"]\n\ntest().module( \"the extended assertion and conversion class libary\" ).on(true) # .name(\"Spec\")\n\ntest().describe( \"-- is... Spec assertions\" ).on()\ntest( \"isSpec(#{rangeSpecStr})\",          spec.isSpec(rangeSpecStr),       true )\ntest( \"isSpec(#{enumsSpecStr})\",          spec.isSpec(enumsSpecStr),       true )\ntest( \"isSpec(#{regexpSpecStr})\",         spec.isSpec(regexpSpecStr),      true )\ntest( \"isSpec(#{objectSpecStr})\",         spec.isSpec(objectSpecStr),      true )\ntest( \"isSpecParse(#{rangeMat})\",         spec.isSpecParse(rangeMat),      true )\ntest( \"isSpecParse(#{enumsMat})\",         spec.isSpecParse(enumsMat),      true )\ntest( \"isSpecParse(#{regexpMat})\",        spec.isSpecParse(regexpMat),     true )\ntest( \"isSpecParse(#{objectMat})\",        spec.isSpecParse(objectMat),     true )\ntest( \"isSpecObject(#{rangeSpecStr})\",    spec.isSpecObject(rangeSpec),    true )\ntest( \"isSpecObject(#{enumsSpecStr})\",    spec.isSpecObject(enumsSpec),    true )\ntest( \"isSpecObject(#{regexpSpecStr})\",   spec.isSpecObject(regexpSpec),   true )\ntest( \"isSpecObject(#{regexpSpecStr})\",   spec.isSpecObject(regexpSpec),   true )\ntest( \"isMatch(#{rangeMat})\",             spec.isMatch(rangeMat),          true )\ntest( \"isMatch(#{enumsMat})\",             spec.isMatch(enumsMat),          true )\ntest( \"isMatch(#{regexpMat})\",            spec.isMatch(regexpMat),         true )\ntest( \"isRange(#{rangeStr})\",             spec.isRange(rangeStr),          true )\ntest( \"isRange(#{rangeRgb})\",             spec.isRange(rangeRgb),          true )\ntest( \"isRange(#{rangeHsv})\",             spec.isRange(rangeHsv),          true )\ntest( \"isRange(#{rangeFlt})\",             spec.isRange(rangeHsv),          true )\ntest( \"isRanges(#{rangeStr})\",            spec.isRanges(rangeStr),         true )\ntest( \"isRanges(#{rangeRgb})\",            spec.isRanges(rangeRgb),         true )\ntest( \"isRanges(#{rangeHsv})\",            spec.isRanges(rangeHsv),         true )\ntest( \"isRanges(#{rangeFlt})\",            spec.isRanges(rangeHsv),         true )\ntest( \"isEnums(#{enums})\",                spec.isEnums(enums),             true )\ntest( \"isRegexp(#{regexpTx})\",            spec.isRegexp(regexp),           true )\ntest( \"isResult(#{spec.toStr(resultA)})\", spec.isResult(resultA),          true )\ntest( \"isResult(#{spec.toStr(resultE)})\", spec.isResult(resultE),          true )\ntest( \"isResult(#{spec.toStr(resultR)})\", spec.isResult(resultR),          true )\ntest( \"isResult(#{spec.toStr(resultO)})\", spec.isResult(resultO),          true )\ntest( \"isExpect(#{spec.toStr(expectA)})\", spec.isExpect(expectA),          true )\ntest( \"isCard(#{\"1\"})\",                   spec.isCard(\"1\"),                true )\ntest( \"isIn(type(#{spec.toStr(resultA)}),'results')\", spec.isIn(spec.toType(resultA),\"results\"),  true )\ntest( \"isIn(type(#{spec.toStr(resultE)}),'results')\", spec.isIn(spec.toType(resultE),\"results\"),  true )\ntest( \"isIn(type(#{spec.toStr(resultR)}),'results')\", spec.isIn(spec.toType(resultR),\"results\"),  true )\ntest( \"isIn(type(#{spec.toStr(resultO)}),'results')\", spec.isIn(spec.toType(resultO),\"results\"),  true )\ntest().log( test().summary() )\n  \ntest().describe( \"-- to... Spec conversions\" ).op(\"to\").on()\ntest( \"toSpec(#{rangeSpecStr})\",        spec.toSpec(rangeSpecStr),     rangeSpec  )\ntest( \"toSpec(#{enumsSpecStr})\",        spec.toSpec(enumsSpecStr),     enumsSpec  )\ntest( \"toSpec(#{regexpSpecStr})\",       spec.toSpec(regexpSpecStr),    regexpSpec )\ntest( \"toSpec(#{objectSpecStr})\",       spec.toSpec(objectSpecStr),    objectSpec )\ntest( \"toSpecParse(#{rangeMat})\",       spec.toSpecParse(rangeMat),    rangeSpec  )\ntest( \"toSpecParse(#{enumsMat})\",       spec.toSpecParse(enumsMat),    enumsSpec  )\ntest( \"toSpecParse(#{regexpMat})\",      spec.toSpecParse(regexpMat),   regexpSpec )\ntest( \"toSpecParse(#{objectMat})\",      spec.toSpecParse(objectMat),   spec.toSpecInit() )\ntest( \"toSpecParse(#{arrayMat})\",       spec.toSpecParse(arrayMat),    spec.toSpecInit() )\ntest( \"toSpecObject(#{rangeSpecStr})\",  spec.toSpecObject(rangeSpec),  rangeSpec  )\ntest( \"toSpecObject(#{enumsSpecStr})\",  spec.toSpecObject(enumsSpec),  enumsSpec  )\ntest( \"toSpecObject(#{regexpSpecStr})\", spec.toSpecObject(regexpSpec), regexpSpec )\ntest( \"toSpecObject(#{objectSpecStr})\", spec.toSpecObject(objectSpec), objectSpec )\n\ntest( \"toRanges(#{rangeStr})\", spec.toRanges(rangeStr),        arrayStr )  # Working\ntest( \"toRanges(#{rangeRgb})\", spec.toRanges(rangeRgb),        arrayRgb )\ntest( \"toRanges(#{rangeHsv})\", spec.toRanges(rangeHsv),        arrayHsv )\ntest( \"toRanges(#{rangeFlt})\", spec.toRanges(rangeFlt),        arrayFlt )\n\ntest( \"toRangeArray(#{rangeStr})\", spec.toRangeArray(rangeStr), arrayStr )  # Important\ntest( \"toRangeArray(#{rangeRgb})\", spec.toRangeArray(rangeRgb), arrayRgb )\ntest( \"toRangeArray(#{rangeHsv})\", spec.toRangeArray(rangeHsv), arrayHsv )\ntest( \"toRangeArray(#{rangeFlt})\", spec.toRangeArray(rangeFlt), arrayFlt )\n\n\ntest( \"toMinMax(#{'3-6'})\",        spec.toMinMax('3-6'),        [3,6]      )\ntest( \"toSpecInit()\", spec.toSpecInit(), {type:\"any\",match:\"any\",card:\"1\"} )\n\ntest( \"toEnums(#{enums})\",     spec.toEnums(enums),            enums    )  # 6 Failed Tests\ntest( \"toRegexp(#{regexpTx})\", spec.toRegexp(regexpTx),        regexp   )\ntest( \"toRange(#{rangeStr})\",  spec.toRange(rangeStr),         rangeStr )\ntest( \"toRange(#{rangeRgb})\",  spec.toRange(rangeRgb),         rangeRgb )\ntest( \"toRange(#{rangeHsv})\",  spec.toRange(rangeHsv),         rangeHsv )\ntest( \"toRange(#{rangeFlt})\",  spec.toRange(rangeFlt),         rangeFlt )\ntest().log( test().summary() )\n\ntest().describe( \"-- in... Spec verify\" ).on()\ntest( \"inSpec(#{spec.toStr(resultA)},#{rangeSpecStr})\",  spec.inSpec(resultA,rangeSpec),  true )\ntest( \"inSpec(#{spec.toStr(resultE)},#{enumsSpecStr})\",  spec.inSpec(resultE,enumsSpec),  true )\ntest( \"inSpec(#{spec.toStr(resultR)},#{regexpSpecStr})\", spec.inSpec(resultR,regexpSpec), true )\ntest( \"inSpec(#{spec.toStr(resultO)},#{regexpSpecStr})\", spec.inSpec(resultO,objectSpec), true )\n\ntest( \"inSpecArray(#{spec.toStr(resultA)},#{arraySpecStr})\", spec.inSpecArray(resultA,arraySpec),   true )\ntest( \"inSpecObject(#{resultO},#{objectSpecStr})\",           spec.inSpecObject(resultO,objectSpec), true )\n\ntest( \"inRange(#{spec.toStr(resultA)},#{rangeHsv})\",         spec.inRange(resultA,rangeHsv),        true )\ntest( \"inRange(#{spec.toStr(resultC)},#{rangeRgb})\",         spec.inRange(resultC,rangeRgb),        true )\ntest( \"inRange(#{spec.toStr(resultF)},#{rangeFlt})\",         spec.inRange(resultF,rangeFlt),        true )\n\ntest( \"inEnums(#{resultE},#{enums})\",                        spec.inEnums(resultE,enums),           true )\ntest( \"inRegexp(#{resultR},#{regexp})\",                      spec.inRegexp(resultR,regexp),         true )\ntest( \"inCard(#{resultA},#{rangeSpecStr})\",                  spec.inCard(resultA,rangeSpec),        true )\ntest().log( test().summary() )\n\n"
  ]
}
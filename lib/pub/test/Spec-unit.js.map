{
  "version": 3,
  "file": "Spec-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Spec-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { spec } from \"./Spec.js\"\nimport { test } from \"./Tester.js\"\n\ncard    = \"?\"\n\nexpectA = [300, 30, 50]\nresultA = [300, 30, 50]\nresultE = \"Innovate\"\nresultR = \"x\"\nresultO = {a:\"Innovate\",b:\"Embrace\"}\n\nrangeStr    = \"| a-z, 0-9, A-Z |\"\narrayStr    = [[\"a\",\"z\"],[0,9],[\"A\",\"Z\"]]\nrangeRgb    = \"| 0-255 |\"\narrayRgb    =  [0,255]\nrangeHsv    = \"| 0-360, 0-100, 0-100 |\"\narrayRgb    =  [[0,360],[0,100],[0,100]]\nrangeFlt    = \"| 0-360+0.001, 0-100+0.001, 0-100+0.001 |\"\narrayRgb    =  [[0,360,0.001],[0,100,0.001],[0,100,0.001]]\n\nenums     = \"|Embrace|Innovate|Encourage|\"\nregexp    = /x/\nregexpTx  = '/x/'\n\nrangeMat   = \"string:#{rangeHsv}:1\"\nenumsMat   = \"string:|Embrace|Innovate|Encourage|\"\nregexpMat  = \"string:/x/\"\n\nrangeSpec  = { type:\"array\",  match:rangeMat,   card:\"1\" }\nenumsSpec  = { type:\"string\", match:enumsMat,  card:\"1\" }\nregexpSpec = { type:\"string\", match:regexpMat, card:\"1\" }\nobjectSpec = { a:enumsSpec, b:enumsSpec }\n\nrangeSpecStr  = spec.toStr(rangeSpec)\nenumsSpecStr  = spec.toStr(enumsSpec)\nregexpSpecStr = spec.toStr(regexpSpec)\nobjectSpecStr = spec.toStr(objectSpec)\n\nexpects = [\"string\",\"int\",\"float\",\"boolean\",\"object\",\"array\",\"regexp\",\"range\",\"enums\",\"amy\"]\n\ntest().module( \"the extended assertion and conversion class libary\" ).on(true) # .name(\"Spec\")\n\ntest().describe( \"-- is... Spec assertions\" ).on()\ntest( \"isSpec(#{rangeSpecStr})\",              spec.isSpec(rangeSpecStr),         true )\ntest( \"isSpec(#{enumsSpecStr})\",              spec.isSpec(enumsSpecStr),         true )\ntest( \"isSpec(#{regexpSpecStr})\",             spec.isSpec(regexpSpecStr),        true )\ntest( \"isSpec(#{objectSpecStr})\",             spec.isSpec(objectSpecStr),        true )\ntest( \"isSpecParse(#{rangeSpecStr})\",         spec.isSpecParse(rangeSpecStr),    true )\ntest( \"isSpecParse(#{enumsSpecStr})\",         spec.isSpecParse(enumsSpecStr),    true )\ntest( \"isSpecParse(#{regexpSpecStr})\",         spec.isSpecParse(regexpSpecStr),   true )\ntest( \"isSpecParse(#{objectSpecStr})\",         spec.isSpecParse(objectSpecStr),   true )\ntest( \"isSpecObject(#{rangeSpecStr})\",    spec.isSpecObject(rangeSpec),  true )\ntest( \"isSpecObject(#{enumsSpecStr})\",    spec.isSpecObject(enumsSpec),  true )\ntest( \"isSpecObject(#{regexpSpecStr})\",   spec.isSpecObject(regexpSpec), true )\ntest( \"isSpecObject(#{regexpSpecStr})\",   spec.isSpecObject(regexpSpec), true )\ntest( \"isMatch(#{rangeMat})\",              spec.isMatch(rangeMat),           true )\ntest( \"isMatch(#{enumsMat})\",              spec.isMatch(enumsMat),           true )\ntest( \"isMatch(#{regexpMat})\",             spec.isMatch(regexpMat),          true )\ntest( \"isRange(#{rangeStr})\",              spec.isRange(rangeStr),           true )\ntest( \"isRangea(#{ rangeaTx})\",            spec.isRange(rangea),           true )\ntest( \"isEnums(#{enums})\",              spec.isEnums(enums),           true )\ntest( \"isRegexp(#{regexpTx})\",            spec.isRegexp(regexp),         true )\ntest( \"isResult(#{spec.toStr(resultA)})\", spec.isResult(resultA),        true )\ntest( \"isExpect(#{spec.toStr(expectA)})\", spec.isExpect(expectA),        true )\ntest( \"isCard(#{\"1\"})\",                   spec.isCard(\"1\"),              true )\ntest( \"isIn(type(#{spec.toStr(resultA)}),'results')\", spec.isIn(spec.type(resultA),\"results\"),  true )\ntest().log( test().summary() )\n  \ntest().describe( \"-- to... Spec conversions\" ).op(\"to\").on()\ntest( \"toSpec(#{rangeStr})\",            spec.toSpec(rangeStr),         rangeSpec  )\ntest( \"toSpec(#{enumsStr})\",            spec.toSpec(enumsStr),         enumsSpec  )\ntest( \"toSpec(#{regexpStr})\",           spec.toSpec(regexpStr),        regexpSpec )\ntest( \"toSpecParse(#{rangeStr})\",       spec.toSpecParse(rangeStr),    rangeSpec  )\ntest( \"toSpecParse(#{enumsStr})\",       spec.toSpecParse(enumsStr),    enumsSpec  )\ntest( \"toSpecParse(#{regexpStr})\",      spec.toSpecParse(regexpStr),   regexpSpec )\ntest( \"toSpecObject(#{rangeSpecStr})\",  spec.toSpecObject(rangeSpec),  rangeSpec  )\ntest( \"toSpecObject(#{enumsSpecStr})\",  spec.toSpecObject(enumsSpec),  enumsSpec  )\ntest( \"toSpecObject(#{regexpSpecStr})\", spec.toSpecObject(regexpSpec), regexpSpec )\ntest( \"toRange(#{rangeTx})\",            spec.toRange(rangeTx),         range      )\ntest( \"toEnums(#{enumsTx})\",            spec.toEnums(enums),           enums      )\ntest( \"toRegexp(#{regexpTx})\",          spec.toRegexp(regexpTx),       regexp     )\ntest( \"toMinMax(#{'3-6'})\",             spec.toMinMax('3-6'),          [3,6]      )\ntest( \"toSpecInit()\",     spec.toSpecInit(), {type:\"any\",match:\"any\",card:\"1\"} )\ntest().log( test().summary() )\n\ntest().describe( \"-- in... Spec verify\" ).on()\ntest( \"inSpec(#{spec.toStr(resultA)},#{rangeSpecStr})\",      spec.inSpec(resultA,rangeSpec),        true )\ntest( \"inSpec(#{resultE},#{enumsSpecStr})\",                  spec.inSpec(resultE,enumsSpec),        true )\ntest( \"inSpec(#{resultR},#{regexpSpecStr})\",                 spec.inSpec(resultR,regexpSpec),       true )\ntest( \"inSpecArray(#{spec.toStr(resultA)},#{rangeSpecStr})\", spec.inSpecArray(resultA,rangeSpec),   true )\ntest( \"inSpecObject(#{resultO},#{objectSpecStr})\",           spec.inSpecObject(resultO,objectSpec), true )\ntest( \"inRange(#{spec.toStr(resultA)},#{range})\",            spec.inRange(resultA,range),           true )\ntest( \"inEnums(#{resultE},#{enums})\",                        spec.inEnums(resultE,enums),           true )\ntest( \"inRegexp(#{resultR},#{regexp})\",                      spec.inRegexp(resultR,regexp),         true )\ntest( \"inCard(#{resultA},#{rangeSpecStr})\",                  spec.inCard(resultA,rangeSpec),        true )\ntest().log( test().summary() )\n\n"
  ]
}
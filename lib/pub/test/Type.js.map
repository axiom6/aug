{
  "version": 3,
  "file": "Type.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Type\n  \n  comstructor:() ->\n    @warned  = \"\"\n    @lasted  = \"\"\n    @logging = true\n    @log     = console.log\n    @error   = console.error\n\n  # An improved typeof() that follows the convention by returning types in lower case by default.\n  # The basic types similar to typeof() returned are:\n\n  type:(arg,lowerCase=true) =>\n    str = Object::toString.call(arg)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    typ = if typ is \"Number\" and     Number.isInteger(arg) then \"Int\"   else typ # Previous CoffeeScript issue\n    typ = if typ is \"Number\" and not Number.isInteger(arg) then \"Float\" else typ  #  with return on nested if's\n    if lowerCase then typ.toLowerCase() else typ\n\n  # A more detail type that returns basic types, class, object and function name in upper case\n  klass:(arg) ->\n    typ = @type(arg,false) # Start with basic type to catch \"Null\" and \"Undefined\"\n    switch typ\n      when \"Null\"      then \"Null\"\n      when \"Undefined\" then \"Undefined\"\n      when \"Function\"  then arg.name\n      when \"Object\"    then arg.constructor.name\n      else                  typ\n    \n  # The 9 fundamental type Assertions that leverage @type(arg) the improved typeof(arg)\n  # In addition isInt isFloat isBoolean isArray isObject can optionally chech strings\n  isStr:(s)      ->   @isType(s,\"string\") and s.length > 0 and s isnt \"None\"\n  isInt:(i)      -> ( @isType(i,\"int\")   and not isNaN(i) ) or ( @isType(i,\"string\") and @isStrInt(i)     )\n  isFloat:(f)    -> ( @isType(f,\"float\") and not isNaN(f) ) or ( @isType(f,\"string\") and @isStrFloat(f)   )\n  isBoolean:(b)  ->   @isType(b,\"boolean\")                  or ( @isType(b,\"string\") and @isStrBoolean(b) )\n  isObject:(o)   ->   @isType(o,\"object\")                   or ( @isType(o,\"string\") and @isStrObject(o)  )\n  isRegex:(r)    ->   @isType(r,\"regex\")\n  isFunction:(f) ->   @isType(f,\"function\")\n  isNull:(m)     ->   @isType(m,\"null\")\n  isUndef:(u)    ->   @isType(u,\"undefined\")\n  isBigInt:(b)   ->   typeof(b) is \"bigint\" # Will incorporate into type\n  isSymbol:(s)   ->   typeof(s) is \"symbol\" # Will incorporate into type\n\n  # Set type for asserting uniformly typed arrays and sc=true for determining if a string is an array\n  # isArrayOfType called within @isArray(...) because it assumes array exists\n  #   and returns true for 'null' that signifies that the type assertions\n  #   on the elements should be skipped\n  isArray:( a, type=null, sc=false ) ->\n    return @isStrArray(a) if sc\n    # Internal function that assert that an viable is uniformly types\n    isArrayOfType = (a,t) =>\n      return true if t is 'null'\n      for e in a\n        return false if @type(e) isnt t\n      true\n\n    if @isType(a,\"array\") and a.length? and a.length > 0\n      type = @type( a[0] )\n      isArrayOfType(a,type)\n\n  # General purpose since if checks the array's existence and interate over all the elements\n  isArrayTyped:(a,t) ->\n    return false if not @isArray(a)\n    for e in a\n      return false if @type(e) isnt t\n    true\n\n  # General purpose since if checks the array's existence and interate over all the elements\n  isArrayMixed:(a) ->\n    return false if not @isArray(a)\n    type = @type(a[0])\n    for e in a\n      return false if @type(e) isnt type\n    false\n\n  # Aggregate and special value assertions\n  isType:(v,t)      ->   @type(v) is t\n  isDef:(d)         ->   @type(d) isnt 'null' and @type(d) isnt 'undefined'\n  isNumber:(n)      ->   @isIn( @type(n), \"numbers\" )\n  isNot:(d)         ->   not @isDef(d)\n  isNaN:(n)         ->   Number.isNaN(n) # @isNumber(n) and\n\n  # Containment assertions where args are always ( value, container )\n  inStr:(e,s)     ->  @isStr(s)    and @isDef(e) and s.includes(e)\n  inArray:( e,a)  ->  @isArray(a)  and @isDef(e) and a.includes(e)\n  inObject:(k,o)  ->  @isObject(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n\n  # -- More assertions --\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) ->\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt \"$\" and b isnt \"_\"\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) ->\n    return false if @isNot(e)\n    switch @isType(e)\n      when \"object\" then Object.getOwnPropertyNames(e).length is 0\n      when \"array\"  then e.length is 0\n      when \"string\" then e.length is 0\n      else               false  # Look into\n\n  isStrFloat:( str ) ->\n    if @isStr( str )\n       regex = /^-?\\d+(?:[.,]\\d*?)?$/\n       regex.test(str)\n    else false\n\n  isStrInt:( str ) ->\n    if @isStr( str )\n       regex = /^-?\\d+$/\n       regex.test(str)\n    else false\n\n  isStrBoolean:( str ) ->\n    @isStr(str) and ( str is \"true\" or str is \"false\" )\n\n  isStrArray:( str ) ->\n    @isStrEnclosed( \"[\", str, \"]\" )\n\n  isStrObject:( str ) ->\n    @isStrEnclosed( \"{\", str, \"}\" )\n\n  # Tests if string is enclosed good for [array] and {object}\n  isStrEnclosed:( beg, str, end ) ->\n    if @isStr( str )\n      s = str.trim()\n      s.startsWith(beg) and s.endsWith(end)\n    else false\n\n  # Converters\n  toType:( arg, type ) ->\n    switch type\n      when \"string\"  then @toStr(     arg )\n      when \"int\"     then @toInt(     arg )\n      when \"float\"   then @toFloat(   arg )\n      when \"boolean\" then @toBoolean( arg )\n      when \"array\"   then @toArray(   arg )\n      when \"object\"  then @toObject(  arg )\n      else\n        console.error( \"Type.toType(type,arg) unknown type\", { type:type, arg:arg } )\n        null\n\n  # toEnclose a \"string'\n  # toEnclose(\"abc\",   '\"'  )       # returns \"abc\" - good for JSON keys and values\n  # toEnclose(\"123\",   \"'\"  )       # returns '123'\n  # toEnclose(\"xyz\",   \"()\" )       # returns (xyz)\n  # toEnclose(\"d,e,f\", \"[]\" )       # returns [d,e,f]\n  # toEnclose(\"a:x,b:y,c:z\", \"{}\" ) # returns {a:x,b:y,c:z}\n  toEnclose:( str, enc=\"\" ) ->\n    enclose = switch\n      when enc.length is 2 then \"\"\"#{enc.charAt(0)}#{str}#{enc.charAt(1)}\"\"\"\n      when enc.length is 1 then \"\"\"#{enc.charAt(0)}#{str}#{enc.charAt(0)}\"\"\"\n      else str\n    console.log( \"Type.toEnclose()\", { str:str, enclose:enclose } ) if @debug\n    enclose\n\n  # toStr(arg) avoids conflicts with arg.toString()\n  # This combination of travesal and recursion is cleaner than JSON.stringify()\n  # So far all vaild 13 Type.types a super set of Type.typeofs has been accounted for\n  # Type.typeofs = [\"string\",\"number\",\"boolean\",\"object\",\"function\",\"bigint\",\"symbol\",\"null\",\"undefined\"]\n  # Type.types   = Type.typeofs.concat([\"int\",\"float\",\"array\",\"regex\",\"date\"])\n  toStr:( arg ) ->       # , enc=\"\"\n    type = @type(arg)\n    str = switch type\n      when \"string\"     then arg\n      when \"int\"        then parseInt(arg)\n      when \"float\"      then parseFloat(arg)\n      when \"boolean\"    then if arg then \"true\" else \"false\"\n      when \"object\"     then @toStrObject(arg)\n      when \"array\"      then @toStrArray(arg)\n      when \"null\"       then \"null\"\n      when \"undefined\"  then \"undefined\"\n      when \"function\"   then \"function\"\n      when \"regex\",\"date\",\"bigint\",\"symbol\" then arg.toString()  # hail marys\n      else @toWarn( \"toStr(arg)\", \"unable to convert\", arg, \"string\", \"\", (t) => t.log( t.warn() ) )\n    # console.log( \"toStr(arg)\", { arg:arg, str:str, type:type } )\n    str\n\n    # str = if not @isIn(type,\"manys\") and enc.length > 0 then @toEnclose(str,enc) else str\n    # else  console.log( \"toStr(arg)\", \"unable to convert\", arg, type, \"string\", arg.toString(), arg.toString() )\n    # else  @toWarn( \"toStr(arg)\", \"unable to convert\", arg, type,\n    #              \"string\", arg.toString(), arg.toString(), (t) => t.log( t.warn() ) )\n    # str += key+\":\"+@toEnclose(@toStr(val),'\"')+\",\"\n\n  toStrObject:( obj ) ->\n    str = \"{\"\n    for own key, val of obj\n      str += key + \":\" + @toStr(val) + \",\"\n    str = str.substring(0,str.length-1) # remove trailing comma\n    str += \"}\"\n    str\n\n  toStrArray:( array ) ->\n    str = \"[\"\n    for i in [0...array.length-1]\n      str += @toStr(array[i]) + if i < array.length-2 then \",\" else \"\"\n    str += \"]\"\n    str\n\n  toFloat:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"float\" then arg\n      when \"int\"   then parseFloat(arg.toFixed(1)) # Coerces an 'int' like '1' to a 'float' like '1.0'\n      when \"string\"\n        if @isStrFloat(arg)  then parseFloat(arg)\n        else @toWarn( \"toFloat(arg)\", \"unable to convert\", arg, \"float\", NaN, (t) => t.log( t.warn() ) )\n      else   @toWarn( \"toFloat(arg)\", \"unable to convert\", arg, \"float\", NaN, (t) => t.log( t.warn() ) )\n\n  toInt:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"int\"    then arg\n      when \"float\"  then Math.round(arg)\n      when \"string\"\n        if @isStrInt(arg) then parseInt(arg)\n        else @toWarn( \"toInt(arg)\", \"unable to convert\", arg, \"int\", NaN, (t) => t.log( t.warn() ) )\n      else   @toWarn( \"toInt(arg)\", \"unable to convert\", arg, \"int\", NaN, (t) => t.log( t.warn() ) )\n\n  toBoolean:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"boolean\" then arg\n      when \"string\"\n        switch arg \n          when \"true\"  then  true\n          when \"false\" then false\n          else @toWarn( \"toBoolean(arg)\", \"unable to convert\", arg, \"boolean\", false, (t) => t.log( t.warn() ) )\n      when \"int\"   then arg isnt 0   # check 0   false may not be a convention\n      when \"float\" then arg isnt 0.0 # check 0.0 false may not be a convention\n      else     @toWarn( \"toBoolean(arg)\", \"unable to convert\", arg, \"boolean\", false, (t) => t.log( t.warn() ) )\n\n  toArray:( arg ) ->\n    type = @type(arg)\n    switch  type\n      when \"array\" then arg\n      when \"string\"\n        str = arg.trim()\n        if @head(arg) is \"[\" and @tail(arg) is \"]\" # Strip off brackets\n          arg = @slice(arg,2,arg.length-1)\n        array = []\n        strs  = @slice(arg,2,arg.length-1).split(\",\")\n        for str in strs\n          array.push( @toType( str, type ) )\n        array\n      else @toWarn( \"toArray(arg)\", \"unable to convert\", arg, \"array\", [], (t) => t.log( t.warn() ) )\n\n  toObject:( arg ) ->\n    obj  = {}\n    type = @type(arg)\n    switch type\n      when \"object\"\n        obj = arg\n      when \"array\"\n        obj[i] = arg[i] for i in [0...arg.length]\n      when \"int\",\"float\",\"boolean\",\"function\"\n        obj[type] = arg\n      when \"string\"\n        obj = arg.split(\",\")\n                 .map( (keyVal) => keyVal.split(\":\").map( (arg) => arg.trim() ) )\n                 .reduce( (acc,cur) => acc[cur[0]] = cur[1]; acc )  # {}  acc accumulator cur current\n      else\n        @toWarn( \"toObject(arg)\", \"unable to convert\", arg, \"object\", {}, (t) => t.log( t.warn() ) )\n    obj\n\n  toKeys:(o)      ->\n    if @isObject(o) then Object.keys(o) else []\n\n  hasChild:( obj ) ->\n    for own key, val of obj\n      return true if @isChild(key)\n    false\n\n  childKeys:( obj ) ->\n    vals = []\n    for own key, val of obj\n      vals.push(key) if @isChild(key)\n    vals\n\n  # Return a number with a fixed number of decimal places\n  toFixed:( arg, dec=2 ) ->\n    num = switch @type(arg)\n      when \"int\",\"float\" then arg\n      when \"string\"      then parseFloat(arg)\n    num.toFixed(dec)\n\n  toCap:( str ) ->\n    str.charAt(0).toUpperCase() + str.substring(1)\n\n  unCap:( str ) ->\n    str.charAt(0).toLowerCase() + str.substring(1)\n\n  head:(v,action=false,pop=false) ->\n    arg = null\n    switch @type(v)\n      when \"array\"\n        switch @type(action)\n          when \"boolean\"\n            arg = v[0]\n            v   = v.shift() if action\n      when \"string\"\n        switch @type(action)\n          when \"boolean\"\n            arg = v.charAt(0)\n            v   = v.substring(1) if action\n          when \"string\" and v.startsWith(action)\n            arg = action\n            v   = v.substring(action.length) if pop\n    pop\n\n  #\n  strip:( str, beg, end ) ->\n    if @isStr(beg) and str.startsWith(beg)\n       str = str.substring(beg.length)\n    if @isStr(end) and str.endsWith(end)\n      str = str.substring(0,str.length-end.length)\n    str\n\n  # Not working completely\n  tail:(v,action=false) ->\n    pop = null\n    switch @type(v)\n      when \"array\"\n        pop = v[v.length-1]\n        v   = v.pop() if @isType(action,\"boolean\") and action\n      when \"string\"\n        switch @type(action)\n          when \"boolean\"\n            pop = v.charAt(v.length-1)\n            v   = v.substring( 0, v.length-1 ) if action\n          when \"string\" and v.endsWith(action)\n            pop = action\n            v   = v.substring(0,v.length-action.length)\n    pop\n\n  # Unlike the built in Array v.slice(beg,end) where beg is a zero-based index and end\n\n  # Here beg starts at 1 and end includes the last position or is set to beg if ommitted\n  #  an array slice( [\"a\",\"b\",\"c\"], 1, 2 ) returns [\"a\",\"b\"]\n  #  an array slice( [\"a\",\"b\",\"c\"], 2    ) returns [\"b\"]\n  #  a string slice( [\"abc\"],       1, 2 ) returns   \"ab\"\n  #  a string slice( [\"abc\"],       2    ) returns   \"b\"\n  # where with Array.slice() it is open\n  slice:( v, beg, end=null, remove=false ) ->\n    end = if @isDef(end) then end else beg\n    pop = null\n    switch @type(v)\n      when \"array\"\n        pop = if remove then v.splice(beg-1,end+1) else v.slice(beg-1,end+1)\n      when \"string\"\n        pop = v.slice(beg-1,end+1)\n        v   = v.substring(0,beg-1) + v.substring(end+1) if remove\n    pop\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = \" \" + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  time:()  ->  new Date().getTime()\n\n  # A deliberate do nothing consumer of arguments and variables\n  noop:( ...args ) ->\n    if args then false\n    return\n\n  # -- Warnings ---\n\n  # A gem methods that appends text along with retrStr to @warn for detailed reporting of inconsistence\n  #  along with a vialble actual return specified by the caller\n  toWarn:( method, text, arg, typeTo, retn, closure=null ) =>\n    warn  = \"#{method} #{text} #{@toStr(arg)} of '#{@type(arg)}' to'#{typeTo}' returning #{@toStr(arg)}\"\n    @doWarn( warn, closure, retn )\n\n  isWarn:( pass, text, type, types, closure=null ) =>\n    return true if pass\n    warn = \"#{text} of type '#{type}' not in '#{types}'\"\n    @doWarn( warn, closure, pass )\n\n  inWarn:( pass, result, expect, oper, spec, text, closure=null ) =>\n    prefix = if pass then \"-- Passed --\" else \"-- Failed --\"\n    condit = if pass then \"matches \"     else \"no match\"\n    warn   = \"#{prefix} #{result} #{condit} #{expect} with oper #{oper} and spec #{spec} #{text}\"\n    @doWarn( warn, closure, pass )\n\n  # (t) => t.log( t.info() )\n  doWarn:( warn, closure, retn ) =>\n     @lasted  = warn\n     @warned += warn\n     closure(@) if @logging and @isFunction(closure)\n     retn\n\n  warn:() =>\n    @lasted\n\n  # console.log( \"Type.isIn(type,key)\", { type:type, key:key, isIn:Type[key].includes(type), types:Type[key] } )\n  isIn:( type, key ) ->\n    if Type[key]?\n       Type[key].includes(type)\n    else\n      @isWarn( false, \"key #{key} missing for\", type, [] )\n      false\n\nType.remove = ( e, a ) ->\n  index = a.indexOf(e)\n  a.splice( index, 1 ) if index > -1\n  a\n\n# All Type[key] arrays\nType.undefs  = [\"null\",\"undefined\"]\nType.numbers = [\"int\",\"float\"]\nType.ranges  = [\"string\",\"int\",\"float\"]\nType.values  = [\"string\",\"int\",\"float\",\"boolean\"]\nType.manys   = [\"object\",\"array\"]\nType.results = [\"string\",\"int\",\"float\",\"boolean\",\"object\",\"array\"]\nType.expects = Type.results.concat([\"schema\",\"range\",\"enums\",\"amy\"])\nType.typeofs = [\"string\",\"number\",\"boolean\",\"object\",\"function\",\"bigint\",\"symbol\",\"null\",\"undefined\"]\nType.types   = Type.typeofs.concat([\"int\",\"float\",\"array\",\"regex\",\"date\"])\nType.types   = Type.remove(\"number\", Type.types ) # number is now either 'int' or 'float'\n\nexport type = new Type() # Export a singleton instence of type\nexport default Type"
  ]
}
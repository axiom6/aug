{
  "version": 3,
  "file": "Type.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Type.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA,IAAA;EAAA;;AAAM,OAAN,MAAA,KAAA,CAAA;;EAIE,WAAY,CAAA,CAAA;IACV,IAAC,CAAA,MAAD,GAAW;IACX,IAAC,CAAA,MAAD,GAAW;IACX,IAAC,CAAA,OAAD,GAAW;IACX,IAAC,CAAA,KAAD,GAAW;IACX,IAAC,CAAA,GAAD,GAAW,OAAO,CAAC;WACnB,IAAC,CAAA,KAAD,GAAW,OAAO,CAAC;EANT,CAFd;;;;;EAaE,MAAO,CAAC,GAAD,EAAK,YAAU,IAAf,CAAA;AACT,QAAA,GAAA,EAAA,GAAA,EAAA;IAAI,GAAA,GAAM,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,GAAtB;IACN,GAAA,GAAM,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAc,CAAC,CAAD;IACpB,GAAA,GAAM,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAgB,GAAG,CAAC,MAAJ,GAAW,CAA3B;IACN,GAAA,GAAM,IAAC,CAAA,WAAD,CAAc,GAAd,EAAmB,GAAnB;IACN,IAAG,SAAH;aAAkB,GAAG,CAAC,WAAJ,CAAA,EAAlB;KAAA,MAAA;aAAyC,IAAzC;;EALK,CAbT;;;EAqBE,WAAY,CAAE,GAAF,EAAO,GAAP,CAAA;AACV,YAAA,KAAA;AAAA,WACO,GAAA,KAAO,QADd;QAEI,IAAG,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAH;iBAA8B,MAA9B;SAAA,MAAA;iBAA2C,QAA3C;;AADG;AADP,aAGO,GAAA,KAAO,QAAP,IAAoB,IAAC,CAAA,UAAD,CAAY,GAAZ,EAAgB,GAAhB,EAAoB,GAApB,EAH3B;QAII,IAAG,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAH;iBAA8B,QAA9B;SAAA,MAAA;iBAA2C,QAA3C;;;AAJJ;eAMI;AANJ;EADU,CArBd;;;EA+BE,OAAQ,CAAC,GAAD,CAAA;AACV,QAAA;IAAI,GAAA,GAAM,IAAC,CAAA,MAAD,CAAQ,GAAR,EAAY,KAAZ,EAAV;AACI,YAAO,GAAP;AAAA,WACO,MADP;eACwB;AADxB,WAEO,WAFP;eAEwB;AAFxB,WAGO,UAHP;eAGwB,GAAG,CAAC;AAH5B,WAIO,QAJP;eAIwB,GAAG,CAAC,WAAW,CAAC;AAJxC;eAKwB;AALxB;EAFM,CA/BV;;;;;EA0CE,KAAM,CAAC,CAAD,CAAA;WAAc,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAwB,CAAC,CAAC,MAAF,GAAW,CAAnC,IAAyC,CAAA,KAAO;EAA9D;;EACN,KAAM,CAAC,CAAD,CAAA;WAAY,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,KAAV,CAAA,IAAuB,CAAI,KAAA,CAAM,CAAN,CAA7B,CAAA,IAA2C,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAwB,IAAC,CAAA,QAAD,CAAU,CAAV,CAA1B;EAAvD;;EACN,OAAQ,CAAC,CAAD,CAAA;WAAU,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,OAAV,CAAA,IAAuB,CAAI,KAAA,CAAM,CAAN,CAA7B,CAAA,IAA2C,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAwB,IAAC,CAAA,UAAD,CAAY,CAAZ,CAA1B;EAArD;;EACR,SAAU,CAAC,CAAD,CAAA;WAAU,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,SAAV,CAAA,IAAyC,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAwB,IAAC,CAAA,YAAD,CAAc,CAAd,CAA1B;EAAnD;;EACV,OAAQ,CAAC,CAAD,CAAA;WAAU,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,OAAV,CAAA,IAAuB,CAAC,CAAC,MAAF,GAAW,CAApC,CAAA,IAA2C,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAwB,IAAC,CAAA,UAAD,CAAY,CAAZ,CAA1B;EAArD;;EACR,QAAS,CAAC,CAAD,CAAA;WAAW,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAyC,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV,CAAA,IAAwB,IAAC,CAAA,WAAD,CAAa,CAAb,CAA1B;EAApD;;EACT,QAAS,CAAC,CAAD,CAAA;WAAW,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,QAAV;EAAX;;EACT,UAAW,CAAC,CAAD,CAAA;WAAS,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,UAAV;EAAT;;EACX,MAAO,CAAC,CAAD,CAAA;WAAa,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,MAAV;EAAb;;EACP,OAAQ,CAAC,CAAD,CAAA;WAAY,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAU,WAAV;EAAZ;;EACR,QAAS,CAAC,CAAD,CAAA;WAAW,OAAO,CAAP,KAAa,SAAxB;EAAA;;EACT,QAAS,CAAC,CAAD,CAAA;WAAW,OAAO,CAAP,KAAa,SAAxB;EAAA,CArDX;;;;EAwDE,YAAa,CAAC,CAAD,EAAG,CAAH,CAAA;AACf,QAAA,CAAA,EAAA,CAAA,EAAA;IAAI,IAAgB,CAAI,IAAC,CAAA,OAAD,CAAS,CAAT,CAApB;AAAA,aAAO,MAAP;;IACA,KAAA,qCAAA;;MACE,IAAgB,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAA,KAAgB,CAAhC;AAAA,eAAO,MAAP;;IADF;WAEA;EAJW,CAxDf;;;EA+DE,YAAa,CAAC,CAAD,CAAA;AACf,QAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA;IAAI,IAAgB,CAAI,IAAC,CAAA,OAAD,CAAS,CAAT,CAApB;AAAA,aAAO,MAAP;;IACA,IAAA,GAAO,IAAC,CAAA,MAAD,CAAQ,CAAC,CAAC,CAAD,CAAT;IACP,KAAA,qCAAA;;MACE,IAAe,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAA,KAAgB,IAA/B;AAAA,eAAO,KAAP;;IADF;WAEA;EALW,CA/Df;;;EAuEE,MAAO,CAAC,CAAD,EAAG,CAAH,CAAA;WAAgB,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAA,KAAc;EAA9B;;EACP,KAAM,CAAC,CAAD,CAAA;WAAiB,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAA,KAAgB,MAAhB,IAA2B,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAA,KAAgB;EAA5D;;EACN,QAAS,CAAC,CAAD,CAAA;WAAc,IAAC,CAAA,IAAD,CAAO,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAP,EAAmB,SAAnB;EAAd;;EACT,KAAM,CAAC,CAAD,CAAA;WAAiB,CAAI,IAAC,CAAA,KAAD,CAAO,CAAP;EAArB;;EACN,KAAM,CAAC,CAAD,CAAA;WAAiB,MAAM,CAAC,KAAP,CAAa,CAAb,EAAjB;EAAA,CA3ER;;;;EA8EE,KAAM,CAAC,CAAD,EAAG,CAAH,CAAA;WAAc,IAAC,CAAA,KAAD,CAAO,CAAP,CAAA,IAAiB,IAAC,CAAA,KAAD,CAAO,CAAP,CAAjB,IAA+B,CAAC,CAAC,QAAF,CAAW,CAAX;EAA7C;;EACN,OAAQ,CAAE,CAAF,EAAI,CAAJ,CAAA;WAAY,IAAC,CAAA,OAAD,CAAS,CAAT,CAAA,IAAiB,IAAC,CAAA,KAAD,CAAO,CAAP,CAAjB,IAA+B,CAAC,CAAC,QAAF,CAAW,CAAX;EAA3C;;EACR,QAAS,CAAC,CAAD,EAAG,CAAH,CAAA;WAAW,IAAC,CAAA,QAAD,CAAU,CAAV,CAAA,IAAiB,IAAC,CAAA,KAAD,CAAO,CAAC,CAAC,CAAD,CAAR,CAAjB,IAAkC,CAAC,CAAC,cAAF,CAAiB,CAAjB;EAA7C,CAhFX;;;;;EAqFE,OAAS,CAAC,GAAD,CAAA;AACX,QAAA,CAAA,EAAA;IAAI,CAAA,GAAI,GAAG,CAAC,MAAJ,CAAW,CAAX;IACJ,CAAA,GAAI,GAAG,CAAC,MAAJ,CAAW,GAAG,CAAC,MAAJ,GAAa,CAAxB;WACJ,CAAA,KAAK,CAAC,CAAC,WAAF,CAAA,CAAL,IAAyB,CAAA,KAAO,GAAhC,IAAwC,CAAA,KAAO;EAHxC,CArFX;;;EA2FE,OAAQ,CAAC,CAAD,CAAA;IACN,IAAgB,IAAC,CAAA,KAAD,CAAO,CAAP,CAAhB;AAAA,aAAO,MAAP;;AACA,YAAO,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAP;AAAA,WACO,QADP;eACqB,MAAM,CAAC,mBAAP,CAA2B,CAA3B,CAA6B,CAAC,MAA9B,KAAwC;AAD7D,WAEO,OAFP;eAEqB,CAAC,CAAC,MAAF,KAAY;AAFjC,WAGO,QAHP;eAGqB,CAAC,CAAC,MAAF,KAAY;AAHjC;eAIqB,MAJrB;AAAA;EAFM;;EAQR,QAAS,CAAE,GAAF,CAAA;AACX,QAAA;IAAI,IAAG,IAAC,CAAA,KAAD,CAAQ,GAAR,CAAH;MACE,MAAA,GAAS;aACT,MAAM,CAAC,IAAP,CAAY,GAAZ,EAFF;KAAA,MAAA;aAGK,MAHL;;EADO;;EAMT,UAAW,CAAE,GAAF,CAAA;AACb,QAAA;IAAI,IAAG,IAAC,CAAA,KAAD,CAAQ,GAAR,CAAH;MACG,MAAA,GAAS;aACT,MAAM,CAAC,IAAP,CAAY,GAAZ,EAFH;KAAA,MAAA;aAGK,MAHL;;EADS;;EAMX,YAAa,CAAE,GAAF,CAAA;WACX,IAAC,CAAA,KAAD,CAAO,GAAP,CAAA,IAAgB,CAAE,GAAA,KAAO,MAAP,IAAiB,GAAA,KAAO,OAA1B;EADL;;EAGb,UAAW,CAAE,GAAF,CAAA;WACT,IAAC,CAAA,UAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB;EADS;;EAGX,WAAY,CAAE,GAAF,CAAA;WACV,IAAC,CAAA,UAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB;EADU,CArHd;;;;;EA2HE,SAAU,CAAE,GAAF,EAAO,IAAP,CAAA;AACR,YAAO,IAAP;AAAA,WACO,QADP;AAAA,WACgB,OADhB;AAAA,WACwB,OADxB;eACqC,IAAC,CAAA,KAAD,CAAO,GAAP;AADrC,WAEO,KAFP;eAEsB,IAAC,CAAA,KAAD,CAAY,GAAZ;AAFtB,WAGO,OAHP;eAGsB,IAAC,CAAA,OAAD,CAAY,GAAZ;AAHtB,WAIO,SAJP;eAIsB,IAAC,CAAA,SAAD,CAAY,GAAZ;AAJtB,WAKO,OALP;eAKsB,IAAC,CAAA,OAAD,CAAY,GAAZ;AALtB,WAMO,QANP;eAMsB,IAAC,CAAA,QAAD,CAAY,GAAZ;AANtB;QAQI,IAAC,CAAA,GAAD,CAAM,0BAAN,EAAkC;UAAE,GAAA,EAAI,GAAN;UAAW,IAAA,EAAK;QAAhB,CAAlC;eACA;AATJ;EADQ,CA3HZ;;;;;;;;;;EAgJE,OAAQ,CAAE,GAAF,EAAO,eAAa,KAApB,CAAA;AACV,QAAA;IAAI,IAAG,CAAK,IAAC,CAAA,KAAD,CAAO,GAAP,CAAR;MACE,GAAA,GAAM,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,CAAZ,EAAe,YAAf;MACN,IAA6E,IAAC,CAAA,KAA9E;QAAA,IAAC,CAAA,GAAD,CAAM,wBAAN,EAAgC;UAAE,GAAA,EAAI,GAAN;UAAW,GAAA,EAAI,GAAf;UAAoB,IAAA,EAAK,IAAC,CAAA,MAAD,CAAQ,GAAR;QAAzB,CAAhC,EAAA;;AACA,aAAO,IAHT;;IAIA,GAAA;AAAM,cAAA,KAAA;AAAA,cACC,IAAC,CAAA,QAAD,CAAU,GAAV,CADD;iBACyB,IAAC,CAAA,KAAD,CAAO,GAAP;AADzB,cAEC,IAAC,CAAA,UAAD,CAAY,GAAZ,CAFD;iBAEyB,IAAC,CAAA,OAAD,CAAS,GAAT;AAFzB,cAGC,IAAC,CAAA,YAAD,CAAc,GAAd,CAHD;iBAGyB,IAAC,CAAA,SAAD,CAAW,GAAX;AAHzB,cAIC,IAAC,CAAA,UAAD,CAAY,GAAZ,CAJD;iBAIyB,IAAC,CAAA,OAAD,CAAS,GAAT;AAJzB,cAKC,IAAC,CAAA,WAAD,CAAa,GAAb,CALD;iBAKyB,IAAC,CAAA,QAAD,CAAU,GAAV;AALzB,cAMC,IAAC,CAAA,KAAD,CAAO,GAAP,CAND;iBAMyB,IANzB;AAAA;UAQF,IAAoE,IAAC,CAAA,KAArE;YAAA,IAAC,CAAA,GAAD,CAAM,wBAAN,EAAgC;cAAE,GAAA,EAAI,GAAN;cAAW,IAAA,EAAK,IAAC,CAAA,MAAD,CAAQ,GAAR;YAAhB,CAAhC,EAAA;;iBACA;AATE;;IAUN,IAAoF,IAAC,CAAA,KAArF;MAAA,OAAO,CAAC,GAAR,CAAa,wBAAb,EAAuC;QAAE,GAAA,EAAI,GAAN;QAAW,GAAA,EAAI,GAAf;QAAoB,IAAA,EAAK,IAAC,CAAA,MAAD,CAAQ,GAAR;MAAzB,CAAvC,EAAA;;WACA;EAhBM;;EAkBR,MAAO,CAAG,GAAH,CAAA;WACL,IAAC,CAAA,KAAD,CAAQ,GAAR,EAAa,CAAb,EAAgB,GAAG,CAAC,MAAJ,GAAW,CAA3B;EADK,CAlKT;;;EAsKE,aAAc,CAAE,GAAF,CAAA;AAChB,QAAA,GAAA,EAAA;IAAI,GAAA,GAAS,CAAI,IAAC,CAAA,KAAD,CAAO,GAAP,CAAP,GAAwB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAW,CAAX,EAAa,IAAb,CAAxB,GAAgD;IACtD,GAAA,GAAS,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAH,GAA0B,GAAG,CAAC,UAAJ,CAAe,GAAf,EAAmB,GAAnB,CAA1B,GAAuD,IADjE;IAEI,GAAA,GAAM,GAAG,CAAC,QAAJ,CAAa,GAAb;IACN,GAAA,GAAS,GAAH,GAAY,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,CAAZ,GAA6C;IACnD,IAA2E,IAAC,CAAA,KAA5E;MAAA,OAAO,CAAC,GAAR,CAAa,yBAAb,EAAwC;QAAE,GAAA,EAAI,GAAN;QAAW,GAAA,EAAI,GAAf;QAAoB,GAAA,EAAI;MAAxB,CAAxC,EAAA;;WACA;EANY,CAtKhB;;;;EAgLE,UAAW,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAA;WACT,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAA,KAAiB,GAAjB,IAAyB,GAAG,CAAC,MAAJ,CAAW,GAAG,CAAC,MAAJ,GAAW,CAAtB,CAAA,KAA4B;EAD5C,CAhLb;;;;;;;;EAyLE,SAAU,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAA;AACR,YAAA,KAAA;AAAA,YACO,IAAC,CAAA,UAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CADP;eACyC,IADzC;AAAA;eAEO,CAAA,CAAA,CAAK,GAAL,CAAA,CAAA,CAAW,GAAX,CAAA,CAAA,CAAiB,GAAjB,CAAA;AAFP;EADQ,CAzLZ;;;;;;;EAmME,KAAM,CAAE,GAAF,EAAO,QAAM,CAAb,EAAgB,eAAa,KAA7B,EAAoC,aAAW,KAA/C,CAAA;AACR,QAAA,GAAA,EAAA;IAAI,IAAA,GAAO,IAAC,CAAA,MAAD,CAAQ,GAAR;IACP,GAAA;AAAM,cAAO,IAAP;AAAA,aACC,QADD;AAAA,aACU,OADV;AAAA,aACkB,OADlB;AAAA,aAC0B,KAD1B;UAEF,IAAG,YAAH;mBAAqB,IAAC,CAAA,SAAD,CAAW,GAAX,EAAe,GAAf,EAAmB,GAAnB,EAArB;WAAA,MAAA;mBAAkD,IAAlD;;AAD4B;AAD1B,aAGC,KAHD;iBAGmB,QAAA,CAAS,GAAT;AAHnB,aAIC,OAJD;iBAImB,UAAA,CAAW,GAAX;AAJnB,aAKC,SALD;UAKmB,IAAG,GAAH;mBAAY,OAAZ;WAAA,MAAA;mBAAwB,QAAxB;;AAAlB;AALD,aAMC,OAND;iBAMmB,IAAC,CAAA,UAAD,CAAc,GAAd,EAAmB,KAAnB,EAA0B,YAA1B;AANnB,aAOC,QAPD;iBAOmB,IAAC,CAAA,WAAD,CAAc,GAAd,EAAmB,KAAnB,EAA0B,YAA1B,EAAwC,UAAxC;AAPnB,aAQC,MARD;iBAQmB;AARnB,aASC,WATD;iBASmB;AATnB,aAUC,UAVD;iBAUmB;AAVnB,aAWC,QAXD;iBAWmB,IAAC,CAAA,SAAD,CAAW,GAAX,EAAe,GAAG,CAAC,QAAJ,CAAA,CAAf,EAA8B,GAA9B,EAXnB;AAAA,aAYC,QAZD;AAAA,aAYU,MAZV;AAAA,aAYiB,QAZjB;iBAY+B,GAAG,CAAC,QAAJ,CAAA,EAZ/B;AAAA;UAcF,IAAC,CAAA,GAAD,CAAM,iBAAN,EAAyB;YAAE,GAAA,EAAI,GAAN;YAAW,IAAA,EAAK,IAAC,CAAA,MAAD,CAAQ,GAAR;UAAhB,CAAzB;iBACA;AAfE;;WAgBN;EAlBI;;EAoBN,WAAY,CAAE,GAAF,CAAA;WACV,IAAC,CAAA,KAAD,CAAQ,GAAR,EAAa,CAAb,EAAgB,IAAhB,EAAsB,IAAtB;EADU,CAvNd;;;;;;;;EAgOE,WAAY,CAAE,GAAF,EAAO,QAAM,CAAb,EAAgB,eAAa,KAA7B,EAAoC,aAAW,KAA/C,CAAA;AACd,QAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAI,GAAA,GAAM;IACN,KAAA,UAAA;;;MACE,IAAA,GAAU,UAAH,GAAmB,IAAC,CAAA,SAAD,CAAW,GAAX,EAAe,GAAf,EAAmB,GAAnB,CAAnB,GAAgD;MACvD,GAAA,IAAO,IAAA,GAAO,GAAP,GAAa,IAAC,CAAA,KAAD,CAAO,GAAP,EAAW,EAAE,KAAb,EAAmB,YAAnB,EAAgC,UAAhC,CAAb,GAA2D;IAFpE;IAGA,GAAA,GAAM,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAgB,GAAG,CAAC,MAAJ,GAAW,CAA3B,EAJV;IAKI,GAAA,IAAO;IACP,IAAG,KAAA,KAAS,CAAZ;aAAmB,IAAC,CAAA,aAAD,CAAe,GAAf,EAAnB;KAAA,MAAA;aAA4C,IAA5C;;EAPU,CAhOd;;;EA0OE,UAAW,CAAE,KAAF,EAAS,QAAM,CAAf,EAAkB,eAAa,KAA/B,CAAA;AACb,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAI,GAAA,GAAM;IACN,KAAS,uFAAT;MACE,GAAA,IAAO,IAAC,CAAA,KAAD,CAAO,KAAK,CAAC,CAAD,CAAZ,EAAgB,EAAE,KAAlB,EAAyB,YAAzB;MACP,GAAA,IAAU,CAAA,GAAI,KAAK,CAAC,MAAN,GAAa,CAApB,GAA2B,GAA3B,GAAoC;IAF7C;IAGA,GAAA,IAAO;IACP,IAAG,KAAA,KAAS,CAAZ;aAAmB,IAAC,CAAA,aAAD,CAAe,GAAf,EAAnB;KAAA,MAAA;aAA4C,IAA5C;;EANS;;EAQX,OAAQ,CAAE,GAAF,CAAA;AACV,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,MAAD,CAAQ,GAAR;AACP,YAAO,IAAP;AAAA,WACO,OADP;eACoB;AADpB,WAEO,KAFP;eAEoB,UAAA,CAAW,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAX,EAFpB;AAAA,WAGO,QAHP;QAII,IAAG,IAAC,CAAA,UAAD,CAAY,GAAZ,CAAH;iBAA0B,UAAA,CAAW,GAAX,EAA1B;SAAA,MAAA;;iBAEK,IAFL;;AADG;AAHP;;eAQO;AARP;EAFM;;EAYR,KAAM,CAAE,GAAF,CAAA;AACR,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,MAAD,CAAQ,GAAR;AACP,YAAO,IAAP;AAAA,WACO,KADP;eACqB;AADrB,WAEO,OAFP;eAEqB,IAAI,CAAC,KAAL,CAAW,GAAX;AAFrB,WAGO,QAHP;QAII,IAAG,IAAC,CAAA,QAAD,CAAU,GAAV,CAAH;iBAAuB,QAAA,CAAS,GAAT,EAAvB;SAAA,MAAA;;iBAEK,IAFL;;AADG;AAHP;;eAQO;AARP;EAFI;;EAYN,SAAU,CAAE,GAAF,CAAA;AACZ,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,MAAD,CAAQ,GAAR;AACP,YAAO,IAAP;AAAA,WACO,SADP;eACsB;AADtB,WAEO,QAFP;AAGI,gBAAO,GAAP;AAAA,eACO,MADP;mBACqB;AADrB,eAEO,OAFP;mBAEoB;AAFpB;mBAGO,IAAC,CAAA,MAAD,CAAS,gBAAT,EAA2B,mBAA3B,EAAgD,GAAhD,EAAqD,SAArD,EAAgE,KAAhE,EAAuE,QAAA,CAAC,CAAD,CAAA;qBAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;YAAP,CAAvE;AAHP;AADG;AAFP,WAOO,KAPP;eAOoB,GAAA,KAAS,EAP7B;AAAA,WAQO,OARP;eAQoB,GAAA,KAAS,IAR7B;AAAA;;eAUO;AAVP;EAFQ;;EAcV,OAAQ,CAAE,GAAF,CAAA;AACV,QAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA;AAAI,YAAQ,IAAC,CAAA,MAAD,CAAQ,GAAR,CAAR;AAAA,WACO,OADP;eACoB;AADpB,WAEO,QAAA,IAAc,IAAC,CAAA,UAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAFrB;QAGI,GAAA,GAAS,IAAC,CAAA,KAAD,CAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB;QACT,KAAA,GAAS;QACT,MAAA,GAAS,GAAG,CAAC,KAAJ,CAAU,GAAV;QACT,KAAA,0CAAA;;UACE,KAAK,CAAC,IAAN,CAAY,IAAC,CAAA,OAAD,CAAS,KAAT,CAAZ;QADF;eAEA;AARJ;eASO;AATP;EADM;;EAYR,QAAS,CAAE,GAAF,CAAA;AACX,QAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAI,GAAA,GAAO,CAAA;IACP,IAAA,GAAO,IAAC,CAAA,MAAD,CAAQ,GAAR;AACP,YAAA,KAAA;AAAA,WACO,IAAA,KAAQ,QADf;QAEI,GAAA,GAAM;AADH;AADP,aAGO,IAAA,KAAQ,QAAR,IAAqB,IAAC,CAAA,UAAD,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAH5B;QAII,GAAA,GAAM,IAAC,CAAA,KAAD,CAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB;QACN,GAAA,GAAM,CAAA;QACN,SAAA,GAAY,GAAG,CAAC,KAAJ,CAAU,GAAV;QACZ,KAAA,6CAAA;;UACE,CAAC,GAAD,EAAK,KAAL,CAAA,GAAc,QAAQ,CAAC,KAAT,CAAe,GAAf;UACd,GAAG,CAAC,GAAD,CAAH,GAAc;QAFhB;;AAPJ;QAWI,GAAA,GAAM,CAAA;AAXV;WAYA;EAfO;;EAiBT,YAAa,CAAE,GAAF,CAAA;IACX,IAAG,IAAC,CAAA,QAAD,CAAU,GAAV,CAAH;aAAuB,GAAG,CAAC,WAAW,CAAC,KAAvC;KAAA,MAAA;aAAiD,OAAjD;;EADW,CArTf;;;EAyTE,cAAe,CAAG,IAAH,EAAS,QAAM,IAAf,CAAA;AACjB,QAAA;IAAI,IAAA,GAAU,IAAC,CAAA,UAAD,CAAa,IAAb,CAAH,GAA4B,IAAI,CAAC,IAAI,CAAC,OAAV,CAAmB,QAAnB,EAA6B,EAA7B,CAA5B,GAAmE;IAC1E,IAAA,GAAU,KAAH,GAAc,IAAC,CAAA,KAAD,CAAO,IAAP,CAAd,GAAgC;WACvC;EAHa,CAzTjB;;;;;;EAkUE,CAAE,CAAC,GAAD,CAAA;AACJ,QAAA;IAAI,GAAA,GAAS,IAAC,CAAA,MAAD,CAAQ,GAAR,EAAY,QAAZ,CAAH,GAA8B,IAAC,CAAA,KAAD,CAAO,GAAP,EAAW,CAAX,EAAa,IAAb,CAA9B,GAAsD,IAAC,CAAA,OAAD,CAAS,GAAT,EAAa,IAAb;IAC5D,IAA0D,IAAC,CAAA,KAA3D;MAAA,IAAC,CAAA,GAAD,CAAM;QAAE,CAAA,EAAE,GAAJ;QAAS,GAAA,EAAI,GAAb;QAAkB,GAAA,EAAI,GAAtB;QAA2B,IAAA,EAAK,IAAC,CAAA,MAAD,CAAQ,GAAR;MAAhC,CAAN,EAAA;;WACA;EAHA;;EAKF,MAAO,CAAC,CAAD,CAAA;IACL,IAAG,IAAC,CAAA,QAAD,CAAU,CAAV,CAAH;aAAqB,MAAM,CAAC,IAAP,CAAY,CAAZ,EAArB;KAAA,MAAA;aAAyC,GAAzC;;EADK;;EAGP,QAAS,CAAE,GAAF,CAAA;AACX,QAAA,GAAA,EAAA;IAAI,KAAA,UAAA;;;MACE,IAAe,IAAC,CAAA,OAAD,CAAS,GAAT,CAAf;AAAA,eAAO,KAAP;;IADF;WAEA;EAHO;;EAKT,SAAU,CAAE,GAAF,CAAA;AACZ,QAAA,GAAA,EAAA,GAAA,EAAA;IAAI,IAAA,GAAO;IACP,KAAA,UAAA;;;MACE,IAAkB,IAAC,CAAA,OAAD,CAAS,GAAT,CAAlB;QAAA,IAAI,CAAC,IAAL,CAAU,GAAV,EAAA;;IADF;WAEA;EAJQ,CA/UZ;;;EAsVE,OAAQ,CAAE,GAAF,EAAO,MAAI,CAAX,CAAA;AACV,QAAA;IAAI,GAAA;AAAM,cAAO,IAAC,CAAA,MAAD,CAAQ,GAAR,CAAP;AAAA,aACC,KADD;AAAA,aACO,OADP;iBACoB;AADpB,aAEC,QAFD;iBAEoB,UAAA,CAAW,GAAX;AAFpB;;WAGN,GAAG,CAAC,OAAJ,CAAY,GAAZ;EAJM;;EAMR,KAAM,CAAE,GAAF,CAAA;WACJ,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAa,CAAC,WAAd,CAAA,CAAA,GAA8B,GAAG,CAAC,SAAJ,CAAc,CAAd;EAD1B;;EAGN,KAAM,CAAE,GAAF,CAAA;WACJ,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAa,CAAC,WAAd,CAAA,CAAA,GAA8B,GAAG,CAAC,SAAJ,CAAc,CAAd;EAD1B;;EAGN,IAAK,CAAC,GAAD,CAAA;AACH,YAAO,IAAC,CAAA,MAAD,CAAQ,GAAR,CAAP;AAAA,WACO,OADP;eACqB,GAAG,CAAC,CAAD;AADxB,WAEO,QAFP;eAEqB,GAAG,CAAC,MAAJ,CAAW,CAAX;AAFrB;;eAIO;AAJP;EADG;;EAOL,IAAK,CAAC,GAAD,CAAA;AACH,YAAO,IAAC,CAAA,MAAD,CAAQ,GAAR,CAAP;AAAA,WACO,OADP;eACqB,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAW,CAAZ;AADxB,WAEO,QAFP;eAEqB,GAAG,CAAC,MAAJ,CAAW,GAAG,CAAC,MAAJ,GAAW,CAAtB;AAFrB;;eAIO;AAJP;EADG;;EAOL,KAAM,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAA;IACJ,GAAA,GAAM,GAAG,CAAC,IAAJ,CAAA;IACN,IAAG,IAAC,CAAA,KAAD,CAAO,GAAP,CAAA,IAAgB,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAnB;MACG,GAAA,GAAM,GAAG,CAAC,SAAJ,CAAc,GAAG,CAAC,MAAlB,EADT;;IAEA,IAAG,IAAC,CAAA,KAAD,CAAO,GAAP,CAAA,IAAgB,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAnB;MACE,GAAA,GAAM,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAgB,GAAG,CAAC,MAAJ,GAAW,GAAG,CAAC,MAA/B,EADR;;WAEA;EANI,CAhXR;;;;;;;;;EA+XE,KAAM,CAAE,CAAF,EAAK,GAAL,EAAU,MAAI,IAAd,CAAA;IACJ,GAAA,GAAS,IAAC,CAAA,KAAD,CAAO,GAAP,CAAA,IAAgB,GAAA,IAAO,GAA1B,GAAmC,GAAnC,GAA4C;AAClD,YAAA,KAAA;AAAA,YACO,IAAC,CAAA,OAAD,CAAS,CAAT,CADP;eACwB,CAAC,CAAC,KAAF,CAAQ,GAAA,GAAI,CAAZ,EAAc,GAAd;AADxB,YAEO,IAAC,CAAA,KAAD,CAAO,CAAP,CAFP;eAEwB,CAAC,CAAC,KAAF,CAAQ,GAAA,GAAI,CAAZ,EAAc,GAAd;AAFxB;eAGO;AAHP;EAFI;;EAON,GAAI,CAAE,CAAF,EAAK,CAAL,CAAA;AACN,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAI,GAAA,GAAM,IAAC,CAAA,SAAD,CAAY,CAAZ;IACN,GAAA,GAAM,IAAC,CAAA,SAAD,CAAY,CAAZ;IACN,GAAA,GAAM,CAAC,CAAC,QAAF,CAAA;IACN,KAAS,+FAAT;MACE,GAAA,GAAM,GAAA,GAAM;IADd;WAEA;EANE;;EAQJ,SAAU,CAAE,CAAF,CAAA;WACR,IAAI,CAAC,GAAL,CAAU,IAAI,CAAC,KAAL,CAAY,IAAI,CAAC,KAAL,CAAY,IAAI,CAAC,GAAL,CAAS,CAAT,CAAZ,CAAZ,CAAV,EAAmD,CAAnD,CAAA,GAAyD;EADjD;;EAGV,IAAK,CAAA,CAAA;WACH,IAAI,IAAJ,CAAA,CAAU,CAAC,OAAX,CAAA;EADG,CAjZP;;;EAqZE,IAAK,CAAA,GAAK,IAAL,CAAA;IACH,IAAG,IAAH;MAAa,MAAb;;EADG,CArZP;;;;;;EA6ZE,MAAO,CAAE,MAAF,EAAU,IAAV,EAAgB,GAAhB,EAAqB,MAArB,EAA6B,IAA7B,EAAmC,UAAQ,IAA3C,CAAA;AACT,QAAA;IAAI,IAAA,GAAQ,CAAA,CAAA,CAAG,MAAH,EAAA,CAAA,CAAa,IAAb,EAAA,CAAA,CAAqB,IAAC,CAAA,KAAD,CAAO,GAAP,CAArB,CAAA,KAAA,CAAA,CAAwC,IAAC,CAAA,MAAD,CAAQ,GAAR,CAAxC,CAAA,KAAA,CAAA,CAA4D,MAA5D,CAAA,YAAA,CAAA,CAAiF,IAAC,CAAA,KAAD,CAAO,GAAP,CAAjF,CAAA;WACR,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,OAAf,EAAwB,IAAxB;EAFK;;EAIP,MAAO,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,KAApB,EAA2B,UAAQ,IAAnC,CAAA;AACT,QAAA;IAAI,IAAe,IAAf;AAAA,aAAO,KAAP;;IACA,IAAA,GAAO,CAAA,CAAA,CAAG,IAAH,CAAA,UAAA,CAAA,CAAoB,IAApB,CAAA,UAAA,CAAA,CAAqC,KAArC,CAAA,CAAA;WACP,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,OAAf,EAAwB,IAAxB;EAHK;;EAKP,MAAO,CAAE,IAAF,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,UAAQ,IAAlD,CAAA;AACT,QAAA,MAAA,EAAA,MAAA,EAAA;IAAI,MAAA,GAAY,IAAH,GAAa,cAAb,GAAiC;IAC1C,MAAA,GAAY,IAAH,GAAa,UAAb,GAAiC;IAC1C,IAAA,GAAS,CAAA,CAAA,CAAG,MAAH,EAAA,CAAA,CAAa,MAAb,EAAA,CAAA,CAAuB,MAAvB,EAAA,CAAA,CAAiC,MAAjC,CAAA,WAAA,CAAA,CAAqD,IAArD,CAAA,UAAA,CAAA,CAAsE,IAAtE,EAAA,CAAA,CAA8E,IAA9E,CAAA;WACT,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,OAAf,EAAwB,IAAxB;EAJK,CAtaT;;;EA6aE,MAAO,CAAE,IAAF,EAAQ,OAAR,EAAiB,IAAjB,CAAA;IACJ,IAAC,CAAA,MAAD,GAAW;IACX,IAAC,CAAA,MAAD,IAAW;IACX,IAAc,IAAC,CAAA,OAAD,IAAa,IAAC,CAAA,UAAD,CAAY,OAAZ,CAA3B;MAAA,OAAA,CAAQ,IAAR,EAAA;;WACA;EAJI;;EAMP,IAAK,CAAA,CAAA;WACH,IAAC,CAAA;EADE,CAnbP;;;EAubE,OAAQ,CAAE,GAAF,CAAA;WACN,IAAC,CAAA,MAAD,CAAQ,GAAR,EAAY,OAAZ;EADM,CAvbV;;;EA2bE,OAAQ,CAAE,GAAF,CAAA;AACV,QAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAI,YAAA,KAAA;AAAA,YACO,IAAC,CAAA,MAAD,CAAQ,GAAR,EAAY,OAAZ,CADP;eAEI;AAFJ,YAGO,IAAC,CAAA,OAAD,CAAS,GAAT,CAHP;QAII,KAAA,GAAQ;QACR,KAAS,qFAAT;UACE,KAAA,IAAS,IAAC,CAAA,KAAD,CAAO,GAAG,CAAC,CAAD,CAAV,CAAA,GAAiB;QAD5B;eAEA;AAPJ;eASI;AATJ;EADM;;EAYR,OAAQ,CAAE,MAAF,EAAU,KAAV,CAAA;WACN,KAAK,CAAC,QAAN,CAAe,GAAA,GAAI,MAAJ,GAAW,GAA1B;EADM;;EAGR,IAAK,CAAE,IAAF,EAAQ,GAAR,CAAA;AACH,YAAA,KAAA;AAAA,YACO,IAAC,CAAA,OAAD,CAAS,GAAT,CADP;eAC0B,IAAC,CAAA,OAAD,CAAU,IAAV,EAAgB,GAAhB;AAD1B,YAEO,IAAC,CAAA,OAAD,CAAS,GAAT,CAFP;eAE0B,IAAC,CAAA,OAAD,CAAU,IAAV,EAAgB,IAAC,CAAA,OAAD,CAAS,GAAT,CAAhB;AAF1B,YAGO,IAAC,CAAA,KAAD,CAAO,GAAP,CAHP;eAG0B,IAAC,CAAA,IAAD,CAAM,GAAN,CAAU,CAAC,QAAX,CAAoB,IAApB;AAH1B;;eAKO;AALP;EADG;;EAQL,IAAK,CAAE,GAAF,CAAA;AACH,YAAA,KAAA;AAAA,YACa,aADb;eACuB;AADvB,WAEO,iBAFP;eAEuB,IAAI,CAAC,GAAD;AAF3B;eAGO;AAHP;EADG;;AApdP,EAAA;;;AA2dA,IAAI,CAAC,MAAL,GAAe;;AACf,IAAI,CAAC,OAAL,GAAe;;AACf,IAAI,CAAC,MAAL,GAAe;;AACf,IAAI,CAAC,KAAL,GAAe;;AACf,IAAI,CAAC,MAAL,GAAe;;AACf,IAAI,CAAC,OAAL,GAAe;;AACf,IAAI,CAAC,OAAL,GAAe;;AACf,IAAI,CAAC,OAAL,GAAe;;AACf,IAAI,CAAC,OAAL,GAAe;;AACf,IAAI,CAAC,KAAL,GAAe;;AACf,IAAI,CAAC,KAAL,IAAe;;AACf,IAAI,CAAC,KAAL,GAAe,yBAtef;;AAueA,IAAI,CAAC,KAAL,GAAe,YAvef;;AAyeA,OAAA,IAAO,IAAA,GAAO,IAAI,IAAJ,CAAA,EAzed;;AA0eA,OAAA,QAAe",
  "sourcesContent": [
    "\nclass Type\n\n  # http://jashkenas.github.com/docco/\n  \n  comstructor:() ->\n    @warned  = \"\"\n    @lasted  = \"\"\n    @logging = true\n    @dwgug   = false\n    @log     = console.log\n    @error   = console.error\n\n  # An improved typeof() that follows the convention by returning types in lower case by default.\n  # The 15 types similar to typeof() returned are:\n  # \"|string|int|float|boolean|array|object|enums|range|regexp|null|undefined|function|bigint|symbol|date\"\n  toType:(arg,lowerCase=true) ->\n    str = Object::toString.call(arg)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    typ = @toMoreTypes( typ, arg )\n    if lowerCase then typ.toLowerCase() else typ\n\n  # Detects and converts to 'Int' \"Float' 'Range' 'Enums' types\n  toMoreTypes:( typ, arg ) ->\n    switch\n      when typ is \"Number\"\n        if Number.isInteger(arg) then \"Int\"   else \"Float\"\n      when typ is \"String\" and @isEnclosed(\"|\",arg,\"|\")        # @isEnclosed(\"|\",arg,\"|\") avoids infinite recursion\n        if arg.includes(\"-\")     then \"Range\" else \"Enums\"\n      else\n        typ\n\n# A more detail type that returns basic types, class, object and function name in upper case\n  toKlass:(arg) ->\n    typ = @toType(arg,false) # Start with basic type to catch \"Null\" and \"Undefined\"\n    switch typ\n      when \"Null\"      then \"Null\"\n      when \"Undefined\" then \"Undefined\"\n      when \"Function\"  then arg.name\n      when \"Object\"    then arg.constructor.name\n      else                  typ\n    \n  # The 9 fundamental type Assertions that leverage @toType(arg) the improved typeof(arg)\n  # In addition isInt isFloat isBoolean isArray isObject can optionally chech strings\n  isStr:(s)      ->   @isType(s,\"string\") and s.length > 0 and s isnt \"none\"\n  isInt:(i)      -> ( @isType(i,\"int\")   and not isNaN(i) ) or ( @isType(i,\"string\") and @isStrInt(i)     )\n  isFloat:(f)    -> ( @isType(f,\"float\") and not isNaN(f) ) or ( @isType(f,\"string\") and @isStrFloat(f)   )\n  isBoolean:(b)  ->   @isType(b,\"boolean\")                  or ( @isType(b,\"string\") and @isStrBoolean(b) )\n  isArray:(a)    -> ( @isType(a,\"array\") and a.length > 0 ) or ( @isType(a,\"string\") and @isStrArray(a)   )\n  isObject:(o)   ->   @isType(o,\"object\")                   or ( @isType(o,\"string\") and @isStrObject(o)  )\n  isRegexp:(r)   ->   @isType(r,\"regexp\")\n  isFunction:(f) ->   @isType(f,\"function\")\n  isNull:(m)     ->   @isType(m,\"null\")\n  isUndef:(u)    ->   @isType(u,\"undefined\")\n  isBigInt:(b)   ->   typeof(b) is \"bigint\" # Will incorporate into type\n  isSymbol:(s)   ->   typeof(s) is \"symbol\" # Will incorporate into type\n\n  # General purpose since if checks the array's existence and interate over all the elements\n  isArrayTyped:(a,t) ->\n    return false if not @isArray(a)\n    for e in a\n      return false if @toType(e) isnt t\n    true\n\n  # General purpose since if checks the array's existence and interate over all the elements\n  isArrayMixed:(a) ->\n    return false if not @isArray(a)\n    type = @toType(a[0])\n    for e in a\n      return true if @toType(e) isnt type\n    false\n\n  # Aggregate and special value assertions\n  isType:(v,t)      ->   @toType(v) is t\n  isDef:(d)         ->   @toType(d) isnt 'null' and @toType(d) isnt 'undefined'\n  isNumber:(n)      ->   @isIn( @toType(n), \"numbers\" )\n  isNot:(d)         ->   not @isDef(d)\n  isNaN:(n)         ->   Number.isNaN(n) # @isNumber(n) and\n\n  # Containment assertions where args are always ( value, container )\n  inStr:(e,s)     ->  @isStr(s)    and @isDef(e) and s.includes(e)\n  inArray:( e,a)  ->  @isArray(a)  and @isDef(e) and a.includes(e)\n  inObject:(k,o)  ->  @isObject(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n\n  # -- More assertions --\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) ->\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt \"$\" and b isnt \"_\"\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) ->\n    return false if @isNot(e)\n    switch @isType(e)\n      when \"object\" then Object.getOwnPropertyNames(e).length is 0\n      when \"array\"  then e.length is 0\n      when \"string\" then e.length is 0\n      else               false  # Look into\n\n  isStrInt:( str ) ->\n    if @isStr( str )\n      regexp = /^-?\\d+$/\n      regexp.test(str)\n    else false\n\n  isStrFloat:( str ) ->\n    if @isStr( str )\n       regexp = /^-?\\d+(?:[.,]\\d*?)?$/\n       regexp.test(str)\n    else false\n\n  isStrBoolean:( str ) ->\n    @isStr(str) and ( str is \"true\" or str is \"false\" )\n\n  isStrArray:( str ) ->\n    @isEnclosed( \"[\", str, \"]\" )\n\n  isStrObject:( str ) ->\n    @isEnclosed( \"{\", str, \"}\" )\n\n  # A coerced conversion that can return a value of 'none'\n  # |string|int|float|boolean|array|object|enums|range|regexp|null|undefined|function|bigint|symbol|date\n  # Still need |regexp|null|undefined|function|bigint|symbol|date|\n  toConvert:( arg, type ) ->\n    switch type\n      when \"string\",\"enums\",\"range\" then @toStr(arg)\n      when \"int\"     then @toInt(     arg )\n      when \"float\"   then @toFloat(   arg )\n      when \"boolean\" then @toBoolean( arg )\n      when \"array\"   then @toArray(   arg )\n      when \"object\"  then @toObject(  arg )\n      else\n        @log( \"Type.toConvert(arg,type)\", { arg:arg, type:type } )\n        \"none\"\n\n    ###\n    obj = @toObject(  arg )\n    if not @isType(obj,\"object\")\n      console.log( \"Test.toConvert(arg,type)\", { arg:arg, obj:obj, type:type } )\n    ###\n\n  # A value conversion from a 'string' that can return a value of 'none'\n  # |string|int|float|boolean|array|object|enums|range|regexp|null|undefined|function|bigint|symbol|date\n  # Still need |regexp|null|undefined|function|bigint|symbol|date\n  toValue:( str, encloseValue=false ) ->\n    if not  @isStr(str)\n      val = @toStr(str, 0, encloseValue )\n      @log( \"Type.toValue(str) nots\", { str:str, val:val, type:@toType(str) } ) if @debug\n      return val\n    val = switch\n      when @isStrInt(str)     then @toInt(str)\n      when @isStrFloat(str)   then @toFloat(str)\n      when @isStrBoolean(str) then @toBoolean(str)\n      when @isStrArray(str)   then @toArray(str)\n      when @isStrObject(str)  then @toObject(str)\n      when @isStr(str)        then str     # Also gets 'enums' 'range'\n      else\n        @log( \"Type.toValue(str) else\", { str:str, type:@toType(str) } ) if @debug\n        \"none\"\n    console.log( \"Type.toValue(str) retn\", { str:str, val:val, type:@toType(str) } ) if @debug\n    val\n\n  inside:(  str ) ->\n    @slice( str, 2, str.length-1 )\n\n  # First onvert \\' to \\\" then cnclose an arg in single quotes when double quotes are inside\n  toSingleQuote:( arg ) ->\n    str = if not @isStr(arg) then @toStr(arg,0,true) else arg\n    str = if str.includes(\"'\") then str.replaceAll(\"'\",'\"') else str  # Needs to be more precise\n    has = str.includes('\"')\n    str = if has then @toEnclose( \"'\", str, \"'\" ) else str\n    console.log( \"Type.toSingleQuote(arg)\", { arg:arg, str:str, has:has } ) if @debug\n    str\n\n  # Can't assert @isStr(str) because of possible infinite recursion\n  #  isEnclose can not determine if a final string has been wrapped with \" or '\n  isEnclosed:( beg, str, end ) ->\n    str.charAt(0) is beg and str.charAt(str.length-1) is end\n\n  # toEnclose a \"string'\n  # toEnclose(\"abc\",   '\"'  )       # returns \"abc\" - ? good for JSON keys and values\n  # toEnclose(\"123\",   \"'\"  )       # returns '123'\n  # toEnclose(\"xyz\",   \"()\" )       # returns (xyz)\n  # toEnclose(\"d,e,f\", \"[]\" )       # returns [d,e,f]\n  # toEnclose(\"a:x,b:y,c:z\", \"{}\" ) # returns {a:x,b:y,c:z}\n  toEnclose:( beg, str, end ) ->\n    switch\n      when @isEnclosed( beg, str, end ) then str   # avoids enclosing twice\n      else \"\"\"#{beg}#{str}#{end}\"\"\"\n\n# toStr(arg) avoids conflicts with arg.toString()\n  #  returns \"none\" if unsuccesful\n  # This combination of travesal and recursion is cleaner than JSON.stringify()\n  # A super set of typeof with far all vaild 15 types detected by @toType() plus 'none' and 'any'\n  # \"|string|int|float|boolean|array|object|enums|range|regexp|null|undefined|function|bigint|symbol|date|any|none|\"\n  toStr:( arg, level=0, encloseValue=false, encloseKey=false ) ->\n    type = @toType(arg)\n    str = switch type\n      when \"string\",\"enums\",\"range\",\"any\"\n        if encloseValue then @toEnclose('\"',arg,'\"') else arg # will not enclose more than once\n      when \"int\"        then parseInt(arg)\n      when \"float\"      then parseFloat(arg)\n      when \"boolean\"    then if arg then \"true\" else \"false\"\n      when \"array\"      then @toStrArray(  arg, level, encloseValue )\n      when \"object\"     then @toStrObject( arg, level, encloseValue, encloseKey )\n      when \"null\"       then \"null\"\n      when \"undefined\"  then \"undefined\"\n      when \"function\"   then \"function\"\n      when \"bigint\"     then @toEnclose('\"',arg.toString(),'\"')  # Needs work\n      when \"regexp\",\"date\",\"symbol\" then arg.toString()  # hail marys\n      else\n        @log( \"Type.toStr(arg?\", { arg:arg, type:@toType(arg) } )\n        \"none\"\n    str\n\n  toStringify:( arg ) ->\n    @toStr( arg, 0, true, true )\n\n  # str = if not @isIn(type,\"manys\") and enc.length > 0 then @toEnclose(str,enc) else str\n  # else  console.log( \"toStr(arg)\", \"unable to convert\", arg, type, \"string\", arg.toString(), arg.toString() )\n  # else  @toWarn( \"toStr(arg)\", \"unable to convert\", arg, type,\n  #              \"string\", arg.toString(), arg.toString(), (t) => t.log( t.warn() ) )\n  # str += key+\":\"+@toEnclose(@toStr(val),'\"')+\",\"\n  # Puts single quotes ' around string objects that have double quotes inside\n  toStrObject:( obj, level=0, encloseValue=false, encloseKey=false ) ->\n    str = \"{\"\n    for own key, val of obj\n      okey = if encloseKey then @toEnclose('\"',key,'\"') else key\n      str += okey + \":\" + @toStr(val,++level,encloseValue,encloseKey) + \",\"\n    str = str.substring(0,str.length-1) # remove trailing comma\n    str += \"}\"\n    if level is 0 then @toSingleQuote(str) else str\n\n  # Puts single quotes ' around string objects that have double quotes inside\n  toStrArray:( array, level=0, encloseValue=false ) ->\n    str = \"[\"\n    for i in [0...array.length]\n      str += @toStr(array[i],++level, encloseValue )\n      str += if i < array.length-1 then \",\" else \"\"\n    str += \"]\"\n    if level is 0 then @toSingleQuote(str) else str # Single quotes added nnly when double quotes inside\n\n  toFloat:( arg ) ->\n    type = @toType(arg)\n    switch type\n      when \"float\" then arg\n      when \"int\"   then parseFloat(arg.toFixed(1)) # Coerces an 'int' like '1' to a 'float' like '1.0'\n      when \"string\"\n        if @isStrFloat(arg)  then parseFloat(arg)\n        #lse @toWarn( \"toFloat(arg)\", \"unable to convert\", arg, \"float\", NaN, (t) -> t.log( t.warn() ) )\n        else NaN\n      #lse   @toWarn( \"toFloat(arg)\", \"unable to convert\", arg, \"float\", NaN, (t) -> t.log( t.warn() ) )\n      else NaN\n\n  toInt:( arg ) ->\n    type = @toType(arg)\n    switch type\n      when \"int\"    then arg\n      when \"float\"  then Math.round(arg)\n      when \"string\"\n        if @isStrInt(arg) then parseInt(arg)\n        #lse @toWarn( \"toInt(arg)\", \"unable to convert\", arg, \"int\", NaN, (t) -> t.log( t.warn() ) )\n        else NaN\n      #lse   @toWarn( \"toInt(arg)\", \"unable to convert\", arg, \"int\", NaN, (t) -> t.log( t.warn() ) )\n      else NaN\n\n  toBoolean:( arg ) ->\n    type = @toType(arg)\n    switch type\n      when \"boolean\" then arg\n      when \"string\"\n        switch arg \n          when \"true\"  then  true\n          when \"false\" then false\n          else @toWarn( \"toBoolean(arg)\", \"unable to convert\", arg, \"boolean\", false, (t) -> t.log( t.warn() ) )\n      when \"int\"   then arg isnt 0   # check 0   false may not be a convention\n      when \"float\" then arg isnt 0.0 # check 0.0 false may not be a convention\n      #lse     @toWarn( \"toBoolean(arg)\", \"unable to convert\", arg, \"boolean\", false, (t) -> t.log( t.warn() ) )\n      else false\n\n  toArray:( arg ) ->\n    switch  @toType(arg)\n      when \"array\" then arg\n      when \"string\"  and @isEnclosed( \"[\", arg, \"]\" )\n        arg    = @strip( arg, \"[\", \"]\" )\n        array  = []\n        values = arg.split(\",\")\n        for value in values\n          array.push( @toValue(value) )\n        array\n      else []\n\n  toObject:( arg ) ->\n    obj  = {}\n    type = @toType(arg)\n    switch\n      when type is \"object\"\n        obj = arg\n      when type is \"string\" and @isEnclosed( \"{\", arg, \"}\")\n        arg = @strip( arg, \"{\", \"}\" )\n        obj = {}\n        keyValues = arg.split(\",\")\n        for keyValue in keyValues\n          [key,value] = keyValue.split(\":\")\n          obj[key]    = value\n      else\n        obj = {}\n    obj\n\n  toObjectName:( obj ) ->\n    if @isObject(obj) then obj.constructor.name else \"none\"\n\n  # Assert that func is a 'fuction' then returns name with the annoying 'bound ' removed\n  toFunctionName:(  func, unCap=true ) ->\n    name = if @isFunction( func ) then func.name.replace( \"bound \", \"\" ) else \"none\"\n    name = if unCap then @unCap(name) else name\n    name\n\n  # For extenal use to insure val is expossed to the outside environment\n  #   to have all strings are wrapped in \"\".\n  #   This is accomplished by setting excloseValue true for:\n  #    @toStr(arg,excloseValue) and @toValue(arg,excloseValue)\n  v:(val) ->\n    ret = if @isType(val,'string') then @toStr(val,0,true) else @toValue(val,true)\n    @log( { v:\"v\", ret:ret, val:val, type:@toType(val) } ) if @debug\n    ret\n\n  toKeys:(o)      ->\n    if @isObject(o) then Object.keys(o) else []\n\n  hasChild:( obj ) ->\n    for own key, val of obj\n      return true if @isChild(key)\n    false\n\n  childKeys:( obj ) ->\n    vals = []\n    for own key, val of obj\n      vals.push(key) if @isChild(key)\n    vals\n\n  # Return a number with a fixed number of decimal places\n  toFixed:( arg, dec=2 ) ->\n    num = switch @toType(arg)\n      when \"int\",\"float\" then arg\n      when \"string\"      then parseFloat(arg)\n    num.toFixed(dec)\n\n  toCap:( str ) ->\n    str.charAt(0).toUpperCase() + str.substring(1)\n\n  unCap:( str ) ->\n    str.charAt(0).toLowerCase() + str.substring(1)\n\n  head:(arg) ->\n    switch @toType(arg)\n      when \"array\"  then arg[0]\n      when \"string\" then arg.charAt(0)\n      #lse @toWarn( \"head(arg)\", \"unable to get the first element of\", arg, @toType(arg), null, (t) -> t.log( t.warn() ) )\n      else \"none\"\n\n  tail:(arg) ->\n    switch @toType(arg)\n      when \"array\"  then arg[arg.length-1]\n      when \"string\" then arg.charAt(arg.length-1)\n      #lse @toWarn( \"tail(arg)\", \"unable to get the last element of\", arg, @toType(arg), null, (t) -> t.log( t.warn() ) )\n      else \"none\"\n\n  strip:( str, beg, end ) ->\n    str = str.trim()\n    if @isStr(beg) and str.startsWith(beg)\n       str = str.substring(beg.length)\n    if @isStr(end) and str.endsWith(end)\n      str = str.substring(0,str.length-end.length)\n    str\n\n  # Unlike the built in Array v.slice(beg,end) where beg is a zero-based index and end\n  #  here beg starts at 1 and end includes the last position or is set to beg if ommitted\n  #  an array slice( \"[a\",\"b\",\"c\"], 1, 2 ) returns \"[a\",\"b\"]\n  #  an array slice( \"[a\",\"b\",\"c\"], 2    ) returns \"[b\"]\n  #  a string slice( \"[abc\"],       1, 2 ) returns   \"ab\"\n  #  a string slice( \"[abc\"],       2    ) returns   \"b\"\n  # where with Array.slice() it is open\n  slice:( v, beg, end=null ) ->\n    end = if @isDef(end) and beg <= beg then end else beg\n    switch\n      when @isArray(v) then v.slice(beg-1,end)\n      when @isStr(v)   then v.slice(beg-1,end)\n      else \"\"\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = \" \" + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  time:()  ->\n    new Date().getTime()\n\n  # A deliberate do nothing consumer of arguments and variables\n  noop:( ...args ) ->\n    if args then false\n    return\n\n  # -- Warnings ---\n\n  # A gem methods that appends text along with retrStr to @warn for detailed reporting of inconsistence\n  #  along with a vialble actual return specified by the caller\n  toWarn:( method, text, arg, typeTo, retn, closure=null ) ->\n    warn  = \"#{method} #{text} #{@toStr(arg)} of '#{@toType(arg)}' to'#{typeTo}' returning #{@toStr(arg)}\"\n    @doWarn( warn, closure, retn )\n\n  isWarn:( pass, text, type, types, closure=null ) ->\n    return true if pass\n    warn = \"#{text} of type '#{type}' not in '#{types}'\"\n    @doWarn( warn, closure, pass )\n\n  inWarn:( pass, result, expect, oper, spec, text, closure=null ) ->\n    prefix = if pass then \"-- Passed --\" else \"-- Failed --\"\n    condit = if pass then \"matches \"     else \"no match\"\n    warn   = \"#{prefix} #{result} #{condit} #{expect} with oper #{oper} and spec #{spec} #{text}\"\n    @doWarn( warn, closure, pass )\n\n  # (t) -> t.log( t.info() )\n  doWarn:( warn, closure, retn ) ->\n     @lasted  = warn\n     @warned += warn\n     closure(@) if @logging and @isFunction(closure)\n     retn\n\n  warn:() ->\n    @lasted\n\n  # Moved from Spec.coffee\n  isEnums:( arg ) ->\n    @isType(arg,\"enums\")\n\n  # Leverage the stronger assertions @isStr(arg) and @isArray(arg)\n  toEnums:( arg ) ->\n    switch\n      when @isType(arg,\"enums\")\n        arg\n      when @isArray(arg)\n        enums = \"|\"\n        for i in [0...arg.length]\n          enums += @toStr(arg[i]) + \"|\"\n        enums\n      else\n        \"||\"\n\n  inEnums:( result, enums ) ->\n    enums.includes(\"|\"+result+\"|\")\n\n  isIn:( type, arg ) ->\n    switch\n      when @isArray(arg) then @inArray( type, arg )\n      when @isEnums(arg) then @inArray( type, @toEnums(arg) )\n      when @isStr(arg)   then @toIn(arg).includes(type)\n      #lse @isWarn( false, \"arg #{arg} not 'array', 'enums' or 'string'\", type, false )\n      else false\n\n  toIn:( arg ) ->\n    switch\n      when  not  arg? then \"||\"\n      when Type[arg]? then Type[arg]\n      else \"||\"\n\n# All Type[key] 'enums'. Considering if \"none\" belongs\nType.undefs  = \"|null|undefined|\"\nType.numbers = \"|int|float|\"\nType.values  = \"|string|int|float|boolean|\"\nType.manys   = \"|object|array|\"\nType.ranges  = \"|string|int|float|\"\nType.matches = \"|regexp|range|enums|amy|\"\nType.results = \"|string|int|float|boolean|object|array|\"\nType.expects = \"|string|int|float|boolean|object|array|regexp|range|enums|amy|\"\nType.typeofs = \"|number|string|boolean|object|function|bigint|symbol|null|undefined|\"\nType.types   = \"|string|int|float|boolean|array|object|enums|range|regexp|null|undefined|\"\nType.types  += \"function|bigint|symbol|date|any|none|\"\nType.opers   = \"|to|eq|le|lt|ge|gt|ne|\" # low  level value  based comparison  ooers 'eq' default\nType.cards   = \"|1|?|*|+|\"              # cards  1 required, ? optional, * 0 to many, + 1 to many\n\nexport type = new Type() # Export a singleton instence of type\nexport default Type\n"
  ]
}
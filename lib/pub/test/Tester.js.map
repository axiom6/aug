{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    @stream = null # Optional streaming publisher module that is set by @injectStream( stream )\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    @logToConsole   = true\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its validating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @stringSubject  = \"TestString\"  # Subject for publishing each test status string\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @describe( description, suite )\n    @description = \"\"\n    @suite       = \"\"\n\n    # Accummulate test status state\n    @text         = null # set by test() that is passed inside eq() and sent to run()\n    @statusText   = \"\"\n    @statusClear  = true\n    @blockText    = \"\"\n    @blockClear   = true\n    @code         = \"\"\n    @modules      = {}\n    @passed       = []\n    @failed       = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream       = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @stringSubject  = if options.stringSubject?  then options.stringSubject  else \"TestString\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test -- Pass a closeure in the form of  (t) => { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) => { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test('2 + 3 = 5', (t) ->\n  #     t.eq( add(2,3), 5 ) )\n  test:( text, closure ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text     = text               # @text is latter referenced inside eq()\n    @code     = closure.toString() # @code is latter referenced inside eq()\n    closure(@)\n    @  # returns tester instance for chaining\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  unit:( text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    @run( result, expect, \"eq\" ) # returns tester instance for chaining\n\n  # Validate and diagnose a result that fits a schema both of type 'object' or 'array'\n  #  Very usefull for a result originating from a'.json' file and parsed by JSON.parse(...)\n  #  Very usefull for a schema originating from a'.json' file and parsed by JSON.parse(...)\n  fits:( text, result, schema ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    if @debug\n      console.log( \"Tester.fits(result,schema)\", { type:@type(result), result:result, schema:schema, status:status } )\n    @run( result, schema, \"schema\" )  # returns tester for chaining  is expect = @toSchema( expect, op ) needed?\n\n  eq:( result, expect ) =>\n    @run( result, expect, \"eq\" )\n\n  run:( text, result, expect, op ) =>\n    return @ not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect, op:op } ) if  @debug\n    status = @initStatus( result, expect, op )\n    status = @assert(     result, expect, op, status )\n    @report(              result, expect, op, status )\n    @    # returns tester instance for chaining\n\n  describe:( description, suite=null ) =>\n    @description = description\n    @suite       = if suite? then suite else null\n    @\n\n  initStatus:( result, expect, op ) ->\n    module = text.split('.')[0]\n    eType  = if op is \"schema\" then \"schema\" else @type(expect)\n    {\n      assert:{ text:@text, pass:true, module:module, op:op, code:@code, info:\"\" }\n      result:{ text:\"\", type:@type(result), value:result }\n      expect:{ text:\"\", type:eType,         value:expect }\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(val) so asserions are only test when types match\n  #   Skips over @type(val) = \"function\"\n  assert:( result, expect, status, op, level=0, key=null, index=null ) ->\n\n    # Covert expect to a schema object if op is schema\n    expect = @toSchema(expect,op)\n\n    # Check values and types\n    status = @checkValuesTypes( result, expect, status, op, key, index )\n\n    # Perform all comparisions\n    if status.assert.pass\n       status = switch @type(result)\n         when 'string','number','boolean' then @valuesEq(   result, expect, status, op )\n         when 'object'                    then @objectsEq(  result, expect, status, op, level )\n         when 'array'                     then @arraysEq(   result, expect, status, op, level )\n         else                                  @unknownsEq( result, expect, status )  # just a fallback\n       @examine( status.assert.pass, result, expect, status, op, \"\", key, index )\n\n    # Store status in @passed and @failed arrays\n    if level is 0\n       @passed.push(status) if     status.assert.pass\n       @failed.push(status) if not status.assert.pass\n    status\n\n  # Generates informative text in status\n  examine:( pass, result, expect, status, op, info, key, index ) ->\n    expect = if op is \"schema\" and not isSchema(expect) then @toSchema(expect,op) else expect\n    value  = if op is \"schema\" then expect.value else expect\n    eType  = if op is \"schema\" then expect.type  else @type(expect)\n    prefix = if pass then \"-- Passed -- \" else \"-- Failed -- \"\n    status.assert.text   = prefix + status.assert.text\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.assert.info  += info\n    status.assert.code   = if @isStr(@code) then @code else \"\"\n    status.result.text  += @textValue( \"Result\", @type(result), result, key, index )\n    status.expect.text  += @textValue( \"Expect\", eType,         value,  key, index )\n    status\n\n  # Convert expect to a schema object if op is schema\n  isSchema:( v ) ->\n    v.op? and v.type? and v.value? and v.range? and v.op? and v.size?\n\n  toSchema:( expect,   op ) ->\n    return   expect if op isnt \"schema\"\n    schema = { opt:false, type:\"unknown\", value:\"any\", range:\"any\", op:\"eq\", size:\"any\" }\n    switch @type(expect)\n      when \"string\"\n        schema.opt  = @tail(expect,\"?\") is \"?\"\n        schema.type = expect   # @tail(expect,\"?\") removed the trailing '?'\n      when \"object\"\n        schema.opt   = if @isBoolean(expect.opt)  then expect.opt  else  false\n        schema.type  = if @isString(expect.type)  then expect.type else \"string\"\n        schema.value = if expect.value?           then expect.value else \"any\"\n        schema.range = if @isArray(expect.range)  then expect.range else \"any\"\n        schema.size  = if @isNum(  expect.size )  then expect.size  else \"any\"\n        schema.op    = if expect.op?    then expect.op    else \"eq\"\n    schema\n\n  checkValuesTypes:( result, expect, status, op, key, index ) ->\n    rType =                          @type(result)\n    eType = if op isnt \"schema\" then @type(expect) else expect.type\n    types = [\"string\",\"number\",\"boolean\",\"object\",\"array\"]\n    info  = switch\n      when @isNot(result)\n        \" Result of #{rType} is not defined\\nExpect is type '#{eType}\"\n      when @isNot(expect)\n        \" Expect of #{eType} is not defined\\nResult is type '#{rType}\"\n      when op is 'schema'\n        if eType is 'any'\n          \"\"\n        else if etype includes(\"|\")\n          eTypes = eType.split(\"|\")\n          if @inArray(rType,eTypes)\n            \"\"\n          else\n            \" Result type is '#{rType}' that is not in\\nExpect schema types '#{eType}'\"\n        else if rType isnt eType\n          \" Result type is '#{rType}'\\nExpect type is '#{eType}' from schema\"\n      when rType isnt eType\n        \" Types do not match\\nResult type is '#{rType}'\\nExpect type is '#{eType}'\"\n      when rType is \"function\"\n        \" Result type is 'function'\\nExpect type is '#{eType}'\"\n      when eType is \"function\"\n        \" Expect type is 'function'\\nResult type is '#{rType}'\"\n      when not @inArray(rType,types)\n        \" Result is type '#{rType}' an unknown type is type '#{eType}'\"\n      when not @inArray(eType,types)\n        \" Result is type '#{rType}'\\nExpect is type '#{eType}' an unknown type\"\n      else\n        \"\"\n    if @isStr(info)\n      @examine( false, result, expect, status, op, info, key, index )\n    else\n      status\n\n  # Equality check for \"string\",\"number\",\"boolean\" types\n  valuesEq:( result, expect, status, op ) ->\n    value = if op is \"schema\" then expect.value else expect\n    op    = if op is \"schema\" and expect.range isnt \"any\" then 'range' else expect.op\n    status.assert.pass = switch\n      when value is \"any\" then true\n      when op is \"range\"\n        range = expect.range\n        if range.length is 2 then range[0]          <= value and value <= range[1] # range[0] is min range[1] is max\n        if range.length is 3 then range[0]-range[2] <= value and value <= range[1]-range[2] # range[2] is a tolerance\n      when op is \"eq\"     then result is   value\n      when op is \"le\"     then result <=   value\n      when op is \"lt\"     then result <    value\n      when op is \"ge\"     then result >=   value\n      when op is \"lt\"     then result >    value\n      when op is \"neq\"    then result isnt value\n      else                     false\n    status\n\n  # Just a fallback when types are not fully screened\n  unknownsEq:( result, expect, status ) ->\n    status.assert.pass  = false\n    status.assert.info += \"unknown types for comparision\"\n    status\n\n  textValue:( name, value, key, index ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isStr(key)\n    ref = \" at index: #{index} \" if @isNum(index)\n    \"#{name}#{ref}where type is #{@type(value)} and value is #{@toStr(value)}\"\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, status, op, level ) ->\n\n    # Check that the expect object has all the keys that the result object has\n    for own key, val of result when expect[key]?\n      status = @examine( false, val, expect[key], status, op, \"missing expect\", key, null )\n\n    # Check that the result object has all the keys that the expect object has\n    for own key, val of expect when result[key]?\n      status = @examine( false, result[key], val, status, op, \"missing result\", key, null )\n\n    # Assert each value for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], val, status, op, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, status, op, level ) ->\n    value = expect\n\n    # Check against the schema when present\n    if op is \"schema\"\n      value = expect.value\n      if value is 'any'\n         status.assert.pass = true\n         return status\n      else if value.size isnt \"any\" and result.length > value.size\n         info   = \" Result length exceeds the maximum size #{value.size}\"\n         info  += \" Result length is #{result.length}\"\n         info  += \" Size is #{value.size}\"\n         return @examine( false, result, expect, status, op, info, null, null )\n      else if not @isArray(value)\n         return status\n\n    # Examine the array lengths\n    if result.length isnt value.length\n      info   = \" different array lengths\"\n      info  += \" Result length is #{result.length}\"\n      info  += \" Expect length is #{value.length}\"\n      status = @examine( false, result, expect, status, op, info, null, null )\n\n    # Assert each value within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], status, op, ++level, null, i )\n\n    status\n\n  report:( status, result, expect ) ->\n    eq = if status.assert.pass then 'is' else 'not'\n    @blockText   = \"\" if @blockClear\n    @statusText  = \"\"\"\\n#{status.assert.text} \"\"\"\n    @statusText += \"\"\"#{eq} #{@toStr(expect)}\"\"\" if status.result.type isnt \"function\"\n    @statusText += status.assert.info if @isStr(status.assert.info)\n    @statusText += \"\"\"\\n   #{@textResult( status, result )}\"\"\" if @verbose or not status.assert.pass\n    @statusText += \"\"\"\\n   #{@textExpect( status, expect )}\"\"\" if @verbose or not status.assert.pass\n    #statusText += \"\\n\"+@code              if @isStr(@code) and ( @verbose or not status.assert.pass )\n    @blockText  += @statusText if not @statusClear\n    @statusClear = false\n    @blockClear  = false\n\n    if @isDef(@stream)\n      @stream.publish( @statusSubject, status )\n      @stream.publish( @stringSubject, status )\n    return\n\n  status:() ->\n    @statusClear = true\n    @statusText\n\n  block:() ->\n    @blockClear = true\n    @blockText\n\n  runUnitTests:( paths ) =>\n    for path in paths\n      modulePath = @path( path )\n      console.log( \"\\n-- Started Unit Testing for: #{modulePath.name} in #{modulePath.path}\" ) if @logToConsole\n      await `import( path /* @vite-ignore */ )`\n    @summary()\n    return\n\n  path:( path ) ->\n    dirs   = path.split(\"/\")\n    module = @tail(dirs).split(\"-\")[0]\n    @modules[module] = { name:module, path:path }\n    console.log( 'Tester.path(path)', { path:path, dirs:dirs, module:module } ) if @debug\n    @modules[module]\n\n  summary:( module=null ) =>\n    path = if module? and @modules[module]? then @modules[module].path else \"?\"\n    if @debug\n      console.log( 'Tester.summary(module)', { module:module, modules:@modules, key:@modules[module], path:path } )\n    summaryText = \"\"\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      summaryText += \"\"\"\\n\\n-- Summary - for #{module} in #{path}\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    else\n      fullCount = @passed.length + @failed.length\n      summaryText += \"\"\"\\n\\n-- Summary - for all tests\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@passed.length,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@failed.length,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,     fullCount)} tests total\"\"\"\n\n    if @isDef(@stream) and @stream.hasSubscribers( @summarySubject )\n      @stream.publish( @summarySubject, summaryText )\n\n    summaryText = @block() + summaryText # Prepend any block statuses\n\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @failed,      @passed )\n      @reviewsLocal( { failed:false, passed:false } )\n      \n    summaryText\n\n  # Type Assertions that leverage @type(arg) the improved typeof(arg)\n  isType:(v,t)    =>  @type(v) is t\n  isNull:(d)      =>  @isType(d,'null')\n  isUndef:(d)     =>  @isType(d,'undefined')\n  isDef:(d)       =>  @type(d) isnt 'null' and @type(d) isnt 'undefined'\n  isNot:(d)       =>  not @isDef(d)\n  isStr:(s)       =>  @isType(s,\"string\") and s.length > 0 and s isnt 'None'\n  inStr:(s,e)     =>  @isStr(s) and s.indexOf(e) > -1\n  isNum:(n)       =>  @isType(n,\"number\")\n  isNaN:(n)       =>  @isNum(n) and Number.isNaN(n)\n  isObj:(o)       =>  @isType(o,\"object\")\n  inObj:(o,k)     =>  @isObj(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n  toKeys:(o)      =>  if @isObj(o) then Object.keys(o) else []\n  isVal:(v)       =>  @isType(v,\"number\") or @isType(v,\"string\") or @isType(v,\"boolean\")\n  isFunc:(f)      =>  @isType(f,\"function\")\n  isArray:(a)     =>  @isType(a,\"array\") and a.length? and a.length > 0\n  isBoolean:(v)   =>  @isType(a,\"array\")\n  inArray:(a,e)   =>  @isArray(a) and a.includes(e)\n  inRange:(a,i)   =>  @isArray(a) and 0 <= i and i < a.length\n  atIndex:(a,e)   =>  if @isArray(a) then a.indexOf(e) else -1\n  time:()         =>  new Date().getTime()\n  hasInteger:(s)  =>  @isStr(s) and /^\\s*(\\+|-)?\\d+\\s*$/.test(s)\n  hasFloat:(s)    =>  @isStr(s) and /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/.test(s)\n  hasCurrency:(s) =>  @isStr(s) and /^\\s*(\\+|-)?((\\d+(\\.\\d\\d)?)|(\\.\\d\\d))\\s*$/.test(s)\n  hasEmail:(s)    =>  @isStr(s) and /^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/.test(s)\n\n  head:(v,action=false) ->\n    pop = null\n    switch @type(v)\n      when 'array'\n        switch @type(action)\n          when 'boolean'\n            pop = v[0]\n            v   = v.shift() if action\n      when 'string'\n        switch @type(action)\n          when 'boolean'\n            pop = v.charAt(0)\n            v   = v.substring(1) if action\n          when 'string' and v.startsWith(action)\n            pop = action\n            v   = v.substring(action.length)\n          when 'number'\n            pop = v.charAt(action)\n            v   = v.shift() if action\n    pop\n\n  tail:(v,action=false) ->\n    pop = null\n    switch @type(v)\n      when 'array'\n        pop = v[v.length-1]\n        v   = v.pop() if @isType(action,\"boolean\") and action\n      when 'string'\n        switch @type(action)\n          when 'boolean'\n            pop = v.charAt(v.length-1)\n            v   = v.substring( 0, v.length-1 ) if action\n          when 'string' and v.endsWith(action)\n            pop = action\n            v   = v.substring(0,v.length-action.length)\n    pop\n\n  # Unlike the built in Array v.slice(beg,end) where beg is a zero-based index and end\n\n  # Here beg starts at 1 and end includes the last position or is set to beg if ommitted\n  #  an array slice( ['a','b','c'], 1, 2 ) returns ['a','b']\n  #  an array slice( ['a','b','c'], 2    ) returns ['b']\n  #  a string slice( ['abc'],       1, 2 ) returns   'ab'\n  #  a string slice( ['abc'],       2    ) returns   'b'\n  # where with Array.slice() it is open\n  slice:( v, beg, end=null, remove=false ) ->\n    end if @isDef(end) then end else beg\n    pop = null\n    switch @type(v)\n      when 'array'\n        pop = if remove then v.splice(beg-1,end+1) else v.slice(beg-1,end+1)\n      when 'string'\n        pop = v.splice(beg-1,end+1)\n        v   = v.substring(0,beg-1) + v.substring(end+1) if remove\n    pop\n\n  # Converters\n  toStr:( value, enclose=false ) =>\n    str = \"\"\n    switch @type(value)\n      when 'string'\n        str = if enclose then '\"'+value+'\"' else value\n      when 'function'\n        str = \"?\"\n      when 'object' # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"{ \"\n        for own key, val of value\n          str += key+\":\"+@toStr(val,true)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma and space\n        str += \" }\"\n      when 'array'  # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"[ \"\n        for val in value\n          str += @toStr(val,true)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma  and space\n        str += \" ]\"\n      else\n        str = value.toString()\n    console.log( \"Tester.toStr(val)\", { type:@type(value), value:value, str:str } ) if enclose and @debug\n    str\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) =>\n    return false if @isNot(e)\n    switch @isType(e)\n      when 'object' then Object.getOwnPropertyNames(e).length is 0\n      when 'array'  then e.length is 0\n      when 'string' then e.length is 0\n      else               false\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) =>\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt '$' and b isnt '_'\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = ' ' + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  # An improved typeof() that follows the convention by returning types in lower case\n  # by default. The basic types returned are:\n  # boolean number string function object array date regexp undefined null\n  type:(val,lowerCase=true) =>\n    str = Object::toString.call(val)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    if lowerCase then typ.toLowerCase() else typ\n\n  scheme:( val,op='eq' ) =>\n    if op is 'schema' then 'schema' else @type(val)\n\n  # A more detail type that returns basic types, class, object and function name in upper case\n  klass:(val) =>\n    typ = @type(val,false) # Start with basic type to catch 'Null' and 'Undefined'\n    switch typ\n      when 'Null'      then 'Null'\n      when 'Undefined' then 'Undefined'\n      when \"Function\"  then val.name\n      when \"Object\"    then val.constructor.name\n      else                  typ\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( failed, passed ) =>\n    localStorage.setItem( 'TestsFailed', JSON.stringify( failed ) )\n    localStorage.setItem( 'TestsPassed', JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n    return if not @debug\n    if reviewFailed\n      failLocals = localStorage.getItem( 'TestsFailed' )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        for failStatus in failStatuses\n          console.log( failStatus ) if @logToConsole\n    if reviewPassed\n      passLocals = localStorage.getItem( 'TestsPassed' )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        for passStatus in passStatuses\n          console.log( passStatus ) if @logToConsole\n    return\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nfits = tester.unit\nexport { test, unit, fits }\n\n###\n  # Validate and diagnose a result that fits a schema both of type 'object' or 'array'\n  #  Very usefull for a result originating from a'.json' file and parsed by JSON.parse(...)\n  #  Very usefull for a schema originating from a'.json' file and parsed by JSON.parse(...)\n  fits2:( text, result, schema ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    status = @initStatus( result, schema, text, 'schema', \"\" )\n    status = switch @type(result)\n      when 'object' then @objectsEq( result, schema, status, level )\n      when 'array'  then @arraysEq(  result, schema, status, level )\n      else               @assert(    result, schema, status )\n    if @debug\n      console.log( \"Tester.fits(result,schema)\", { type:@type(result), result:result, schema:schema, status:status } )\n    @\n###"
  ]
}
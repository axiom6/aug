{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Type from \"./Type.js\"\n\nclass Tester extends Type\n\n  constructor:() ->\n    super()\n\n    @stream = null # Optional streaming publisher module that is set by @injectStream( stream )\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    @logToConsole   = true\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its argidating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @stringSubject  = \"TestString\"  # Subject for publishing each test status string\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @describe( description, suite )\n    @description = \"\"\n    @suite       = \"\"\n\n    # Accummulate test status state\n    @text         = \"\" # set by test() that is passed inside eq() and sent to run()\n    @info         = \"\"\n    @code         = \"\"\n    @statusText   = \"\"\n    @statusClear  = true\n    @blockText    = \"\"\n    @blockClear   = true\n\n    # Accumulated status objects\n    @module  = \"\"\n    @modules = {}\n    @passed  = []\n    @failed  = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream  = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @stringSubject  = if options.stringSubject?  then options.stringSubject  else \"TestString\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test -- Pass a closeure in the form of  (t) -> { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) -> { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test(\"2 + 3 = 5\", (t) ->\n  #     t.eq( add(2,3), 5 ) )\n  test:( text, closure ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text     = text               # @text is latter referenced inside eq()\n    @code     = closure.toString() # @code is latter referenced inside eq()\n    closure(@)\n    @  # returns tester instance for chaining\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  unit:( text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    @run( text, result, expect ) # returns tester instance for chaining\n\n  eq:( result, expect ) =>\n    @run( @text, result, expect )\n\n  # -- info reporting ---\n\n  # A gem methods that appends text along with retrStr to @info for detailed reporting of inconsistence\n  #  along with a vialble actual return specified by the caller\n  toInfo:( method, text, arg, type, typeTo, retnStr, retn ) ->\n    @info += \"\\n  Tester.#{method} #{text} #{@toString(arg)} of '#{type}' to'#{typeTo}' returning #{retnStr}\"\n    retn\n\n  isInfo:( pass, text, type, types ) ->\n    return true if pass\n    @info += \"\\n  #{text} of type '#{type}' not in '#{types}'\"\n    false\n\n  inInfo:( pass, result, expect, oper, spec, text ) ->\n    prefix = if pass then \"-- Passed --\" else \"-- Failed --\"\n    condit = if pass then \"matches \"      else \"no match\"\n    @info += \"\\n  #{prefix} #{result} #{condit} #{expect} with oper #{oper} and spec #{spec} #{text}\"\n    pass\n\n  # -- run() scenario is @initStatus(...) @assert(...) @report(...)\n  #     console.log( \"Tester.run()\", { text:text, result:result, expect:expect} ) if  @debug\n  run:( text, result, expect ) ->\n    return @ not @testing\n    status = @initStatus( result, expect, text   )\n    status = @assert(     result, expect, status )\n    @report(              result, expect, status )\n    @    # returns tester instance for chaining\n\n  # Create a new status object for the current test\n  initStatus:( result, schema, text ) ->\n    module = text.split(\".\")[0]\n    {\n      assert:{ text:text, pass:true, module:module, code:@code, info:\"\" }\n      result:{ text:\"\", type:@type(result), value:result }\n      schema:{ text:\"\", type:schema.type,   value:schema.expect }  # Need to reconsider\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(arg) so asserions are only test when types match\n  #   Skips over @type(arg) = \"function\"\n  assert:( result, expect, status, level=0, key=null, index=null ) ->\n\n    # Check values and types\n    status = @checkValuesTypes( result, expect, status, key, index )\n\n    # Perform all schema based assertions\n    if @isSchema( expect )\n      schema = @toSchema(  expect )\n      status.assert.pass = switch schema.oper\n        when 'enums' then @inEnums(  result, schema, status, level, key, index )\n        when \"range\" then @inRange(  result, schema, status, level, key, index )\n        else @examine( false, result, schema, status, \"unknown schema.oper #{schema.oper}\", key, index )\n      return status.assert.pass\n\n    # Perform all comparisions\n    type = @type( result )\n    isValue = (type) -> @isIn( type, \"values\" )\n    status = switch type\n      when  isValue( type ) then @valuesEq(   result, expect, status, \"eq\"  )  # op is not passed aroung\n      when \"object\"         then @objectsEq(  result, expect, status, level )\n      when \"array\"          then @arraysEq(   result, expect, status, level )\n      else                       @unknownsEq( result, expect, status )         # just a fallback\n    @examine( status.assert.pass, result, expect, status, \"\", key, index )\n\n    # Store status in @passed and @failed arrays\n    if level is 0\n       @passed.push(status) if     status.assert.pass\n       @failed.push(status) if not status.assert.pass\n    status\n\n  # Check and report on values and types\n  checkValuesTypes:( result, expect, status, key, index ) ->\n    rType  = @type(result)\n    eType  = @type(expect)\n    info  = switch\n      when @isNot(result)\n        \" Result of #{rType} is not defined\\nExpect is type '#{eType}'\"\n      when @isNot(expect)\n        \" Expect of #{eType} is not defined\\nResult is type '#{rType}'\"\n      when rType isnt eType and not @isIn( eType, \"specs\" )\n        \" Types do not match\\nResult type is '#{rType}'\\nExpect type is '#{eType}'\"\n      when rType is \"function\"\n        \" Result type is 'function'\\nExpect type is '#{eType}'\"\n      when eType is \"function\"\n        \" Expect type is 'function'\\nResult type is '#{rType}'\"\n      when not @isIn( rType, \"results\" )\n        \" Result is type '#{rType}' an unknown type is type '#{eType}'\"\n      when not @isIn( eType, \"expects\" )\n        \" Result is type '#{rType}'\\nExpect is type '#{eType}' an unknown type\"\n      else\n        \"\"\n    if @isString(info)\n      @examine( false, result, expect, status, info, key, index )\n    else\n      status\n\n  valuesEq:( result, expect, status, oper ) ->\n    return true if expect is \"any\"\n    pass = switch oper\n      when \"eq\" then result is   expect\n      when \"le\" then result <=   expect\n      when \"lt\" then result <    expect\n      when \"ge\" then result >=   expect\n      when \"gt\" then result >    expect\n      when \"ne\" then result isnt expect\n      else           false\n    status.assert.pass = pass\n    status\n\n  # Just a fallback when types are not fully  screened\n  unknownsEq:( result, schema, status ) ->\n    status.assert.pass  = false\n    status.assert.info += \"unknown types for comparision\"\n    status\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, status, level ) ->\n\n    # Check that the expect object has all the keys that the result object has\n    for own key, arg of result when  expect[key]?\n      status = @examine( false, arg, expect[key], status, \"missing expect\", key, null )\n\n    # Check that the result object has all the keys that the expect object has\n    #   ? or ( op is \"schema\" and arg.card is \"1\" ) )\n    for own key, arg of expect when result[key]?\n      status = @examine( false, result[key], arg, status, \"missing result\", key, null )\n\n    # Assert each value for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], arg, status, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, status, level ) ->\n\n    # Examine the array lengths\n    if result.length isnt value.expect\n      info   = \" different array lengths\"\n      info  += \" Result length is #{result.length}\"\n      info  += \" Expect length is #{expect.length}\"\n      status = @examine( false, result, expect, status, info, null, null )\n\n    # Assert each value within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], status, ++level, null, i )\n\n    status\n\n  # Generates informative text in status\n  examine:( pass, result, expect, status, info, key, index ) ->\n    isSchema = @isSchema( expect )\n    prefix = if pass then \"-- Passed -- \" else \"-- Failed -- \"\n    status.assert.text   = prefix + status.assert.text\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.assert.info  += info\n    status.assert.code   = if @isString(@code) then @code else \"\"\n    status.result.text  += @textResult( result, key, index )\n    status.expect.text  += @textExpect( expect, key, index )  if not isSchema\n    status.expect.text  += @textSchema( expect, key, index )  if     isSchema\n    status\n\n\n  report:( result, expect, status ) ->\n    pass = status.assert.pass\n    eq   = if pass then \"is\" else \"not\"\n    @blockText   = \"\" if @blockClear\n    @statusText  = \"\"\"\\n#{@module}.#{status.assert.text} \"\"\"\n    @statusText += \"\"\"#{eq} #{@toString(expect)}\"\"\" if status.result.type isnt \"function\"\n    @statusText += status.assert.info if @isString(status.assert.info)\n    @statusText += \"\"\"\\n   #{@textResult( result )}\"\"\" if @verbose or not pass\n    @statusText += \"\"\"\\n   #{@textExpect( expect )}\"\"\" if @verbose or not pass\n    #statusText += \"\\n\"+@code                                 if @isString(@code) and ( @verbose or not pass )\n    @blockText  += @statusText   # if not @statusClear # keep the status in the block for now\n    @statusClear = false\n    @blockClear  = false\n\n    if @isDef(@stream)\n      @stream.publish( @statusSubject, status )\n      @stream.publish( @stringSubject, status )\n    return\n\n  textResult:( result, key=null, index=null ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isString(key)\n    ref = \" at index: #{index} \" if @isInt(index)\n    \"Result#{ref}where type is #{@type(result)} and value is #{@toString(result)}\"\n\n  textExpect:( expect, key=null, index=null ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isString(key)\n    ref = \" at index: #{index} \" if @isInt(index)\n    \"Expect#{ref}where type is #{@type(expect)} and value is #{@toString(expect)}\"\n\n  textSchema:( schema, key=null, index=null ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isString(key)\n    ref = \" at index: #{index} \" if @isInt(index)\n    \"Schema#{ref}where type is #{schema.type} and spec is #{schema.spec} with oper #{schema.oper}\"\n\n  # @runUnitTests(...) @describe(...) @summary(...)\n\n  runUnitTests:( paths ) ->\n    for path in paths\n      modulePath = @path( path )\n      console.log( \"\\n-- Started Unit Testing for: #{modulePath.name} in #{modulePath.path}\" ) if @logToConsole\n      await `import( path /* @vite-ignore */ )`\n    @summary()\n    return\n\n  describe:( module, suite=null, description=null ) =>\n    @module      = module\n    @suite       = if suite?       then suite       else null\n    @description = if description? then description else null\n    @\n\n  summary:( module=null ) ->\n    path = if module? and @modules[module]? then @modules[module].path else \"?\"\n    if @debug\n      console.log( \"Tester.summary(module)\", { module:module, modules:@modules, key:@modules[module], path:path } )\n    summaryText = \"\"\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      summaryText += \"\"\"\\n\\n-- Summary - for #{module} in #{path}\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    else\n      fullCount = @passed.length + @failed.length\n      summaryText += \"\"\"\\n\\n-- Summary - for all tests\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@passed.length,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@failed.length,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,     fullCount)} tests total\"\"\"\n\n    if @isDef(@stream) and @stream.hasSubscribers( @summarySubject )\n      @stream.publish( @summarySubject, summaryText )\n\n    summaryText = @block() + summaryText # Prepend any block statuses\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @failed,      @passed )\n      @reviewsLocal( { failed:false, passed:false } )\n    summaryText\n\n  # Returns a single text status fron the last test run when called in a unit test module like Tester-unit.coffee\n  # Example: console.log( unit().status() )\n  #   or      unit().log( unit().status() )\n  status:() ->\n    # @statusClear = true\n    @statusText\n\n  # Returns a block of text statuses when callrd in a unit test module like Tester-unit.coffee\n  # Example: console.log( unit().block() )\n  #   or      unit().log( unit().block() )\n  block:() ->\n    @blockClear = true\n    @blockText\n\n  # Add a unit test file path to the @modules object\n  path:( path ) ->\n    dirs   = path.split(\"/\")\n    module = @tail(dirs).split(\"-\")[0]\n    @modules[module] = { name:module, path:path }\n    console.log( \"Tester.path(path)\", { path:path, dirs:dirs, module:module } ) if  @debug\n    @modules[module]\n\n  isEnums:( arg, oper, type ) ->\n    oper is \"enums\" and @isArray(arg,type) and @isResultType(type)\n\n  # Check if an arg like expect is a 'schema'\n  verifySchema:( arg ) ->\n    @conditions( @isObject(arg), @isResultType(arg.type), @isExpect(arg.expect,arg.oper), @isCard(arg.card) )\n\n  isResultType:( type ) ->\n    pass = @isDef(type) and @isIn( type,    \"results\" )\n    @isInfo( pass, \"Not a Result\", type, Type.results )\n\n  isExpect:(expect,oper) ->\n    @isOper(oper)\n    @isDef(expect)\n    type = @type(expect)\n    pass = switch oper\n      when \"range\" then @isRange(expect)\n      when \"enums\" then @isEnums(expect,oper,type)\n      when \"eq\"    then @isResultType(type)\n      else @isInfo( false, \"Not a Expect oper\", oper, Type.opers )\n    @isInfo( pass, \"Not a Expect\", type, Type.expects )\n\n  isExpectType:( type ) ->\n    pass = @isDef(type) and @isIn( type, \"expects\"      )\n    @isInfo( pass, \"Not a Expect\", type, Tester.expects )\n\n  isOper:( oper ) ->\n    pass = @isDef(oper) and  @isIn( oper, \"opers\" )\n    @isInfo( pass, \"Not an 'oper'\", oper, \"opers\" )\n\n  isCard:( card ) ->\n    pass = @isDef(card) and @isIn( card, \"cards\" )\n    @isInfo( pass, \"Not a 'card'\", card, Type.cards )\n\n  # This approach insures that all conditions are checked and messages sent\n  #   then all arg returns are anded together to determine a final pass or fail\n  conditions:( args... ) ->\n    pass = true\n    pass = pass and arg for arg in args\n    pass\n\n  isSchema:( expect ) ->\n    type = @type(expect)\n    @isSchemaParse( expect, type ) or @isSchemaObject( expect, type )\n\n  # In the first t\n  toSchema:( expect ) ->\n    type   = @type(expect)\n    schema = { type:\"any\", oper:\"any\", expect:\"any\", card:\"1\", spec:\"\"  }\n    schema = switch type\n      when @isSchemaParse(  expect, type ) then @toSchemaParse(  schema, expect )\n      when @isSchemaObject( expect, type ) then @toSchemaObject( schema, expect )\n      else @toInfo( \"toSchema(expect)\", \"expect not schema 'string' or 'object'\",\n        expect, type, \"schema\", @toString(schema), schema )\n\n  isSchemaParse:  ( arg, type ) ->\n    type is \"string\" and arg includes(\":\")\n\n  # toSchemaParse:( schema, arg )\n  # Examples\n  #   \"array:[0,255]\" }      { type:\"array\",   oper:\"range\", check:[0,255],         card=\"1\" }\n  #   \"string:James\"         { type:\"string\",  oper:\"eq\",    check:James,           card=\"1\" }\n  #   \"string:a|b|c\"         { type:\"string\",  oper:\"enums\", check:\"a|b|c\",         card=\"1\" }\n  #   \"int:[0,100]\"          { type:\"int\",     oper:\"range\", check:[0,100],         card=\"1\" }\n  #   \"float:[0.0,100.0,1.0] { type:\"float\",   oper:\"range\", check:[0.0,100.0,1.0], card=\"1\" }\n  #   \"string:[\"\",\"zzz\"]     { type:\"string\",  oper:\"range\", check:[\"\",\"zzz\"],      card=\"1\" }\n  #   \"boolean\"              { type:\"boolean\", oper:\"any\",   check:\"any\",           card=\"1\" }\n  #   \"object:{r:[0,255],g:[0,255],b:[0,255]}\n  #     { type:\"object\", oper:\"range\", range:{r:[0,255],g:[0,255],b:[0,255]}, card=\"1\" }\n  #  \"array:[[0,360],[0,100],[0,100]]:?\"\n  #     { type:\"array\",  oper:\"range\", range:[[0,360],[0,100],[0,100]], card=\"?\" }\n  toSchemaParse:( schema, arg ) ->\n    splits = arg.split(\":\")\n    length = splits.length\n    if length >= 1                                        # type\n      schema.type = splits[0]\n    if length >= 1                                        # expect\n      schema.spec splits[1]\n      if splits[1].includes(\"|\")                         #   enum\n        schema.oper   = \"enums\"\n        schema.expect = @toEnums( splits[1] )\n      else if @isStringEnclosed( \"[\", splits[1], \"]\" )  #    range array\n        schema.oper   = \"range\"\n        schema.expect = @toArray( splits[1] )\n    else if @isStringEnclosed( \"{\", splits[1], \"}\" )   #    range object\n      schema.oper   = \"range\"\n      schema.expect = @toObject( splits[1] )\n    else\n      schema.oper   = \"any\"\n      schema.expect = \"any\"\n    if length >= 2                                        # card i.e cardinaliry\n      schema.oper = splits[2]\n    schema\n\n  isSchemaObject: ( arg, type ) ->\n    type is \"object\" and arg.oper? and arg.expect? # and arg.type? and arg.card?\n\n  toSchemaObject:( schema, arg ) ->\n    schema.type   = if arg.type?   then arg.type  else \"any\"\n    schema.oper   = if arg.oper?   then arg.oper  else \"any\"\n    schema.expect = if arg.expect? then arg.expect else \"any\"\n    schema.card   = if arg.card?   then arg.card  else  \"1\"  # required\n    schema.spec   = if arg.spec?   then arg.spec  else  \"\"   # required\n    schema\n\n  isSchemaValue:  ( type )  ->\n    @isIn( type, \"results\" )\n\n  # Holding off on this conversion. Instead we will just return an expect value\n  toSchemaValue:( schema, arg, type ) ->\n    schema.type   = type\n    schema.oper   = \"eq\"\n    schema.expect = arg\n    schema.card   = \"1\"  # required\n    schema.spec   = \"\"\n    schema\n\n  inEnums:(   result, schema, status, level, key, index ) ->\n    @noop( level )\n    enums = schema.expect\n    pass  = @inArray( result, enums )\n    @examine( pass, result, schema, status, \"inEnums(...)\", key, index )\n\n  inRange:( result, schema, status, level, key, index ) ->\n    range = schema.expect\n    pass  = @isRange(range)\n    type = @type(result)\n\n    inStringRange = ( string, range ) -> range[0]          <= string and string <= range[1]\n    inIntRange    = ( int,    range ) -> range[0]          <= int    and int    <= range[1]\n    inFloatRange  = ( float,  range ) -> range[0]-range[2] <= float  and float  <= range[1]+range[2]\n    pass = switch type\n      when \"string\" then inStringRange(   result, range )\n      when \"int\"    then inIntRange(      result, range )\n      when \"float\"  then inFloatRange(    result, range )\n      when \"array\"  then @inArrayRange(   result, range )\n      when \"object\" then @objectsEq(      result, range, status, level )\n      else @toInfo( \"inRange()\", \"unknown range type\", result, type, type, \"false\", false )\n    @examine( pass, result, schema, status, \"inRange(...)\", key, index )\n\n  # Camnot is @arraysEq(...) because a single ramge can be applied to all resuls in a result array\n  inArrayRange:( result, range ) ->\n    pass    = true\n    type    = @type(result)\n    nResult = result.length\n    nRange  = range.length\n    if nRange  is 1\n      for i in [0...nResult] when @isArray(result[i])\n        pass = pass and @inMyRange( result[i], range )\n    else if nResult > nRange\n      text = \"not enough range tests #{nRange} for result so only will be #{nRange} tests on result\"\n      pass = @toInfo( \"inRange()\", text, result, type, type, \"false\", false )\n    else if nResult < nRange\n      text = \"OK with more range bounds #{nRange} than needed for result #{nResult}\"\n      pass = @toInfo( \"inRange()\", result, text, type, type, \"true\", true )\n      min = Math.min( nResult, nRange )\n      for i in [0...min] when @isArray(result[i]) and @isArray(range[i])\n        pass = pass and @inMyRange( result[i], range[i] )\n    pass\n\n  toEnums:( arg ) ->\n    enums = []\n    type  = type = @type(arg)\n    switch type\n      when \"string\" and arg.includes(\"|\")\n        splits = arg.split(\"|\")\n        for split in splits\n          enums.push( split )\n      when \"array\"\n        enums = arg\n      else\n        enums = @toInfo( \"toEnums(arg)\", \"unable to convert\", arg, type, \"enums\", \"[]\", [] )\n    enums\n\n  rangeType:( range ) ->\n    type = if range.length > 0 then @type(range[0]) else \"null\"\n    if @isIn( type, \"ranges\" )\n      if @isArray(range,type) then type else \"mixed\"\n    else if type is \"array\"\n      @rangeType(range[0])\n\n# -- Range Methods --\n\n# Asserts range with for types \"string\" or \"int\" or \"float\"\n  isRange:(range)  ->\n\n# internal functions called after @rangeType(range) has verified that range\n#   is an array of type \"string\" or \"int\" or \"float\"\n    isStringRamge = (r) -> r.length is 2 and r[0]      <= r[1]       # For 'string'\n    isIntRange    = (r) -> r.length is 2 and r[0]      <= r[1]       # For 'int'\n    isFloatRange  = (r) -> r.length is 3 and r[0]-r[2] <= r[1]+r[2]  # For 'float' r[2] is tol\n    isArrayRange  = (r) ->\n      pass = true\n      for e in r\n        pass = pass and @isRange(e)\n      pass\n\n    # @rangeType(...) checks array existence and asserts type with @isArray(range,type)\n    type = @rangeType(range)\n\n    switch type\n      when 'string' then isStringRamge(range)\n      when 'int'    then isIntRange(range)\n      when 'float'  then isFloatRange(range)\n      when 'array'  then isArrayRange(range)\n      else  @toInfo( \"isRange(range)\", \"not a range type\", range, type, \"\", \"false\", false )\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( failed, passed ) ->\n    localStorage.setItem( \"TestsFailed\", JSON.stringify( failed ) )\n    localStorage.setItem( \"TestsPassed\", JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n    return if not @debug\n    if reviewFailed\n      failLocals = localStorage.getItem( \"TestsFailed\" )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        for failStatus in failStatuses\n          console.log( failStatus ) if @logToConsole\n    if reviewPassed\n      passLocals = localStorage.getItem( \"TestsPassed\" )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        for passStatus in passStatuses\n          console.log( passStatus ) if @logToConsole\n    return\n\n  # Override type.isIn() with addional Tester type arrays\n  isIn:( type, key ) ->\n    if        Type[key]? then   Type[key].includes(type)\n    else if Tester[key]? then Tester[key].includes(type)\n    else @isInfo( false, \"key #{key} missing for\", type, [] )\n\nTester.specs   = [\"range\",\"enums\"]               # high level schema based comparision specs\nTester.opers   = [\"eq\",\"le\",\"lt\",\"ge\",\"gt\",\"ne\"] # low  level value  based comparison  ooers 'eq' default\nTester.cards   = [\"n\",\"?\",\"*\",\"+\",\"min to max\"]  # cards  1 required, ? optional, * 0 to many, + 1 to many, m:m range\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\n\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nfits = tester.fits\nexport { test, unit, fits }\n"
  ]
}
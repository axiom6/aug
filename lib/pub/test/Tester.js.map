{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    # Key settings that are reconfigured through setOptions( options )\n    @testing        = true\n    @logToConsole   = true\n    @archive        = true\n    @verbose        = false\n    @debug          = false\n    @inViteJS       = true # @isDef(`import.meta.env`)\n\n    @log          = console.log\n    @module       = \"\"\n    @suite        = \"\"\n    @text         = null # set by test() that is passed inside eq() and sent to run()\n    @statusMsg    = \"\"\n    @sent         = false\n    @code         = \"\"\n    @called       = \"\"\n    @passed       = []\n    @failed       = []\n    @nav          = null\n    @stream       = null\n    @mix          = null\n    @batch        = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    return\n\n  injectStream:( stream ) ->\n    return\n    @stream  = stream\n    return\n\n  injectNav:(  nav ) ->\n    return\n    @nav     = nav\n    @stream  = nav.stream\n    @mix     = nav.mix\n    @batch   = nav.batch\n    return\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n\n  unit:(  text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length == 0 # or not @testing -\n    @called = \"unit\"\n    @run( text, result, expect )      # unit() is actually a synonym for run()\n\n  unitLine:(  text, result, expect, error = new Error() ) =>   # unit(...) is always @testing\n    return @ if arguments.length == 0 # or not @testing -\n    @line( error )\n    @run( text, result, expect )      # unit() is actually a synonym for run()\n\n  # -- test -- Pass a closeure in the form of  (t) => { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) => { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test('2 + 3 = 5', (t) ->\n  #     t.eq( add(2,3), 5 ) )\n\n  test:( text, closure ) =>\n    return @ if arguments.length == 0 or not @testing\n    @text   = text     # @text is latter referenced inside eq()\n    @code   = \"\"\n    @called = \"test\"\n    @func( closure )\n    @\n\n  func:( closure ) =>\n    str    = closure.toString()\n    tokens = str.split(\"return t.\")\n    @code = if tokens[1]? then tokens[1].substring( 0, tokens[1].length-3 ) else \"\"\n    console.log( @code, closure, str, tokens[1] ) if @logToConsole and @verbose\n\n  eq:( result, expect ) =>\n    console.log( \"Tester.eq()\", { text:@text, result:result, expect:expect } ) if @debug\n    @run( @text, result, expect )  # @text is set by test()\n\n  run:( text, result, expect ) =>\n    return @ if arguments.length == 0 or not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect } ) if @debug\n    if @isNot(text) or @isNot(result) or @isNot(expect)\n      console.error( \"Tester.run() undefine arg(s)\", { text:text, result:result, expect:expect } )\n      return @\n    status = @initStatus( result, expect, text   )\n    status = @assert(     result, expect, status )\n    @report( status )\n    @ # Provides access to tester instance for chaining\n\n  describe:(  module, suite=null ) =>\n    @module = module\n    @suite  = if suite? then suite else null\n    @\n\n  summary:( module=null ) =>\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      console.log( '-- Summary - for', module )\n      console.log( '   ', @pad(passCount,fullCount) + ' tests passed' )\n      console.log( '   ', @pad(failCount,fullCount) + ' tests failed' )\n      console.log( '   ', @pad(fullCount,fullCount) + ' tests total'  )\n    else\n      fullCount = @passed.length + @failed.length\n      console.log( '-- Summary - for all tests' )\n      console.log( '   ', @pad(@passed.length,fullCount) + ' tests passed' )\n      console.log( '   ', @pad(@failed.length,fullCount) + ' tests failed' )\n      console.log( '   ', @pad(fullCount,     fullCount) + ' tests total'  )\n      if @archive\n         @archiveLocal(  @failed,     @passed )  # Good place to archive with all tests complete\n         @reviewsLocal( { failed:true, passed:false } )\n    @\n\n  archiveLocal:( failed, passed ) =>\n    localStorage.setItem( 'TestsFailed', JSON.stringify( failed ) )\n    localStorage.setItem( 'TestsPassed', JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n\n    if reviewFailed\n      failLocals = localStorage.getItem( 'TestsFailed' )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        console.log( failStatus ) for failStatus in failStatuses\n\n    if reviewPassed\n      passLocals = localStorage.getItem( 'TestsPassed' )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        console.log( passStatus ) for passStatus in passStatuses\n\n    return\n\n  # At present this is vite.js dependent with import.meta.glob() and its dynamic await importer\n  runUnitTestModulesWithViteJS:() =>\n    globPtn = \"/lib/**/*-unit.js\"\n    modules = `import.meta.glob(\"/lib/**/*-unit.js\")` # vite.js dependent with nack tics for non standard import\n    console.log( \"Tester.runUnitTestModulesWithViteJS()\", modules, globPtn ) if @debug\n    count = 0\n    total = Object.keys(modules).length\n    for own path, importer of modules\n      modules[path]().then( (importer) =>\n        console.log( path,   importer ) if @debug\n        await importer\n        count++\n        @summary() if count is total\n        return )\n\n  runUnitTestModulesFromPaths:( paths ) =>\n    console.log( \"Tester.runUnitTestModulesFromPaths()\", paths ) if @debug\n    count = 0\n    total = paths.length\n    for path in paths\n        console.log( \"Tester.runUnitTestModulesFromPaths()\", path ) if @debug\n        await `import( path /* @vite-ignore */ )`\n        count++\n        @summary() if count is total\n    return\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = ' ' + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  initStatus:( result, expect, text ) ->\n    resultType  = @type(result)\n    expectType  = @type(expect)\n    resultValue = if resultType isnt 'function' then result else '? function(args...) ?'\n    expectValue = if expectType isnt 'function' then expect else '? function(args...) ?'\n    module      = text.split('.')[0]\n    {\n      assert:{ text:text, pass:true, module:module, code:\"\" }\n      result:{ text:\"\", type:resultType, value:resultValue }\n      expect:{ text:\"\", type:expectType, value:expectValue }\n    }\n\n  assert:( result, expect, status, level=0 ) =>\n\n    # Define checks\n    if @isNot(result) or @isNot(expect)\n       status.assert.pass = false\n       status.assert.text = \"-- Failed -- because of null or undefined values fot\" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n       return status\n\n    # Type checks\n    if status.result.type isnt status.expect.type\n       status.assert.pass = false\n       status.assert.text = \"-- Failed -- Result type does match Expect tyoe for \" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n       return status\n\n    # String, Number, Object and Array check\n    # May want to factor in unknowns\n    switch status.result.type\n      when 'string'   then status.assert.pass = result is expect\n      when 'number'   then status.assert.pass = result is expect\n      when 'boolean'  then status.assert.pass = result is expect\n      when 'object'   then status = @objsEq( result, expect, status, level )\n      when 'array'    then status = @arrsEq( result, expect, status, level )\n      when 'function' then status.assert.pass = true   # Indicates a skip over when in a recursion\n      else                 status.assert.pass = false\n\n    # Update status at only level 0\n    if status.assert.pass and level is 0\n       status.assert.text = \"-- Passed -- \" + status.assert.text\n       status.assert.code = @code\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @passed.push( status )\n    else if level is 0\n       status.assert.text = \"-- Failed -- \" + status.assert.text\n       status.assert.code = @\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n    status\n\n  report:( status ) ->\n    @stream.publish( status ) if @isDef(@stream)\n    eq = if status.assert.pass then ' =  ' else ' != '\n    @statusMsg  =      \"\"\"#{status.assert.text} #{eq} #{status.expect.value}\"\"\"\n    @statusMsg += \"\"\"\"\\n  #{status.result.text} #{status.result.value}\"\"\" if @verbose or not status.assert.pass\n    @statusMsg += \"\"\"\"\\n  #{status.expect.text} #{status.expect.value}\"\"\" if @verbose or not status.assert.pass\n    @statusMsg += \"\\n\"+@code                          if @isStr(@code) and ( @verbose or not status.assert.pass )\n    console.log( @statusMsg ) # if @called is \"test\" or ( @logToConsole and not @sent )\n    @sent  = false\n    @code   = \"\"\n    @called = \"\"\n    return\n\n  status:() ->\n    @sent = true\n    @statusMsg\n\n  objsEq:( result, expect, status, level ) ->\n    for own key, obj of expect\n      if not  result[key]?\n        status.assert.pass  = false\n        status.assert.text  = \"-- Failed -- Result key:#{key} is missing for \" + status.assert.text\n        status.expect.text  = \"Expect type is #{@type(result)} with value #{expect}\" # Does no work on objects\n        status.result.text  = \"Result key:#{key} is missing\"\n        return status\n      else\n        status = @assert( result[key], expect[key], status, ++level )\n    status.assert.pass  = true\n    return status\n\n  arrsEq:( result, expect, status, level ) ->\n    if result.length isnt expect.length\n      status.assert.pass = false\n      status.assert.text = \"-- Failed -- Different array lengths fot\" + status.assert.text\n      status.result.text = \"Result length is #{result.length} value is\"\n      status.expect.text = \"Expect length is #{expect.length} value is\"\n      return status\n    for i in [0...expect.length]\n      status = @assert( result[i], expect[i], status, ++level )\n    status.assert.pass  = true\n    return status\n\n  isType:(v,t)    =>  @type(v) is t\n  isNull:(d)      =>  @isType(d,'null')\n  isUndef:(d)     =>  @isType(d,'undefined')\n  isDef:(d)       =>  @type(d) isnt 'null' and @type(d) isnt 'undefined'\n  isNot:(d)       =>  not @isDef(d)\n  isStr:(s)       =>  @isType(s,\"string\") and s.length > 0 and s isnt 'None'\n  inStr:(s,e)     =>  @isStr(s) and s.indexOf(e) > -1\n  isNum:(n)       =>  @isType(n,\"number\")\n  isNaN:(n)       =>  @isNum(n) and Number.isNaN(n)\n  isObj:(o)       =>  @isType(o,\"object\")\n  inObj:(o,k)     =>  @isObj(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n  toKeys:(o)      =>  if @isObj(o) then Object.keys(o) else []\n  isVal:(v)       =>  @isType(v,\"number\") or @isType(v,\"string\") or @isType(v,\"boolean\")\n  isFunc:(f)      =>  @isType(f,\"function\")\n  isArray:(a)     =>  @isType(a,\"array\") and a.length? and a.length > 0\n  inArray:(a,e)   =>  @isArray(a) and a.includes(e)\n  inRange:(a,i)   =>  @isArray(a) and 0 <= i and i < a.length\n  atIndex:(a,e)   =>  if @isArray(a) then a.indexOf(e) else -1\n  head:(a)        =>  if @isArray(a) then a[0]          else null\n  tail:(a)        =>  if @isArray(a) then a[a.length-1] else null\n  time:()         =>  new Date().getTime()\n  hasInteger:(s)  => @isStr(s) and /^\\s*(\\+|-)?\\d+\\s*$/.test(s)\n  hasFloat:(s)    => @isStr(s) and /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/.test(s)\n  hasCurrency:(s) => @isStr(s) and /^\\s*(\\+|-)?((\\d+(\\.\\d\\d)?)|(\\.\\d\\d))\\s*$/.test(s)\n  hasEmail:(s)    => @isStr(s) and /^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/.test(s)\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) =>\n    return false if @isNot(e)\n    switch @isType(e)\n      when 'object' then Object.getOwnPropertyNames(e).length is 0\n      when 'array'  then e.length is 0\n      when 'string' then e.length is 0\n      else               false\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) =>\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt '$' and b isnt '_'\n\n  textResult:( status ) ->\n    \"Result type is #{status.result.type} with value\"\n\n  textExpect:( status ) ->\n    \"Expect type is #{status.expect.type} with value\"\n\n  line:() ->\n    console.log( 'Tester.line()', @error )\n    return\n\n  # Will full implement later\n  logStatus:( msg, args... ) ->\n    return if not @debug\n    console.log( msg, args )\n    return\n\n  # Follow a typeof() convention by returning types in   lower case\n  # For basic types returned are boolean number string function object array date regexp undefined null\n  type:(val,lowerCase=true) =>\n    str = Object::toString.call(val)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    if lowerCase then typ.toLowerCase() else typ\n\n  klass:(val) =>\n    typ = @type(val,false) # Uppercase to screen for Null and Undefined\n    switch typ\n      when 'Null'      then 'Null'\n      when 'Undefined' then 'Undefined'\n      when \"Function\"  then val.name\n      when \"Object\"    then val.constructor.name\n      else                  typ\n\nexport tester = new Tester()\ntest    = tester.test\nunit    = tester.unit\nlog     = tester.log\n\nexport { test, unit, log }\n\n###\n\n  type:(val,lowerCase=true) =>\n    str = Object::toString.call(val)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    if if lowerCase then typ.toLowerCase() else type\n\n\n  klass:(val) =>\n    typ = \"Unknown\"\n    try\n      typ = val.constructor.name\n    catch error\n      console.log( \"Tester.class(val) name error\", { val:val, error:error } )\n      typ = @type(val,false)\n    typ\n\n  type:(val) =>\n    str = Object::toString.call(val).toLowerCase()\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    # console.log( \"Tester.type(val)\", { val:val, str:str, tok:tok, typ:typ } )\n    typ\n\n  # Tester.types = ['Boolean','Number','String','Function','Object','Array','Date','RegExp','Undefined','Null']\n\n  # Experimental\n  # Return basic and class types in their original camel case\n  # Instances are return as Object\n  typeClass:(val) =>\n    typ = \"Unknown\"\n    try\n      typ = Object::toString.call(val)\n      typ = typ.split(' ')[1].substring(0,typ.length-1)\n    catch error\n      console.error( 'Tester.klass(val) call(val) error', { val:val, error:error } )\n    typ\n\n\n  type: do () =>\n    classToType = {}\n\n    for name in [\"Boolean\", \"Number\", \"String\", \"Function\", \"Object\", \"Array\", \"Date\",\n      \"RegExp\", \"Symbol\", \"Event\", \"Element\", \"Undefined\", \"Null\"]\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase()\n\n    (val) ->\n      key = Object::toString.call(val)\n      typ = classToType[key] or \"object\"\n      console.log( \"Tester.type()\", { key:key, val:val, typ:typ } )\n      typ\n\n# -- bdd -- Behavion Driven Design like Jasmine --\n# Imports: import { bdd }     from \"../test/Tester.js\"\n#          import Calculator  from \"../calculator/Calculator.js\"\n#          const  calculator = new Calculator()\n# Specify: bdd( text, closure )\n# Example: bdd( 'can add two positive numbers', =>\n#      result = calculator.add( 2, 3 )\n#      bdd().expect(result).toBe( 5 )\n\nstatus.assert.text = \"-- Passed -- #{status.result.type}s are equal for \" + status.assert.text\nstatus.assert.text = \"-- Failed -- #{status.result.type}s are not equal for \" + status.assert.text\n\nexpect:( result ) ->\n@result = result\n@\n\ntoBe:( expect ) =>\n@expect = expect\n@\n\n###"
  ]
}
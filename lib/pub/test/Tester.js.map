{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    @stream = null # Optional streaming publisher module that is set by @injectStream( stream )\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    @logToConsole   = true\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its validating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @stringSubject  = \"TestString\"  # Subject for publishing each test status string\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @describe( description, suite )\n    @description = \"\"\n    @suite       = \"\"\n\n    # Accummulate test status state\n    @text         = null # set by test() that is passed inside eq() and sent to run()\n    @statusText   = \"\"\n    @statusClear  = true\n    @blockText    = \"\"\n    @blockClear   = true\n    @code         = \"\"\n    @modules      = {}\n    @passed       = []\n    @failed       = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream       = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @stringSubject  = if options.stringSubject?  then options.stringSubject  else \"TestString\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test -- Pass a closeure in the form of  (t) => { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) => { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test('2 + 3 = 5', (t) ->\n  #     t.eq( add(2,3), 5 ) )\n  test:( text, closure ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text     = text               # @text is latter referenced inside eq()\n    @code     = closure.toString() # @code is latter referenced inside eq()\n    closure(@)\n    @  # returns tester instance for chaining\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  unit:( text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    @run( result, expect, \"eq\" ) # returns tester instance for chaining\n\n  # Validate and diagnose a result that fits a schema both of type 'object' or 'array'\n  #  Very usefull for a result originating from a'.json' file and parsed by JSON.parse(...)\n  #  Very usefull for a schema originating from a'.json' file and parsed by JSON.parse(...)\n  fits:( text, result, schema ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    # if @debug\n    #  console.log( \"Tester.fits(result,schema)\", { type:@type(result), result:result, schema:schema, status:status } )\n    @run( result, schema, \"schema\" )  # returns tester for chaining  is expect = @toSchema( expect, op ) needed?\n\n  eq:( result, expect ) =>\n    @run( result, expect, \"eq\" )\n\n  run:( text, result, expect, op ) =>\n    return @ not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect, op:op } ) if  @debug\n    status = @initStatus( result, expect, op )\n    status = @assert(     result, expect, op, status )\n    @report(              result, expect, op, status )\n    @    # returns tester instance for chaining\n\n  describe:( description, suite=null ) =>\n    @description = description\n    @suite       = if suite? then suite else null\n    @\n\n  initStatus:( result, expect, op ) ->\n    module = text.split('.')[0]\n    eType  = if op is \"schema\" then \"schema\" else @type(expect)\n    {\n      assert:{ text:@text, pass:true, module:module, op:op, code:@code, info:\"\" }\n      result:{ text:\"\", type:@type(result), value:result }\n      expect:{ text:\"\", type:eType,         value:expect }\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(val) so asserions are only test when types match\n  #   Skips over @type(val) = \"function\"\n  assert:( result, expect, status, op, level=0, key=null, index=null ) ->\n\n    # Covert expect to a schema object if op is schema\n    expect = @toSchema(expect,op)\n\n    # Check values and types\n    status = @checkValuesTypes( result, expect, status, op, key, index )\n\n    # Perform all comparisions\n    if status.assert.pass\n       status = switch @type(result)\n         when 'string','number','boolean' then @valuesEq(   result, expect, status, op )\n         when 'object'                    then @objectsEq(  result, expect, status, op, level )\n         when 'array'                     then @arraysEq(   result, expect, status, op, level )\n         else                                  @unknownsEq( result, expect, status )  # just a fallback\n       @examine( status.assert.pass, result, expect, status, op, \"\", key, index )\n\n    # Store status in @passed and @failed arrays\n    if level is 0\n       @passed.push(status) if     status.assert.pass\n       @failed.push(status) if not status.assert.pass\n    status\n\n  # Generates informative text in status\n  examine:( pass, result, expect, status, op, info, key, index ) ->\n    expect = if op is \"schema\" and not @isSchema(expect) then @toSchema(expect,op) else expect\n    value  = if op is \"schema\" then expect.value else expect\n    eType  = if op is \"schema\" then expect.type  else @type(expect)\n    prefix = if pass then \"-- Passed -- \" else \"-- Failed -- \"\n    status.assert.text   = prefix + status.assert.text\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.assert.info  += info\n    status.assert.code   = if @isStr(@code) then @code else \"\"\n    status.result.text  += @textValue( \"Result\", @type(result), result, key, index )\n    status.expect.text  += @textValue( \"Expect\", eType,         value,  key, index )\n    status\n\n  # Convert expect to a schema object if op is schema\n  isSchema:( v ) ->\n    v.op? and v.type? and v.value? and v.range? and v.op? and v.size?\n\n  # Format \"type:ranges or value:length:oper?\"\n  # Examples:\n  #   \"array:[[0,360],[0,100],[0,100]]:eq?\"\n  #   { type:\"array\", ranges:[[0,360],[0,100],[0,100]], oper:\"eq\", opt=\"?\" }\n  #   \"array:[0,255]\" } # Range is applies to all array values\n  #   { type:\"array\", ranges:[0,255]\n  #   \"object:{r:[0,255],g:[0,255],b:[0,255]}\n  #   \"string:James\"\n  #   \"number:[0,100]\"\n  #   \"boolean\"\n  toSchema:( expect,   op ) ->\n    return   expect if op isnt \"schema\"\n    schema = { type:\"any\", ranges:['any'], value:\"any\", length:\"any\", oper:\"eq\", opt:\"1\" }\n    switch @type(expect)\n      when \"string\"\n        schema = @parseSchema( expect, schema )\n\n      when \"object\"\n        schema.opt    = if expect.opt is \"?\"        then expect.opt    else  \"1\" # \"1\" implies key required\n        schema.type   = if @isStr(expect.type)      then expect.type   else  \"any\"\n        schema.value  = if expect.value?            then expect.value  else  \"any\"\n        schema.ranges = if @isArray(expect.ranges ) then expect.ranges else [\"any\"]\n        schema.length = if @isNum(  expect.length ) then expect.length else  \"any\"\n        schema.oper   = if @isStr(  expect.oper   ) then expect.oper   else  \"eq\"\n    schema\n\n  # parseSchemaStr\n  parseSchema:( expect, schema ) ->\n    schema.opt  = if @tail(expect,\"?\",true) is \"?\" then \"?\" else \"1\" # @tail() pops the '?'\n    splits      = expect.split(\":\")\n    length      = splits.length\n    schema.type = if length >= 1 then splits[0]\n    if length >= 1\n      if splits[1][0] is \"[\"\n        schema.ranges = @toRanges( splits[1] )\n        schema.value  = \"any\"\n      else if splits[1].includes(\"|\")\n        schema.ranges = @toEnums( splits[1] )\n        schema.value  = \"any\"\n      else\n        schema.ranges = \"any\"\n        schema.value  = @toType( splits[1], schema.type )\n      schema.length    = if length >= 2 then @toInt( splits[2] ) else \"any\"\n      schema.oper      = if length >= 3 then @toStr( splits[3] ) else \"eq\"\n      schema\n\n  # Range parser for @toSchema(expect,op)\n  toRanges:( splits ) =>\n    ranges = []\n    for split in splits\n      switch @type(split)\n        when 'string'\n          for split in splits\n            if @head(split,\"[[\",false) is '[[' and @tail(split,\"]]\",false) is \"]]\"\n              strs = @toArray(split)\n              for str in strs\n                ranges.push[@toArray(str)]\n              return ranges\n            else if @head(split) is '[' and @tail(split) is \"]\"\n              ranges.push[@toArray(split)]\n              return ranges\n        when 'array'\n          if @isArray(split[0])\n            for array in split\n              ranges.push(array)\n            return ranges\n          else\n            ranges.push[split]\n            return ranges\n    ranges\n\n  checkValuesTypes:( result, expect, status, op, key, index ) ->\n    rType =                          @type(result)\n    eType = if op isnt \"schema\" then @type(expect) else expect.type\n    types = [\"string\",\"number\",\"boolean\",\"object\",\"array\"]\n    info  = switch\n      when @isNot(result)\n        \" Result of #{rType} is not defined\\nExpect is type '#{eType}\"\n      when @isNot(expect)\n        \" Expect of #{eType} is not defined\\nResult is type '#{rType}\"\n      when op is 'schema'\n        if eType is 'any'\n          \"\"\n        else if etype includes(\"|\")\n          eTypes = eType.split(\"|\")\n          if @inArray(rType,eTypes)\n            \"\"\n          else\n            \" Result type is '#{rType}' that is not in\\nExpect schema types '#{eType}'\"\n        else if rType isnt eType\n          \" Result type is '#{rType}'\\nExpect type is '#{eType}' from schema\"\n      when rType isnt eType\n        \" Types do not match\\nResult type is '#{rType}'\\nExpect type is '#{eType}'\"\n      when rType is \"function\"\n        \" Result type is 'function'\\nExpect type is '#{eType}'\"\n      when eType is \"function\"\n        \" Expect type is 'function'\\nResult type is '#{rType}'\"\n      when not @inArray(rType,types)\n        \" Result is type '#{rType}' an unknown type is type '#{eType}'\"\n      when not @inArray(eType,types)\n        \" Result is type '#{rType}'\\nExpect is type '#{eType}' an unknown type\"\n      else\n        \"\"\n    if @isStr(info)\n      @examine( false, result, expect, status, op, info, key, index )\n    else\n      status\n\n  # Equality check for \"string\",\"number\",\"boolean\" types\n  valuesEq:( result, expect, status, op ) ->\n\n    value = expect\n    if op is \"schema\"\n      value  = expect.value\n      ranges = expect.ranges\n      oper   = switch\n        when ranges is \"any\" then \"eq\"\n        when @isArray(ranges)\n          if @isArray(ranges[0]) then \"ranges\" else \"range\"\n\n    status.assert.pass = switch oper\n      when value is \"any\" then true\n      when op is \"range\" then @inRange( result, ranges )\n      when op is \"ranges\" and @isArray( result )\n        pass   = true\n        length = Math.min( result.length, ranges.length )\n        for i in [0...length]\n          if @isArray(result[i]) and @isArray(ranges[i])\n            pass = pass and @inRange( result[i], ranges[i] )\n        pass\n      when \"eq\" then result is   value\n      when \"le\" then result <=   value\n      when \"lt\" then result <    value\n      when \"ge\" then result >=   value\n      when \"lt\" then result >    value\n      when \"ne\" then result isnt value\n      else           false\n    status\n\n  # if range.length = 3 min=range[0], max=range[1] and tol=range[2]\n  # if range.length = 2 min=range[0], max=range[1] and tol=0\n  # if range.length = 1 min=0,        max=range[0] and  tol=0\n  @inRange:( result, range ) ->\n    pass  = true\n    rType = @type(result)\n    if @inArray(rType,[\"string\",\"number\"])\n      len = range.length\n      min = 0\n      max = range[0]\n      tol = 0\n      if len >= 2\n        min = range[0]\n        max = range[1]\n        tol = range[2] if len is 3\n      pass = pass and ( min-tol <= result and result <= max+tol )\n    else if rType is 'array' and @inArray(@type(result[0]),[\"string\",\"number\"])\n      for val in result\n        pass = pass and @inRange( val, range )\n    pass\n\n  # Just a fallback when types are not fully screened\n  unknownsEq:( result, expect, status ) ->\n    status.assert.pass  = false\n    status.assert.info += \"unknown types for comparision\"\n    status\n\n  textValue:( name, value, key, index ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isStr(key)\n    ref = \" at index: #{index} \" if @isNum(index)\n    \"#{name}#{ref}where type is #{@type(value)} and value is #{@toStr(value)}\"\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, status, op, level ) ->\n\n    # Check that the expect object has all the keys that the result object has\n    for own key, val of result when  expect[key]?\n      status = @examine( false, val, expect[key], status, op, \"missing expect\", key, null )\n\n    # Check that the result object has all the keys that the expect object has\n    for own key, val of expect when ( result[key]? or ( op is \"schema\" and val.opt is \"1\" ) )\n      status = @examine( false, result[key], val, status, op, \"missing result\", key, null )\n\n    # Assert each value for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], val, status, op, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, status, op, level ) ->\n    value = expect\n\n    # Check against the schema when present\n    if op is \"schema\"\n      value = expect.value\n      if value is 'any'\n         status.assert.pass = true\n         return status\n      else if value.size isnt \"any\" and result.length > value.size\n         info   = \" Result length exceeds the maximum size #{value.size}\"\n         info  += \" Result length is #{result.length}\"\n         info  += \" Size is #{value.size}\"\n         return @examine( false, result, expect, status, op, info, null, null )\n      else if not @isArray(value)\n         return status\n\n    # Examine the array lengths\n    if result.length isnt value.length\n      info   = \" different array lengths\"\n      info  += \" Result length is #{result.length}\"\n      info  += \" Expect length is #{value.length}\"\n      status = @examine( false, result, expect, status, op, info, null, null )\n\n    # Assert each value within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], status, op, ++level, null, i )\n\n    status\n\n  report:( status, result, expect ) ->\n    eq = if status.assert.pass then 'is' else 'not'\n    @blockText   = \"\" if @blockClear\n    @statusText  = \"\"\"\\n#{status.assert.text} \"\"\"\n    @statusText += \"\"\"#{eq} #{@toStr(expect)}\"\"\" if status.result.type isnt \"function\"\n    @statusText += status.assert.info if @isStr(status.assert.info)\n    @statusText += \"\"\"\\n   #{@textResult( status, result )}\"\"\" if @verbose or not status.assert.pass\n    @statusText += \"\"\"\\n   #{@textExpect( status, expect )}\"\"\" if @verbose or not status.assert.pass\n    #statusText += \"\\n\"+@code              if @isStr(@code) and ( @verbose or not status.assert.pass )\n    @blockText  += @statusText if not @statusClear\n    @statusClear = false\n    @blockClear  = false\n\n    if @isDef(@stream)\n      @stream.publish( @statusSubject, status )\n      @stream.publish( @stringSubject, status )\n    return\n\n  status:() ->\n    @statusClear = true\n    @statusText\n\n  block:() ->\n    @blockClear = true\n    @blockText\n\n  runUnitTests:( paths ) =>\n    for path in paths\n      modulePath = @path( path )\n      console.log( \"\\n-- Started Unit Testing for: #{modulePath.name} in #{modulePath.path}\" ) if @logToConsole\n      await `import( path /* @vite-ignore */ )`\n    @summary()\n    return\n\n  path:( path ) ->\n    dirs   = path.split(\"/\")\n    module = @tail(dirs).split(\"-\")[0]\n    @modules[module] = { name:module, path:path }\n    console.log( 'Tester.path(path)', { path:path, dirs:dirs, module:module } ) if @debug\n    @modules[module]\n\n  summary:( module=null ) =>\n    path = if module? and @modules[module]? then @modules[module].path else \"?\"\n    if @debug\n      console.log( 'Tester.summary(module)', { module:module, modules:@modules, key:@modules[module], path:path } )\n    summaryText = \"\"\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      summaryText += \"\"\"\\n\\n-- Summary - for #{module} in #{path}\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    else\n      fullCount = @passed.length + @failed.length\n      summaryText += \"\"\"\\n\\n-- Summary - for all tests\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@passed.length,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@failed.length,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,     fullCount)} tests total\"\"\"\n\n    if @isDef(@stream) and @stream.hasSubscribers( @summarySubject )\n      @stream.publish( @summarySubject, summaryText )\n\n    summaryText = @block() + summaryText # Prepend any block statuses\n\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @failed,      @passed )\n      @reviewsLocal( { failed:false, passed:false } )\n      \n    summaryText\n\n  # Type Assertions that leverage @type(arg) the improved typeof(arg)\n  isType:(v,t)    =>  @type(v) is t\n  isNull:(d)      =>  @isType(d,'null')\n  isUndef:(d)     =>  @isType(d,'undefined')\n  isDef:(d)       =>  @type(d) isnt 'null' and @type(d) isnt 'undefined'\n  isNot:(d)       =>  not @isDef(d)\n  isStr:(s)       =>  @isType(s,\"string\") and s.length > 0 and s isnt 'None'\n  inStr:(s,e)     =>  @isStr(s) and s.indexOf(e) > -1\n  isNum:(n)       =>  @isType(n,\"number\")\n  isNaN:(n)       =>  @isNum(n) and Number.isNaN(n)\n  isObj:(o)       =>  @isType(o,\"object\")\n  inObj:(o,k)     =>  @isObj(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n  toKeys:(o)      =>  if @isObj(o) then Object.keys(o) else []\n  isVal:(v)       =>  @isType(v,\"number\") or @isType(v,\"string\") or @isType(v,\"boolean\")\n  isFunc:(f)      =>  @isType(f,\"function\")\n  isArray:(a)     =>  @isType(a,\"array\") and a.length? and a.length > 0\n  isBoolean:(v)   =>  @isType(a,\"array\")\n  inArray:(a,e)   =>  @isArray(a) and a.includes(e)\n  atIndex:(a,e)   =>  if @isArray(a) then a.indexOf(e) else -1\n  time:()         =>  new Date().getTime()\n\n  head:(v,action=false,pop=false) ->\n    val = null\n    switch @type(v)\n      when 'array'\n        switch @type(action)\n          when 'boolean'\n            val = v[0]\n            v   = v.shift() if action\n      when 'string'\n        switch @type(action)\n          when 'boolean'\n            val = v.charAt(0)\n            v   = v.substring(1) if action\n          when 'string' and v.startsWith(action)\n            val = action\n            v   = v.substring(action.length) if pop\n    pop\n\n  tail:(v,action=false) ->\n    pop = null\n    switch @type(v)\n      when 'array'\n        pop = v[v.length-1]\n        v   = v.pop() if @isType(action,\"boolean\") and action\n      when 'string'\n        switch @type(action)\n          when 'boolean'\n            pop = v.charAt(v.length-1)\n            v   = v.substring( 0, v.length-1 ) if action\n          when 'string' and v.endsWith(action)\n            pop = action\n            v   = v.substring(0,v.length-action.length)\n    pop\n\n  # Unlike the built in Array v.slice(beg,end) where beg is a zero-based index and end\n\n  # Here beg starts at 1 and end includes the last position or is set to beg if ommitted\n  #  an array slice( ['a','b','c'], 1, 2 ) returns ['a','b']\n  #  an array slice( ['a','b','c'], 2    ) returns ['b']\n  #  a string slice( ['abc'],       1, 2 ) returns   'ab'\n  #  a string slice( ['abc'],       2    ) returns   'b'\n  # where with Array.slice() it is open\n  slice:( v, beg, end=null, remove=false ) ->\n    end if @isDef(end) then end else beg\n    pop = null\n    switch @type(v)\n      when 'array'\n        pop = if remove then v.splice(beg-1,end+1) else v.slice(beg-1,end+1)\n      when 'string'\n        pop = v.splice(beg-1,end+1)\n        v   = v.substring(0,beg-1) + v.substring(end+1) if remove\n    pop\n\n  isFloat:( val ) ->\n    switch @type(val)\n      when \"number\" then true\n      when \"string\"\n        regex = /^-?\\d+(?:[.,]\\d*?)?$/\n        regex.test(val)\n      else false\n\n  isInt:( val ) ->\n    switch @type(val)\n      when \"number\" then true\n      when \"string\"\n        regex = /^-?\\d+$/\n        regex.test(val)\n      else false\n\n  # Converters\n    toType:( val, type ) ->\n      switch type\n        when \"string\"  then @toStr(     val )\n        when \"number\"  then @toNum(     val )\n        when \"boolean\" then @toBoolean( val )\n        when \"array\"   then @toArray(   val )\n        when \"object\"  then @toObj(     val )\n        else\n          console.error( \"Tester.toType(type,val) unknown type\", { type:type, val:val } )\n          null\n\n  toStr:( value, enclose=false ) =>\n    str = \"\"\n    switch @type(value)\n      when 'string'\n        str = if enclose then '\"'+value+'\"' else value\n      when 'function'\n        str = \"?\"\n      when 'object' # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"{ \"\n        for own key, val of value\n          str += key+\":\"+@toStr(val,true)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma and space\n        str += \" }\"\n      when 'array'  # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"[ \"\n        for val in value\n          str += @toStr(val,true)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma  and space\n        str += \" ]\"\n      else\n        str = value.toString()\n    console.log( \"Tester.toStr(val)\", { type:@type(value), value:value, str:str } ) if enclose and @debug\n    str\n\n  toNum:( arg ) ->\n    switch @type(arg)\n      when 'string' and @isFloat(arg) then @toFloat(arg)\n      when 'string' and @isInt(arg)   then @toInt(arg)\n      when 'number'\n        if Number.isInteger(arg) then @toInt(arg) else @toFloat(arg)\n      else NaN\n\n  toFloat:( arg ) ->\n    switch @type(arg)\n      when 'number' then arg\n      when 'string' then parseFloat(arg)\n      else NaN\n\n  toInt:( arg ) ->\n    switch @type(arg)\n      when 'number' then Math.round(arg)\n      when 'string' then   parseInt(arg)\n      else NaN\n\n  # Return a number with fixed decimal places\n  toFixed:( arg, dec=2 ) ->\n    num = switch @type(arg)\n      when 'number' then arg\n      when 'string' then parseFloat(arg)\n    num.toFixed(dec)\n\n  toBoolean:( arg ) ->\n    bool = switch @type(arg)\n      when 'boolean' then arg\n      when 'string'\n        switch arg \n          when \"true\"  then  true\n          when \"false\" then false\n          else              false\n      when 'number' then arg isnt 0\n      else false\n    bool\n\n  toArray:( value, type, sep=\"|\" ) =>\n    switch @type(value)\n      when 'string'\n        if @head(value) is \"[\" and @tail(value) is \"]\" # Strip off brackets\n          value = @slice(value,2,value.length-1)\n        array = []\n\n        strs  = @slice(value,2,value.length-1).split(sep)\n        for str in strs\n          array.push( @toType( str, type ) )\n        array\n      when 'array'\n        value\n      else\n        null\n\n  toObj:( arg ) =>\n    obj  = {}\n    type = @type(arg)\n    switch type\n      when 'object' then obj = arg\n      when 'array'  then obj[i] = arg[i] for i in [0...arg.length]\n      when 'number','boolean','function'\n        obj[type] = arg\n      when 'string'\n        obj = arg.split(',')\n                 .map( (x) => x.split(':').map( (y) => y.trim() ) )\n                 .reduce( (a,x) => a[x[0]] = x[1]; a {} )\n      else obj\n\n    # const obj = 'foo: 1, bar: 2'\n    toObj2:( arg ) ->\n      arg.split(',') # split into ['foo: 1', 'bar: 2']\n         .map(  (keyVal) =>             # go over each keyVal value in that array\n            return keyVal.split(':')    #  split into ['foo', '1'] and on the next loop ['bar', '2']\n            .map( (y) => y.trim() ) )   # loop over each value in each array and remove trailing whitespace\n        .reduce( (acc,curr) =>          # reduce() takes a func and a beginning object, we're making fresh object\n            acc[curr[0]] = curr[1]; acc {} )\n        # accumulator starts at the beginning obj, in our case {}, and \"accumulates\" values to it\n        # since reduce() works like map() in the sense it iterates over an array, and it can be chained upon things like map(),\n        # first time through it would say \"okay accumulator, accumulate currentValue[0] (which is 'foo') = currentValue[1] (which is '1')\n        # so first time reduce runs, it starts with empty object {} and assigns {foo: '1'} to it\n        # second time through, it \"accumulates\" {bar: '2'} to it. so now we have {foo: '1', bar: '2'}\n        #  return when there are no more things in the array to iterate over,\n\n  toCap:( str ) ->\n    str.charAt(0).toUpperCase() + str.substring(1)\n\n  unCap:( str ) ->\n    str.charAt(0).toLowerCase() + str.substring(1)\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) =>\n    return false if @isNot(e)\n    switch @isType(e)\n      when 'object' then Object.getOwnPropertyNames(e).length is 0\n      when 'array'  then e.length is 0\n      when 'string' then e.length is 0\n      else               false\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) =>\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt '$' and b isnt '_'\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = ' ' + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  # An improved typeof() that follows the convention by returning types in lower case\n  # by default. The basic types returned are:\n  # boolean number string function object array date regexp undefined null\n  type:(val,lowerCase=true) =>\n    str = Object::toString.call(val)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    if lowerCase then typ.toLowerCase() else typ\n\n  scheme:( val,op='eq' ) =>\n    if op is 'schema' then 'schema' else @type(val)\n\n  # A more detail type that returns basic types, class, object and function name in upper case\n  klass:(val) =>\n    typ = @type(val,false) # Start with basic type to catch 'Null' and 'Undefined'\n    switch typ\n      when 'Null'      then 'Null'\n      when 'Undefined' then 'Undefined'\n      when \"Function\"  then val.name\n      when \"Object\"    then val.constructor.name\n      else                  typ\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( failed, passed ) =>\n    localStorage.setItem( 'TestsFailed', JSON.stringify( failed ) )\n    localStorage.setItem( 'TestsPassed', JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n    return if not @debug\n    if reviewFailed\n      failLocals = localStorage.getItem( 'TestsFailed' )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        for failStatus in failStatuses\n          console.log( failStatus ) if @logToConsole\n    if reviewPassed\n      passLocals = localStorage.getItem( 'TestsPassed' )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        for passStatus in passStatuses\n          console.log( passStatus ) if @logToConsole\n    return\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nfits = tester.unit\nexport { test, unit, fits }\n\n###\n  # Validate and diagnose a result that fits a schema both of type 'object' or 'array'\n  #  Very usefull for a result originating from a'.json' file and parsed by JSON.parse(...)\n  #  Very usefull for a schema originating from a'.json' file and parsed by JSON.parse(...)\n  fits2:( text, result, schema ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    status = @initStatus( result, schema, text, 'schema', \"\" )\n    status = switch @type(result)\n      when 'object' then @objectsEq( result, schema, status, level )\n      when 'array'  then @arraysEq(  result, schema, status, level )\n      else               @assert(    result, schema, status )\n    if @debug\n      console.log( \"Tester.fits(result,schema)\", { type:@type(result), result:result, schema:schema, status:status } )\n    @\n###"
  ]
}
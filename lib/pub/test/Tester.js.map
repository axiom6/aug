{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA;EAAA;;;AAAA,OAAO,IAAP,MAAA;;AAEM,SAAN,MAAA,OAAA,QAAqB,KAArB;EAEE,WAAY,CAAA,CAAA;;;;;;;;;;;;;QA+DZ,CAAA,WAAA,CAAA;QAcA,CAAA,SAAA,CAAA;QAgJA,CAAA,aAAA,CAAA;QAMA,CAAA,eAAA,CAAA;QAyDA,CAAA,kBAAA,CAAA;QA4CA,CAAA,eAAA,CAAA,oBAvUF;;IAGI,IAAC,CAAA,OAAD,GAAkB,KAHtB;;IAKI,IAAC,CAAA,OAAD,GAAkB,KALtB;IAMI,IAAC,CAAA,OAAD,GAAkB,MANtB;IAOI,IAAC,CAAA,KAAD,GAAkB,MAPtB;IAQI,IAAC,CAAA,SAAD,GAAkB,SARtB;IASI,IAAC,CAAA,aAAD,GAAkB,aATtB;IAUI,IAAC,CAAA,cAAD,GAAkB,cAVtB;;;;;IAeI,IAAC,CAAA,GAAD,GAAS,OAAO,CAAC;IACjB,IAAC,CAAA,KAAD,GAAS,OAAO,CAAC,MAhBrB;;IAmBI,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY,KArBhB;;IAwBI,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY,KA1BhB;;IA6BI,IAAC,CAAA,IAAD,GAAS,GA7Bb;;IAgCI,IAAC,CAAA,OAAD,GAAY,CAAA;IACZ,IAAC,CAAA,QAAD,GAAY,CAAA,EAjChB;IAkCI,IAAC,CAAA,QAAD,GAAY,GAlChB;;;IAsCI,IAAC,CAAA,MAAD,GAAW;EAvCD;;EAyCZ,UAAW,CAAE,OAAF,CAAA;IACT,IAAC,CAAA,OAAD,GAAqB,uBAAH,GAAgC,OAAO,CAAC,OAAxC,GAA4D;IAC9E,IAAC,CAAA,OAAD,GAAqB,uBAAH,GAAgC,OAAO,CAAC,OAAxC,GAA4D;IAC9E,IAAC,CAAA,OAAD,GAAqB,uBAAH,GAAgC,OAAO,CAAC,OAAxC,GAA4D;IAC9E,IAAC,CAAA,OAAD,GAAqB,uBAAH,GAAgC,OAAO,CAAC,OAAxC,GAA4D;IAC9E,IAAC,CAAA,KAAD,GAAqB,qBAAH,GAAgC,OAAO,CAAC,KAAxC,GAA4D;IAC9E,IAAC,CAAA,SAAD,GAAqB,yBAAH,GAAgC,OAAO,CAAC,SAAxC,GAA4D;IAC9E,IAAC,CAAA,aAAD,GAAqB,6BAAH,GAAgC,OAAO,CAAC,aAAxC,GAA4D;IAC9E,IAAC,CAAA,cAAD,GAAqB,8BAAH,GAAgC,OAAO,CAAC,cAAxC,GAA4D;EARrE;;EAsBX,IAAK,CAAE,IAAF,EAAA,GAAQ,IAAR,CAAA;AACP,QAAA,OAAA,EAAA,MAAA,EAAA;2BAlEM;IAkEF,IAAQ,SAAS,CAAC,MAAV,KAAoB,CAApB,IAAyB,CAAI,CAAE,IAAC,CAAA,OAAD,IAAa,IAAC,CAAA,QAAd,IAA2B,IAAC,CAAA,QAA9B,CAArC;AACE,aAAO,KADT;KAAA,MAEK,IAAG,SAAS,CAAC,MAAV,KAAoB,CAApB,IAA0B,IAAC,CAAA,UAAD,CAAY,IAAI,CAAC,CAAD,CAAhB,CAA7B;MACH,OAAA,GAAU,IAAI,CAAC,CAAD;MACd,IAAC,CAAA,IAAD,GAAU,KADhB;MAEM,OAAA,CAAQ,IAAR,EAHG;KAAA,MAIA,IAAG,SAAS,CAAC,MAAV,KAAoB,CAApB,IAA0B,CAAI,IAAC,CAAA,UAAD,CAAY,IAAI,CAAC,CAAD,CAAhB,CAAjC;MACH,MAAA,GAAS,IAAI,CAAC,CAAD;MACb,MAAA,GAAS,IAAI,CAAC,CAAD;MACb,IAAC,CAAA,IAAD,GAAU;MACV,IAAC,CAAA,GAAD,CAAM,IAAN,EAAY,MAAZ,EAAoB,MAApB,EAJG;;WAKL;EAZG;;EAcL,EAAG,CAAE,MAAF,EAAU,MAAV,CAAA;2BA/EC;WAgFF,IAAC,CAAA,GAAD,CAAM,IAAC,CAAA,IAAP,EAAa,MAAb,EAAqB,MAArB;EADC,CA7EL;;;;EAkFE,GAAI,CAAE,IAAF,EAAQ,MAAR,EAAgB,MAAhB,CAAA;IACF,IAAY,CAAI,IAAC,CAAA,OAAjB;AAAA,aAAO,KAAP;;IACA,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,UAAD,CAAa,MAAb,EAAqB,MAArB,EAA6B,IAA7B;IACZ,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,MAAD,CAAa,MAAb,EAAqB,MAArB,EAA6B,IAAC,CAAA,QAA9B;WACZ;EAJE,CAlFN;;;;EAyFE,UAAW,CAAE,MAAF,EAAU,MAAV,EAAkB,IAAlB,CAAA;WACT;MACE,MAAA,EAAO;QAAE,IAAA,EAAK,IAAP;QAAa,IAAA,EAAK,IAAlB;QAAwB,MAAA,EAAO,IAAC,CAAA,QAAhC;QAA0C,MAAA,EAAO,IAAC,CAAA,QAAlD;QAA4D,IAAA,EAAK;MAAjE,CADT;MAEE,MAAA,EAAO;QAAE,IAAA,EAAK;MAAP,CAFT;MAGE,MAAA,EAAO;QAAE,IAAA,EAAK,EAAP;QAAa,IAAA,EAAK,IAAC,CAAA,IAAD,CAAM,MAAN,CAAlB;QAAiC,KAAA,EAAM;MAAvC,CAHT;MAIE,MAAA,EAAO;QAAE,IAAA,EAAK,EAAP;QAAa,IAAA,EAAK,IAAC,CAAA,IAAD,CAAM,MAAN,CAAlB;QAAiC,KAAA,EAAM;MAAvC;IAJT;EADS,CAzFb;;;;;EAoGE,MAAO,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,QAAM,CAAhC,EAAmC,MAAI,IAAvC,EAA6C,QAAM,IAAnD,CAAA;AAET,QAAA,MAAA,EAAA,IAAA;;IACI,MAAA,GAAS,IAAC,CAAA,gBAAD,CAAmB,MAAnB,EAA2B,MAA3B,EAAmC,MAAnC,EAA2C,GAA3C,EAAgD,KAAhD,EADb;;IAII,IAAG,IAAC,CAAA,QAAD,CAAW,MAAX,CAAH;MACE,MAAA,GAAS,IAAC,CAAA,QAAD,CAAY,MAAZ;MACT,MAAA;AAAS,gBAAO,MAAM,CAAC,IAAd;AAAA,eACF,OADE;mBACW,IAAC,CAAA,OAAD,CAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,KAAnC,EAA0C,GAA1C,EAA+C,KAA/C;AADX,eAEF,OAFE;mBAEW,IAAC,CAAA,OAAD,CAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,KAAnC,EAA0C,GAA1C,EAA+C,KAA/C;AAFX;mBAGF,IAAC,CAAA,OAAD,CAAU,KAAV,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,CAAA,oBAAA,CAAA,CAAuB,MAAM,CAAC,IAA9B,CAAA,CAAzC,EAA+E,GAA/E,EAAoF,KAApF;AAHE;;AAIT,aAAO,MAAM,CAAC,MAAM,CAAC,KANvB;KAJJ;;IAaI,IAAA,GAAO,IAAC,CAAA,IAAD,CAAO,MAAP;IACP,MAAA;AAAS,cAAO,IAAP;AAAA,aACD,QADC;AAAA,aACS,KADT;AAAA,aACgB,OADhB;AAAA,aACyB,SADzB;iBAEY,IAAC,CAAA,QAAD,CAAa,MAAb,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,IAArC,EAFZ;AAAA,aAGF,QAHE;iBAGY,IAAC,CAAA,SAAD,CAAa,MAAb,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,KAArC;AAHZ,aAIF,OAJE;iBAIY,IAAC,CAAA,QAAD,CAAa,MAAb,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,KAArC;AAJZ;iBAKY,IAAC,CAAA,UAAD,CAAa,MAAb,EAAqB,MAArB,EAA6B,MAA7B,EALZ;AAAA;;IAMT,IAAC,CAAA,OAAD,CAAU,MAAM,CAAC,MAAM,CAAC,IAAxB,EAA8B,MAA9B,EAAsC,MAAtC,EAA8C,MAA9C,EAAsD,EAAtD,EAA0D,GAA1D,EAA+D,KAA/D,EApBJ;;IAuBI,IAAG,KAAA,KAAS,CAAZ;MACE,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,MAAf;MACA,IAA8C,IAAC,CAAA,KAAD,CAAO,IAAC,CAAA,MAAR,CAA9C;QAAA,IAAC,CAAA,MAAM,CAAC,OAAR,CAAiB,IAAC,CAAA,aAAlB,EAAiC,MAAjC,EAAA;OAFF;;WAGA;EA5BK,CApGT;;;EAmIE,gBAAiB,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,GAA1B,EAA+B,KAA/B,CAAA;AACnB,QAAA,KAAA,EAAA,IAAA,EAAA;IAAI,KAAA,GAAS,IAAC,CAAA,IAAD,CAAM,MAAN;IACT,KAAA,GAAS,IAAC,CAAA,IAAD,CAAM,MAAN;IACT,IAAA;AAAQ,cAAA,KAAA;AAAA,cACD,IAAC,CAAA,KAAD,CAAO,MAAP,CADC;iBAEJ,CAAA,WAAA,CAAA,CAAc,KAAd,CAAA,iCAAA,CAAA,CAAuD,KAAvD,CAAA,CAAA;AAFI,cAGD,IAAC,CAAA,KAAD,CAAO,MAAP,CAHC;iBAIJ,CAAA,WAAA,CAAA,CAAc,KAAd,CAAA,iCAAA,CAAA,CAAuD,KAAvD,CAAA,CAAA;AAJI,eAKD,KAAA,KAAW,KAAX,IAAqB,CAAI,IAAC,CAAA,IAAD,CAAO,KAAP,EAAc,OAAd,EALxB;iBAMJ,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,mBAAA,CAAA,CAAmE,KAAnE,CAAA,CAAA;AANI,aAOD,KAAA,KAAS,UAPR;iBAQJ,CAAA,4CAAA,CAAA,CAA+C,KAA/C,CAAA,CAAA;AARI,aASD,KAAA,KAAS,UATR;iBAUJ,CAAA,4CAAA,CAAA,CAA+C,KAA/C,CAAA,CAAA;AAVI,cAWD,CAAI,IAAC,CAAA,IAAD,CAAO,KAAP,EAAc,SAAd,CAXH;iBAYJ,CAAA,iBAAA,CAAA,CAAoB,KAApB,CAAA,2BAAA,CAAA,CAAuD,KAAvD,CAAA,CAAA;AAZI,cAaD,CAAI,IAAC,CAAA,IAAD,CAAO,KAAP,EAAc,SAAd,CAbH;iBAcJ,CAAA,iBAAA,CAAA,CAAoB,KAApB,CAAA,mBAAA,CAAA,CAA+C,KAA/C,CAAA,iBAAA;AAdI;iBAgBJ;AAhBI;;IAiBR,IAAG,IAAC,CAAA,KAAD,CAAO,IAAP,CAAH;aACE,IAAC,CAAA,OAAD,CAAU,KAAV,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,IAAzC,EAA+C,GAA/C,EAAoD,KAApD,EADF;KAAA,MAAA;aAGE,OAHF;;EApBe;;EAyBjB,QAAS,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,IAA1B,CAAA;AACX,QAAA;IAAI,IAAe,MAAA,KAAU,KAAzB;AAAA,aAAO,KAAP;;IACA,IAAA;AAAO,cAAO,IAAP;AAAA,aACA,IADA;iBACU,MAAA,KAAY;AADtB,aAEA,IAFA;iBAEU,MAAA,IAAY;AAFtB,aAGA,IAHA;iBAGU,MAAA,GAAY;AAHtB,aAIA,IAJA;iBAIU,MAAA,IAAY;AAJtB,aAKA,IALA;iBAKU,MAAA,GAAY;AALtB,aAMA,IANA;iBAMU,MAAA,KAAY;AANtB;iBAOU;AAPV;;IAQP,MAAM,CAAC,MAAM,CAAC,IAAd,GAAqB;WACrB;EAXO,CA5JX;;;EA0KE,UAAW,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,CAAA;IACT,MAAM,CAAC,MAAM,CAAC,IAAd,GAAsB;IACtB,MAAM,CAAC,MAAM,CAAC,IAAd,IAAsB;WACtB;EAHS,CA1Kb;;;EAgLE,SAAU,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,KAA1B,CAAA;AAEZ,QAAA,GAAA,EAAA,GAAA,EAAA;IAEI,KAAA,aAAA;;;YAAoC;;;MAClC,MAAM,CAAC,MAAM,CAAC,IAAd,GAAsB;MACtB,MAAM,CAAC,MAAM,CAAC,IAAd,IAAsB,sBAAA,GAAyB;IAFjD;IAKA,KAAA,aAAA;;;YAAoC;;;MAClC,MAAM,CAAC,MAAM,CAAC,IAAd,GAAsB;MACtB,MAAM,CAAC,MAAM,CAAC,IAAd,IAAsB,sBAAA,GAAyB;IAFjD;IAKA,KAAA,aAAA;;;UAAgC,qBAAA,IAAiB;QAC/C,MAAA,GAAS,IAAC,CAAA,MAAD,CAAS,MAAM,CAAC,GAAD,CAAf,EAAsB,GAAtB,EAA2B,MAA3B,EAAmC,EAAE,KAArC,EAA4C,GAA5C,EAAiD,IAAjD;;IADX;WAEA;EAhBQ,CAhLZ;;;EAmME,QAAS,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,KAA1B,CAAA;AAEX,QAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,IAAA;;IACI,IAAG,MAAM,CAAC,MAAP,KAAmB,MAAM,CAAC,MAA7B;MACE,IAAA,GAAS;MACT,IAAA,IAAS,CAAA,kBAAA,CAAA,CAAqB,MAAM,CAAC,MAA5B,CAAA;MACT,IAAA,IAAS,CAAA,kBAAA,CAAA,CAAqB,MAAM,CAAC,MAA5B,CAAA;MACT,MAAA,GAAS,IAAC,CAAA,OAAD,CAAU,KAAV,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,IAAzC,EAA+C,IAA/C,EAAqD,IAArD,EAJX;KADJ;;IAQI,MAAA,GAAS,IAAI,CAAC,GAAL,CAAU,MAAM,CAAC,MAAjB,EAAyB,MAAM,CAAC,MAAhC;IACT,KAAS,sFAAT;MACE,MAAA,GAAS,IAAC,CAAA,MAAD,CAAS,MAAM,CAAC,CAAD,CAAf,EAAoB,MAAM,CAAC,CAAD,CAA1B,EAA+B,MAA/B,EAAuC,EAAE,KAAzC,EAAgD,IAAhD,EAAsD,CAAtD;IADX;WAEA;EAbO,CAnMX;;;EAqNe,MAAb,YAAa,CAAE,KAAF,CAAA;AACf,QAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA;IAAI,KAAA,uCAAA;;MACE,UAAA,GAAa,IAAC,CAAA,MAAD,CAAS,IAAT;MACb,IAA4F,IAAC,CAAA,OAA7F;QAAA,OAAO,CAAC,GAAR,CAAa,CAAA,+BAAA,CAAA,CAAkC,UAAU,CAAC,IAA7C,CAAA,IAAA,CAAA,CAAwD,UAAU,CAAC,IAAnE,CAAA,CAAb,EAAA;;MACA,MAAM;IAHR;IAIA,IAAC,CAAA,QAAD,CAAA,EALW;EAAA;;EAQb,MAAO,CAAE,QAAF,EAAY,QAAZ,EAAsB,WAAS,IAA/B,CAAA;2BA/NH;IAgOF,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY;WACZ;EAJK;;EAMP,QAAS,CAAE,QAAF,EAAY,QAAZ,EAAsB,WAAS,IAA/B,CAAA;2BArOL;IAsOF,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY;IACZ,IAAC,CAAA,QAAD,GAAY;WACZ;EAJO;;EAMT,gBAAiB,CAAE,IAAF,EAAQ,MAAR,CAAA;AACnB,QAAA;IAAI,IAAA,GAAU,IAAH,GAAa,iBAAb,GAAoC;IAC3C,IAAG,IAAC,CAAA,KAAD,CAAO,IAAC,CAAA,QAAR,CAAA,IAAsB,IAAC,CAAA,QAAQ,CAAC,MAAV,CAAiB,CAAjB,CAAA,KAAyB,GAAlD;MACE,IAAA,IAAQ,IAAC,CAAA,QAAD,GAAY,GAAZ,GAAkB,IAAC,CAAA,KAAD,CAAO,MAAP,CAAlB,GAAmC,IAD7C;;WAEA;EAJe;;EAMjB,SAAU,CAAE,IAAF,EAAQ,KAAR,EAAe,MAAI,IAAnB,EAAyB,QAAM,IAA/B,CAAA;AACZ,QAAA,GAAA,EAAA;IAAI,GAAA,GAAM;IACN,IAA+B,IAAC,CAAA,KAAD,CAAO,GAAP,CAA/B;MAAA,GAAA,GAAM,CAAA,QAAA,CAAA,CAAW,GAAX,CAAA,EAAN;;IACA,IAA+B,IAAC,CAAA,KAAD,CAAO,KAAP,CAA/B;MAAA,GAAA,GAAM,CAAA,WAAA,CAAA,CAAc,KAAd,CAAA,EAAN;;IACA,IAAG,IAAA,KAAQ,QAAX;MACE,MAAA,GAAS;aACT,CAAA,KAAA,CAAA,CAAQ,IAAR,CAAA,CAAA,CAAe,GAAf,CAAA,UAAA,CAAA,CAA+B,MAAM,CAAC,IAAtC,CAAA,aAAA,CAAA,CAA0D,MAAM,CAAC,IAAjE,CAAA,YAAA,CAAA,CAAoF,MAAM,CAAC,IAA3F,CAAA,CAAA,EAFF;KAAA,MAAA;aAIE,CAAA,KAAA,CAAA,CAAQ,IAAR,CAAA,CAAA,CAAe,GAAf,CAAA,UAAA,CAAA,CAA+B,IAAC,CAAA,IAAD,CAAM,KAAN,CAA/B,CAAA,aAAA,CAAA,CAA2D,IAAC,CAAA,KAAD,CAAO,KAAP,CAA3D,CAAA,EAJF;;EAJQ,CA/OZ;;;EA0PE,OAAQ,CAAE,IAAF,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,MAAxB,EAAgC,IAAhC,EAAsC,GAAtC,EAA2C,KAA3C,CAAA;AACV,QAAA,EAAA,EAAA;IAAI,QAAA,GAAW,IAAC,CAAA,QAAD,CAAW,MAAX;IACX,EAAA,GAA0B,IAAH,GAAa,IAAb,GAAuB;IAC9C,MAAM,CAAC,MAAM,CAAC,IAAd,GAAuB,IAAC,CAAA,gBAAD,CAAmB,IAAnB,EAAyB,MAAzB;IACvB,IAAyD,MAAM,CAAC,MAAM,CAAC,IAAd,KAAwB,UAAjF;MAAA,MAAM,CAAC,MAAM,CAAC,IAAd,IAAuB,EAAA,CAAA,CAAM,EAAN,EAAA,CAAA,CAAY,IAAC,CAAA,KAAD,CAAO,MAAP,CAAZ,CAAA,EAAvB;;IACA,MAAM,CAAC,MAAM,CAAC,IAAd,GAAuB,IAAA,IAAS,MAAM,CAAC,MAAM,CAAC,KAJlD;IAKI,MAAM,CAAC,MAAM,CAAC,IAAd,IAAuB,IAAC,CAAA,SAAD,CAAY,QAAZ,EAAsB,MAAtB,EAA8B,GAA9B,EAAmC,KAAnC;IACvB,IAAsE,CAAI,QAA1E;MAAA,MAAM,CAAC,MAAM,CAAC,IAAd,IAAuB,IAAC,CAAA,SAAD,CAAY,QAAZ,EAAsB,MAAtB,EAA8B,GAA9B,EAAmC,KAAnC,EAAvB;;IACA,IAA0E,QAA1E;MAAA,MAAM,CAAC,MAAM,CAAC,IAAd,IAAuB,IAAC,CAAA,SAAD,CAAY,QAAZ,EAAsB,MAAtB,EAA8B,GAA9B,EAAmC,KAAnC,EAAvB;;IACA,MAAM,CAAC,MAAM,CAAC,IAAd,IAAuB;WACvB;EAVM;;EAYR,OAAQ,CAAE,MAAF,EAAU,KAAV,EAAiB,OAAK,IAAtB,CAAA;AACV,QAAA;IAAI,MAAA,GAAS,CAAE,MAAF,EAAU,IAAV,CAAA,GAAA;MAAoB,IAAG,YAAH;eAAc,MAAM,CAAC,MAAM,CAAC,IAAd,KAAsB,KAApC;OAAA,MAAA;eAA8C,KAA9C;;IAApB;AACT,YAAO,KAAP;AAAA,WACO,KADP;eACqB;AADrB,WAEO,QAFP;eAEqB,MAAM,CAAC,MAAM,CAAC,MAAd,KAAwB,IAAC,CAAA,QAAzB,IAAsC,MAAA,CAAQ,MAAR,EAAgB,IAAhB;AAF3D;eAGqB,MAAM,CAAC,MAAM,CAAC,MAAd,KAAwB,IAAC,CAAA,QAAzB,IAAsC,MAAA,CAAQ,MAAR,EAAgB,IAAhB;AAH3D;EAFM,CAtQV;;;EA8QE,OAAQ,CAAE,SAAO,IAAT,CAAA;AACV,QAAA,KAAA,EAAA;IAAI,IAAkB,IAAC,CAAA,aAAD,CAAgB,MAAhB,CAAlB;AAAA,aAAO,GAAP;;IACA,KAAA,GAAkB,cAAH,GAAgB,QAAhB,GAA8B;IAC7C,WAAA,GAAgB,IAAC,CAAA,WAAD,CAAc,KAAd;IAChB,WAAA,IAAe,IAAC,CAAA,MAAD,CAAS,KAAT;IACf,IAAmD,IAAC,CAAA,KAAD,CAAO,IAAC,CAAA,MAAR,CAAnD;MAAA,IAAC,CAAA,MAAM,CAAC,OAAR,CAAiB,IAAC,CAAA,cAAlB,EAAkC,WAAlC,EAAA;;WACA,YANM;EAAA;;EAQR,aAAc,CAAE,MAAF,CAAA;AAChB,QAAA;IAAI,QAAA,GAAY,CAAE,gBAAA,IAAY,CAAI,IAAC,CAAA,QAAnB,CAAA,IAAiC,CAAI,IAAC,CAAA;IAClD,IAAoB,cAApB;MAAA,IAAC,CAAA,QAAD,GAAY,KAAZ;;IACA,IAAC,CAAA,QAAD,GAAY;WACZ;EAJY;;EAMd,WAAY,CAAE,KAAF,CAAA;AACd,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA;2BA/RM;IA+RF,IAAA,GAAO;AACP;IAAA,KAAA,sCAAA;;UAA6B,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgB,KAAhB;QAC3B,IAAA,IAAQ,IAAC,CAAA,MAAD,CAAS,MAAT;;IADV;WAEA;EAJU,CA5Rd;;;;;;EAsSE,MAAO,CAAE,SAAO,IAAT,CAAA;AACT,QAAA;IAAI,MAAA,GAAY,cAAH,GAAgB,MAAhB,GAA4B,IAAC,CAAA;IACtC,IAAA,GAAO;IACP,IAAA,IAAQ,MAAM,CAAC,MAAM,CAAC;IACtB,IAAA,IAAQ,MAAM,CAAC,MAAM,CAAC;IACtB,IAAA,IAAQ,MAAM,CAAC,MAAM,CAAC;IACtB,IAA+B,IAAC,CAAA,OAAhC;MAAA,IAAA,IAAQ,MAAM,CAAC,MAAM,CAAC,KAAtB;;WACA;EAPK;;EASP,MAAO,CAAE,KAAF,CAAA;AACT,QAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA;IAAI,SAAA,GAAe,IAAC,CAAA,KAAD,CAAQ,KAAR,EAAe,IAAf;IACf,SAAA,GAAe,IAAC,CAAA,KAAD,CAAQ,KAAR,EAAe,KAAf;IACf,SAAA,GAAe,IAAC,CAAA,QAAQ,CAAC;IACzB,IAAA,GAAQ,IAAC,CAAA,WAAD,CAAc,KAAd;IACR,IAAA,IAAQ,CAAA,KAAA,CAAA,CAAU,IAAC,CAAA,GAAD,CAAK,SAAL,EAAe,SAAf,CAAV,CAAA,aAAA;IACR,IAAA,IAAQ,CAAA,KAAA,CAAA,CAAU,IAAC,CAAA,GAAD,CAAK,SAAL,EAAe,SAAf,CAAV,CAAA,aAAA;IACR,IAAA,IAAQ,CAAA,KAAA,CAAA,CAAU,IAAC,CAAA,GAAD,CAAK,SAAL,EAAe,SAAf,CAAV,CAAA,YAAA;WACR;EARK;;EAUP,KAAM,CAAE,KAAF,EAAS,IAAT,CAAA;AACR,QAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA;IAAI,CAAA,GAAI;AACJ;IAAA,KAAA,sCAAA;;UAAmC,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgB,KAAhB,EAAsB,IAAtB;QACjC,CAAA;;IADF;WAEA;EAJI;;EAMN,WAAY,CAAE,KAAF,CAAA;AACd,QAAA,IAAA,EAAA;IAAI,IAAA,GAAY,KAAA,KAAS,QAAT,IAAsB,6BAAzB,GAA+C,IAAC,CAAA,OAAO,CAAC,KAAD,CAAO,CAAC,IAA/D,GAAyE;IAClF,KAAA,GAAS;IACT,KAAA;AAAS,cAAO,KAAP;AAAA,aACF,QADE;iBACY,CAAA,CAAA,CAAK,IAAC,CAAA,QAAN,EAAA,CAAA,CAAkB,IAAC,CAAA,QAAnB,CAAA;AADZ,aAEF,QAFE;iBAEY,CAAA,CAAA,CAAK,IAAC,CAAA,QAAN,EAAA,CAAA,CAAkB,IAAC,CAAA,QAAnB,CAAA,CAAA,GAAkC;AAF9C;iBAGY,CAAA,aAAA;AAHZ;;WAIT;EAPU;;EASZ,QAAS,CAAA,CAAA;AACX,QAAA;2BA3UM;IA2UF,WAAA,GAAe,IAAC,CAAA,MAAD,CAAS,KAAT;IACf,IAAC,CAAA,QAAD,GAAe;IACf,IAAC,CAAA,QAAD,GAAe;IACf,IAAmD,IAAC,CAAA,KAAD,CAAO,IAAC,CAAA,MAAR,CAAnD;MAAA,IAAC,CAAA,MAAM,CAAC,OAAR,CAAiB,IAAC,CAAA,cAAlB,EAAkC,WAAlC,EAAA;;IACA,IAAuB,IAAC,CAAA,OAAxB;MAAA,IAAC,CAAA,GAAD,CAAM,WAAN,EAAA;KAJJ;;IAOI,IAAG,IAAC,CAAA,OAAJ;MACE,IAAC,CAAA,YAAD,CAAgB,IAAC,CAAA,QAAjB;MACA,IAAC,CAAA,YAAD,CAAA,EAFF;;WAGA;EAXO,CAxUX;;;;EAsVE,MAAO,CAAE,IAAF,CAAA;AACT,QAAA,IAAA,EAAA;IAAI,IAAA,GAAS,IAAI,CAAC,KAAL,CAAW,GAAX;IACT,MAAA,GAAS,IAAC,CAAA,IAAD,CAAM,IAAN,CAAW,CAAC,KAAZ,CAAkB,GAAlB,CAAsB,CAAC,CAAD;IAC/B,IAAC,CAAA,OAAO,CAAC,MAAD,CAAR,GAAmB;MAAE,IAAA,EAAK,MAAP;MAAe,IAAA,EAAK;IAApB;IACnB,IAAgF,IAAC,CAAA,KAAjF;MAAA,OAAO,CAAC,GAAR,CAAa,mBAAb,EAAkC;QAAE,IAAA,EAAK,IAAP;QAAa,IAAA,EAAK,IAAlB;QAAwB,MAAA,EAAO;MAA/B,CAAlC,EAAA;;WACA,IAAC,CAAA,OAAO,CAAC,MAAD;EALH;;EAOP,OAAQ,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,CAAA;WACN,IAAA,KAAQ,OAAR,IAAoB,IAAC,CAAA,OAAD,CAAS,GAAT,EAAa,IAAb,CAApB,IAA2C,IAAC,CAAA,YAAD,CAAc,IAAd;EADrC,CA7VV;;;EAiWE,YAAa,CAAE,GAAF,CAAA;WACX,IAAC,CAAA,UAAD,CAAa,IAAC,CAAA,QAAD,CAAU,GAAV,CAAb,EAA6B,IAAC,CAAA,YAAD,CAAc,GAAG,CAAC,IAAlB,CAA7B,EAAsD,IAAC,CAAA,QAAD,CAAU,GAAG,CAAC,MAAd,EAAqB,GAAG,CAAC,IAAzB,CAAtD,EAAsF,IAAC,CAAA,MAAD,CAAQ,GAAG,CAAC,IAAZ,CAAtF;EADW;;EAGb,YAAa,CAAE,IAAF,CAAA;AACf,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,KAAD,CAAO,IAAP,CAAA,IAAiB,IAAC,CAAA,IAAD,CAAO,IAAP,EAAgB,SAAhB;WACxB,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,cAAf,EAA+B,IAA/B,EAAqC,IAAI,CAAC,OAA1C,EAAmD,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;IAAP,CAAnD;EAFW;;EAIb,QAAS,CAAC,MAAD,EAAQ,IAAR,CAAA;AACX,QAAA,IAAA,EAAA;IAAI,IAAC,CAAA,MAAD,CAAQ,IAAR;IACA,IAAC,CAAA,KAAD,CAAO,MAAP;IACA,IAAA,GAAO,IAAC,CAAA,IAAD,CAAM,MAAN;IACP,IAAA;AAAO,cAAO,IAAP;AAAA,aACA,OADA;iBACa,IAAC,CAAA,OAAD,CAAS,MAAT;AADb,aAEA,OAFA;iBAEa,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgB,IAAhB,EAAqB,IAArB;AAFb,aAGA,IAHA;iBAGa,IAAC,CAAA,YAAD,CAAc,IAAd;AAHb;iBAIA,IAAC,CAAA,MAAD,CAAS,KAAT,EAAgB,mBAAhB,EAAqC,IAArC,EAA2C,IAAI,CAAC,KAAhD,EAAuD,QAAA,CAAC,CAAD,CAAA;mBAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;UAAP,CAAvD;AAJA;;WAKP,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,cAAf,EAA+B,IAA/B,EAAqC,IAAI,CAAC,OAA1C;EATO;;EAWT,YAAa,CAAE,IAAF,CAAA;AACf,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,KAAD,CAAO,IAAP,CAAA,IAAiB,IAAC,CAAA,IAAD,CAAO,IAAP,EAAa,SAAb;WACxB,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,cAAf,EAA+B,IAA/B,EAAqC,MAAM,CAAC,OAA5C,EAAqD,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;IAAP,CAArD;EAFW;;EAIb,MAAO,CAAE,IAAF,CAAA;AACT,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,KAAD,CAAO,IAAP,CAAA,IAAkB,IAAC,CAAA,IAAD,CAAO,IAAP,EAAa,OAAb;WACzB,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,eAAf,EAAgC,IAAhC,EAAsC,OAAtC,EAA+C,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;IAAP,CAA/C;EAFK;;EAIP,MAAO,CAAE,IAAF,CAAA;AACT,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,KAAD,CAAO,IAAP,CAAA,IAAiB,IAAC,CAAA,IAAD,CAAO,IAAP,EAAa,OAAb;WACxB,IAAC,CAAA,MAAD,CAAS,IAAT,EAAe,cAAf,EAA+B,IAA/B,EAAqC,IAAI,CAAC,KAA1C,EAAiD,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;IAAP,CAAjD;EAFK,CA3XT;;;;EAiYE,UAAW,CAAA,GAAE,IAAF,CAAA;AACb,QAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAI,IAAA,GAAO;IACP,KAAA,sCAAA;;MAAA,IAAA,GAAO,IAAA,IAAS;IAAhB;WACA;EAHS;;EAKX,QAAS,CAAE,MAAF,CAAA;AACX,QAAA,KAAA,EAAA,OAAA,EAAA;IAAI,IAAA,GAAU,IAAC,CAAA,IAAD,CAAM,MAAN;IACV,OAAA,GAAU,IAAC,CAAA,aAAD,CAAiB,MAAjB,EAAyB,IAAzB;IACV,KAAA,GAAU,IAAC,CAAA,cAAD,CAAiB,MAAjB,EAAyB,IAAzB;IACV,IAAgG,IAAC,CAAA,KAAjG;MAAA,OAAO,CAAC,GAAR,CAAa,kBAAb,EAAiC;QAAE,MAAA,EAAO,MAAT;QAAiB,IAAA,EAAK,IAAtB;QAA4B,OAAA,EAAQ,OAApC;QAA6C,KAAA,EAAM;MAAnD,CAAjC,EAAA;;WACA,OAAA,IAAW;EALJ,CAtYX;;;EA8YE,QAAS,CAAE,MAAF,CAAA;AACX,QAAA,MAAA,EAAA;IAAI,IAAA,GAAS,IAAC,CAAA,IAAD,CAAM,MAAN;IACT,MAAA,GAAS;MAAE,IAAA,EAAK,KAAP;MAAc,IAAA,EAAK,KAAnB;MAA0B,MAAA,EAAO,KAAjC;MAAwC,IAAA,EAAK,GAA7C;MAAkD,IAAA,EAAK;IAAvD;WACT,MAAA;AAAS,cAAA,KAAA;AAAA,cACF,IAAC,CAAA,aAAD,CAAiB,MAAjB,EAAyB,IAAzB,CADE;iBACmC,IAAC,CAAA,aAAD,CAAiB,MAAjB,EAAyB,MAAzB;AADnC,cAEF,IAAC,CAAA,cAAD,CAAiB,MAAjB,EAAyB,IAAzB,CAFE;iBAEmC,IAAC,CAAA,cAAD,CAAiB,MAAjB,EAAyB,MAAzB;AAFnC;iBAGF,IAAC,CAAA,MAAD,CAAS,kBAAT,EAA6B,wCAA7B,EACH,MADG,EACK,IADL,EACW,QADX,EACqB,MADrB,EAC6B,QAAA,CAAC,CAAD,CAAA;mBAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;UAAP,CAD7B;AAHE;;EAHF;;EAST,aAAgB,CAAE,GAAF,EAAO,IAAP,CAAA;WACd,IAAA,KAAQ,QAAR,IAAqB,GAAG,CAAC,QAAJ,CAAa,GAAb;EADP,CAvZlB;;;;;;;;;;;;;;;EAuaE,aAAc,CAAE,MAAF,EAAU,GAAV,CAAA;AAChB,QAAA,MAAA,EAAA;IAAI,MAAA,GAAS,GAAG,CAAC,KAAJ,CAAU,GAAV;IACT,MAAA,GAAS,MAAM,CAAC;IAChB,IAAG,MAAA,IAAU,CAAb;MACE,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,CAAD,EADtB;;IAEA,IAAG,MAAA,IAAU,CAAb;MACE,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,CAAD;MACpB,IAAG,MAAM,CAAC,CAAD,CAAG,CAAC,QAAV,CAAmB,GAAnB,CAAH;QACE,MAAM,CAAC,IAAP,GAAgB;QAChB,MAAM,CAAC,MAAP,GAAgB,IAAC,CAAA,OAAD,CAAU,MAAM,CAAC,CAAD,CAAhB,EAFlB;OAAA,MAGK,IAAG,IAAC,CAAA,aAAD,CAAgB,GAAhB,EAAqB,MAAM,CAAC,CAAD,CAA3B,EAAgC,GAAhC,CAAH;QACH,MAAM,CAAC,IAAP,GAAgB;QAChB,MAAM,CAAC,MAAP,GAAgB,IAAC,CAAA,OAAD,CAAU,MAAM,CAAC,CAAD,CAAhB,EAFb;OALP;KAAA,MAQK,IAAG,IAAC,CAAA,aAAD,CAAgB,GAAhB,EAAqB,MAAM,CAAC,CAAD,CAA3B,EAAgC,GAAhC,CAAH;MACH,MAAM,CAAC,IAAP,GAAgB;MAChB,MAAM,CAAC,MAAP,GAAgB,IAAC,CAAA,QAAD,CAAW,MAAM,CAAC,CAAD,CAAjB,EAFb;KAAA,MAAA;MAIH,MAAM,CAAC,IAAP,GAAgB;MAChB,MAAM,CAAC,MAAP,GAAgB,MALb;;IAML,IAAG,MAAA,IAAU,CAAb;MACE,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,CAAD,EADtB;;WAEA;EArBY;;EAuBd,cAAgB,CAAE,GAAF,EAAO,IAAP,CAAA;WACd,IAAA,KAAQ,QAAR,IAAqB,kBAArB,IAAmC,qBADrB;EAAA;;EAGhB,cAAe,CAAE,MAAF,EAAU,GAAV,CAAA;IACb,MAAM,CAAC,IAAP,GAAmB,gBAAH,GAAoB,GAAG,CAAC,IAAxB,GAAmC;IACnD,MAAM,CAAC,IAAP,GAAmB,gBAAH,GAAoB,GAAG,CAAC,IAAxB,GAAmC;IACnD,MAAM,CAAC,MAAP,GAAmB,kBAAH,GAAoB,GAAG,CAAC,MAAxB,GAAoC;IACpD,MAAM,CAAC,IAAP,GAAmB,gBAAH,GAAoB,GAAG,CAAC,IAAxB,GAAoC,IAHxD;IAII,MAAM,CAAC,IAAP,GAAmB,gBAAH,GAAoB,GAAG,CAAC,IAAxB,GAAoC,GAJxD;WAKI;EANa;;EAQf,aAAgB,CAAE,IAAF,CAAA;WACd,IAAC,CAAA,IAAD,CAAO,IAAP,EAAa,SAAb;EADc,CAzclB;;;EA6cE,aAAc,CAAE,MAAF,EAAU,GAAV,EAAe,IAAf,CAAA;IACZ,MAAM,CAAC,IAAP,GAAgB;IAChB,MAAM,CAAC,IAAP,GAAgB;IAChB,MAAM,CAAC,MAAP,GAAgB;IAChB,MAAM,CAAC,IAAP,GAAgB,IAHpB;IAII,MAAM,CAAC,IAAP,GAAgB;WAChB;EANY;;EAQd,OAAQ,CAAI,MAAJ,EAAY,MAAZ,EAAoB,MAApB,EAA4B,KAA5B,EAAmC,GAAnC,EAAwC,KAAxC,CAAA;AACV,QAAA,KAAA,EAAA;IAAI,IAAC,CAAA,IAAD,CAAO,KAAP;IACA,KAAA,GAAQ,MAAM,CAAC;IACf,IAAA,GAAQ,IAAC,CAAA,OAAD,CAAU,MAAV,EAAkB,KAAlB;WACR,IAAC,CAAA,OAAD,CAAU,IAAV,EAAgB,MAAhB,EAAwB,MAAxB,EAAgC,MAAhC,EAAwC,cAAxC,EAAwD,GAAxD,EAA6D,KAA7D;EAJM;;EAMR,OAAQ,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,KAA1B,EAAiC,GAAjC,EAAsC,KAAtC,CAAA;AACV,QAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA;IAAI,KAAA,GAAQ,MAAM,CAAC;IACf,IAAA,GAAQ,IAAC,CAAA,OAAD,CAAS,KAAT;IACR,IAAA,GAAO,IAAC,CAAA,IAAD,CAAM,MAAN;IAEP,UAAA,GAAa,QAAA,CAAE,MAAF,EAAU,KAAV,CAAA;aAAqB,KAAK,CAAC,CAAD,CAAL,IAAqB,MAArB,IAAgC,MAAA,IAAU,KAAK,CAAC,CAAD;IAApE;IACb,UAAA,GAAgB,QAAA,CAAE,GAAF,EAAU,KAAV,CAAA;aAAqB,KAAK,CAAC,CAAD,CAAL,IAAqB,GAArB,IAAgC,GAAA,IAAU,KAAK,CAAC,CAAD;IAApE;IAChB,YAAA,GAAgB,QAAA,CAAE,KAAF,EAAU,KAAV,CAAA;aAAqB,KAAK,CAAC,CAAD,CAAL,GAAS,KAAK,CAAC,CAAD,CAAd,IAAqB,KAArB,IAAgC,KAAA,IAAU,KAAK,CAAC,CAAD,CAAL,GAAS,KAAK,CAAC,CAAD;IAA7E;IAChB,IAAA;AAAO,cAAO,IAAP;AAAA,aACA,QADA;iBACc,UAAA,CAAe,MAAf,EAAuB,KAAvB;AADd,aAEA,KAFA;iBAEc,UAAA,CAAe,MAAf,EAAuB,KAAvB;AAFd,aAGA,OAHA;iBAGc,YAAA,CAAe,MAAf,EAAuB,KAAvB;AAHd,aAIA,OAJA;iBAIc,IAAC,CAAA,YAAD,CAAe,MAAf,EAAuB,KAAvB;AAJd,aAKA,QALA;iBAKc,IAAC,CAAA,SAAD,CAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC;AALd;iBAMA,IAAC,CAAA,MAAD,CAAS,WAAT,EAAsB,oBAAtB,EAA4C,MAA5C,EAAoD,IAApD,EAA0D,KAA1D,EAAiE,QAAA,CAAC,CAAD,CAAA;mBAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;UAAP,CAAjE;AANA;;WAOP,IAAC,CAAA,OAAD,CAAU,IAAV,EAAgB,MAAhB,EAAwB,MAAxB,EAAgC,MAAhC,EAAwC,cAAxC,EAAwD,GAAxD,EAA6D,KAA7D;EAfM,CA3dV;;;EA6eE,YAAa,CAAE,MAAF,EAAU,KAAV,CAAA;AACf,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAI,IAAA,GAAU;IACV,IAAA,GAAU,IAAC,CAAA,IAAD,CAAM,MAAN;IACV,OAAA,GAAU,MAAM,CAAC;IACjB,MAAA,GAAU,KAAK,CAAC;IAChB,IAAG,MAAA,KAAW,CAAd;MACE,KAAS,uFAAT;YAA4B,IAAC,CAAA,OAAD,CAAS,MAAM,CAAC,CAAD,CAAf;UAC1B,IAAA,GAAO,IAAA,IAAS,IAAC,CAAA,SAAD,CAAY,MAAM,CAAC,CAAD,CAAlB,EAAuB,KAAvB;;MADlB,CADF;KAAA,MAGK,IAAG,OAAA,GAAU,MAAb;MACH,IAAA,GAAO,CAAA,uBAAA,CAAA,CAA0B,MAA1B,CAAA,4BAAA,CAAA,CAA+D,MAA/D,CAAA,gBAAA;MACP,IAAA,GAAO,IAAC,CAAA,MAAD,CAAS,WAAT,EAAsB,IAAtB,EAA4B,MAA5B,EAAoC,IAApC,EAA0C,KAA1C,EAAiD,QAAA,CAAC,CAAD,CAAA;eAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;MAAP,CAAjD,EAFJ;KAAA,MAGA,IAAG,OAAA,GAAU,MAAb;MACH,IAAA,GAAO,CAAA,0BAAA,CAAA,CAA6B,MAA7B,CAAA,wBAAA,CAAA,CAA8D,OAA9D,CAAA;MACP,IAAA,GAAO,IAAC,CAAA,MAAD,CAAS,WAAT,EAAsB,MAAtB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,QAAA,CAAC,CAAD,CAAA;eAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;MAAP,CAAhD;MACP,GAAA,GAAM,IAAI,CAAC,GAAL,CAAU,OAAV,EAAmB,MAAnB;MACN,KAAS,mFAAT;YAAwB,IAAC,CAAA,OAAD,CAAS,MAAM,CAAC,CAAD,CAAf,CAAA,IAAwB,IAAC,CAAA,OAAD,CAAS,KAAK,CAAC,CAAD,CAAd;UAC9C,IAAA,GAAO,IAAA,IAAS,IAAC,CAAA,SAAD,CAAY,MAAM,CAAC,CAAD,CAAlB,EAAuB,KAAK,CAAC,CAAD,CAA5B;;MADlB,CAJG;;WAML;EAjBW;;EAmBb,OAAQ,CAAE,GAAF,CAAA;AACV,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA;IAAI,KAAA,GAAQ;IACR,IAAA,GAAQ,IAAA,GAAO,IAAC,CAAA,IAAD,CAAM,GAAN;AACf,YAAO,IAAP;AAAA,WACO,QAAA,IAAa,GAAG,CAAC,QAAJ,CAAa,GAAb,CADpB;QAEI,MAAA,GAAS,GAAG,CAAC,KAAJ,CAAU,GAAV;QACT,KAAA,wCAAA;;UACE,KAAK,CAAC,IAAN,CAAY,KAAZ;QADF;AAFG;AADP,WAKO,OALP;QAMI,KAAA,GAAQ;AADL;AALP;QAQI,KAAA,GAAQ,IAAC,CAAA,MAAD,CAAS,cAAT,EAAyB,mBAAzB,EAA8C,GAA9C,EAAmD,OAAnD,EAA4D,EAA5D,EAAgE,QAAA,CAAC,CAAD,CAAA;iBAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;QAAP,CAAhE;AARZ;WASA;EAZM;;EAcR,SAAU,CAAE,KAAF,CAAA;AACZ,QAAA;IAAI,IAAA,GAAU,KAAK,CAAC,MAAN,GAAe,CAAlB,GAAyB,IAAC,CAAA,IAAD,CAAM,KAAK,CAAC,CAAD,CAAX,CAAzB,GAA8C;IACrD,IAAG,IAAC,CAAA,IAAD,CAAO,IAAP,EAAa,QAAb,CAAH;MACE,IAAG,IAAC,CAAA,OAAD,CAAS,KAAT,EAAe,IAAf,CAAH;eAA6B,KAA7B;OAAA,MAAA;eAAuC,QAAvC;OADF;KAAA,MAEK,IAAG,IAAA,KAAQ,OAAX;aACH,IAAC,CAAA,SAAD,CAAW,KAAK,CAAC,CAAD,CAAhB,EADG;;EAJG,CA9gBZ;;;;;EAwhBE,OAAQ,CAAC,KAAD,CAAA;AAEV,QAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAAA,IAAA;;;IAEI,UAAA,GAAa,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,MAAF,KAAY,CAAZ,IAAkB,CAAC,CAAC,CAAD,CAAD,IAAa,CAAC,CAAC,CAAD;IAAvC;IACb,UAAA,GAAgB,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,MAAF,KAAY,CAAZ,IAAkB,CAAC,CAAC,CAAD,CAAD,IAAa,CAAC,CAAC,CAAD;IAAvC;IAChB,YAAA,GAAgB,QAAA,CAAC,CAAD,CAAA;aAAO,CAAC,CAAC,MAAF,KAAY,CAAZ,IAAkB,CAAC,CAAC,CAAD,CAAD,GAAK,CAAC,CAAC,CAAD,CAAN,IAAa,CAAC,CAAC,CAAD,CAAD,GAAK,CAAC,CAAC,CAAD;IAA5C;IAChB,YAAA,GAAgB,QAAA,CAAC,CAAD,CAAA;AACpB,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;MAAM,IAAA,GAAO;MACP,KAAA,mCAAA;;QACE,IAAA,GAAO,IAAA,IAAS,IAAC,CAAA,OAAD,CAAS,CAAT;MADlB;aAEA;IAJc,EALpB;;IAYI,IAAA,GAAO,IAAC,CAAA,SAAD,CAAW,KAAX;AAEP,YAAO,IAAP;AAAA,WACO,QADP;eACqB,UAAA,CAAW,KAAX;AADrB,WAEO,KAFP;eAEqB,UAAA,CAAW,KAAX;AAFrB,WAGO,OAHP;eAGqB,YAAA,CAAa,KAAb;AAHrB,WAIO,OAJP;eAIqB,YAAA,CAAa,KAAb;AAJrB;eAKQ,IAAC,CAAA,MAAD,CAAS,gBAAT,EAA2B,kBAA3B,EAA+C,KAA/C,EAAsD,EAAtD,EAA0D,KAA1D,EAAiE,QAAA,CAAC,CAAD,CAAA;iBAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;QAAP,CAAjE;AALR;EAhBM,CAxhBV;;;EAgjBE,YAAa,CAAE,MAAF,CAAA;AACf,QAAA;IAAI,IAAA,GAAO,IAAC,CAAA,KAAD,CAAO,MAAP;IACP,IAAG,IAAA,KAAQ,QAAX;MACE,IAAC,CAAA,MAAD,GAAW,OADb;KAAA,MAAA;MAGE,OAAO,CAAC,KAAR,CAAe,iEAAf,EAAkF,IAAlF,EAHF;;EAFW;;EAQb,YAAa,CAAE,QAAF,CAAA;IACX,YAAY,CAAC,OAAb,CAAsB,QAAtB,EAAgC,IAAI,CAAC,SAAL,CAAgB,QAAhB,CAAhC;EADW;;EAIb,YAAa,CAAA,CAAA;AACf,QAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA;IAAI,IAAU,CAAI,CAAE,IAAC,CAAA,KAAD,IAAW,IAAC,CAAA,OAAd,CAAd;AAAA,aAAA;;IACA,MAAA,GAAW,YAAY,CAAC,OAAb,CAAsB,QAAtB;IACX,QAAA,GAAW,IAAI,CAAC,KAAL,CAAY,MAAZ;IACX,KAAA,0CAAA;;MACE,OAAO,CAAC,GAAR,CAAa,MAAb;IADF;EAJW,CA5jBf;;;EAqkBE,IAAK,CAAE,IAAF,EAAQ,GAAR,CAAA;IACH,IAAU,iBAAV;aAA4B,IAAI,CAAC,GAAD,CAAK,CAAC,QAAV,CAAmB,IAAnB,EAA5B;KAAA,MACK,IAAG,mBAAH;aAAqB,MAAM,CAAC,GAAD,CAAK,CAAC,QAAZ,CAAqB,IAArB,EAArB;KAAA,MAAA;aACA,IAAC,CAAA,MAAD,CAAS,KAAT,EAAgB,CAAA,IAAA,CAAA,CAAO,GAAP,CAAA,YAAA,CAAhB,EAA0C,IAA1C,EAAgD,EAAhD,EAAoD,QAAA,CAAC,CAAD,CAAA;eAAO,CAAC,CAAC,GAAF,CAAO,CAAC,CAAC,IAAF,CAAA,CAAP;MAAP,CAApD,EADA;;EAFF;;AAvkBP;;AA4kBA,MAAM,CAAC,KAAP,GAAiB;EAAC,OAAD;EAAS,OAAT;;;AACjB,MAAM,CAAC,KAAP,GAAiB;EAAC,IAAD;EAAM,IAAN;EAAW,IAAX;EAAgB,IAAhB;EAAqB,IAArB;EAA0B,IAA1B;;;AACjB,MAAM,CAAC,KAAP,GAAiB;EAAC,GAAD;EAAK,GAAL;EAAS,GAAT;EAAa,GAAb;EAAiB,YAAjB;EAhlBjB;;;;;;AAslBA,OAAA,IAAO,MAAA,GAAS,IAAI,MAAJ,CAAA;;AAChB,IAAA,GAAO,MAAM,CAAC;;AACd,IAAA,GAAO,MAAM,CAAC;;AACd,IAAA,GAAO,MAAM,CAAC;;AACd,OAAA;EAAS,IAAT;EAAe,IAAf;EAAqB,IAArB",
  "sourcesContent": [
    "\nimport Type from \"./Type.js\"\n\nclass Tester extends Type\n\n  constructor:() ->\n    super()\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    #logging        = true          # @logging is in class Type\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its argidating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @module( moduleId, moduleTx, moduleOn=true )\n    @moduleId = \"\"\n    @moduleTx = \"\"\n    @moduleOn = true\n\n    # Set by @describe( methodId, methodTx, methodOn=true )\n    @methodId = \"\"\n    @methodTx = \"\"\n    @methodOn = true\n\n    # set by test() that is passed inside eq() and sent to run()\n    @text  = \"\"\n\n    # Accumulated status objects\n    @modules  = {}\n    @statusAs = {}  # Latest status from @assert(...)\n    @statuses = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream  = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logging        = if options.logging?        then options.logging        else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test --\n  #\n  #   import { test } from \"../test/Tester.js\"\n  #   import Vis      from \"../draw/Vis.js\"\n\n  #   test(  \"2 + 3 = 5\", (t) ->                # closure form\n  #     t.eq( 2 + 3,  5 ) )\n  #\n  #   test(  \"2 + 3 = 5\", 2 + 3, 5 )            # Direct result and expect arguments\n  #\n  #   test( \"Vis.rgb() converts hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  test:( text, args... ) =>\n    if      arguments.length is 0 or not ( @testing and @moduleOn and @methodOn )\n      return @\n    else if arguments.length is 2 and @isFunction(args[0])\n      closure = args[0]\n      @text   = text               # @text is latter referenced inside eq()\n      closure(@)                   # Call closure with an injected tester instand\n    else if arguments.length is 3 and not @isFunction(args[0])\n      result = args[0]\n      expect = args[1]\n      @text   = text\n      @run( text, result, expect ) # returns tester instance for chaining\n    @  # returns tester instance for chaining\n\n  eq:( result, expect ) =>\n    @run( @text, result, expect )\n\n  # -- run() scenario is @initStatus(...) @assert(...) @report(...)\n  #     console.log( \"Tester.run()\", { text:text, result:result, expect:expect} ) if  @debug\n  run:( text, result, expect ) ->\n    return @ if not @testing\n    @statusAs = @initStatus( result, expect, text      )\n    @statusAs = @assert(     result, expect, @statusAs )\n    @    # returns tester instance for chaining\n\n  # Create a new status object for the current test\n  initStatus:( result, expect, text ) ->\n    {\n      assert:{ text:text, pass:true, module:@moduleId, method:@methodId, keys:\"\" }\n      warned:{ text:\"\", }\n      result:{ text:\"\",   type:@type(result), value:result }\n      expect:{ text:\"\",   type:@type(expect), value:expect }\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(arg) so asserions are only test when types match\n  #   Skips over @type(arg) = \"function\"\n  assert:( result, expect, status, level=0, key=null, index=null ) ->\n\n    # Check values and types\n    status = @checkValuesTypes( result, expect, status, key, index )\n\n    # Perform all schema based assertions\n    if @isSchema( expect )\n      schema = @toSchema(  expect )\n      status = switch schema.oper\n        when 'enums' then @inEnums(  result, schema, status, level, key, index )\n        when \"range\" then @inRange(  result, schema, status, level, key, index )\n        else @examine( false, result, schema, status, \"unknown schema.oper #{schema.oper}\", key, index )\n      return status.assert.pass\n\n    # Perform all comparisions\n    type = @type( result )\n    status = switch type\n      when  \"string\", \"int\", \"float\", \"boolean\"\n                         @valuesEq(   result, expect, status, \"eq\"  )  # op is not passed aroung\n      when \"object\" then @objectsEq(  result, expect, status, level )\n      when \"array\"  then @arraysEq(   result, expect, status, level )\n      else               @unknownsEq( result, expect, status )         # just a fallback\n    @examine( status.assert.pass, result, expect, status, \"\", key, index )\n\n    # Store status in @statuses array and publish\n    if level is 0\n      @statuses.push(status)\n      @stream.publish( @statusSubject, status )  if @isDef(@stream)\n    status\n\n  # Check and report on values and types\n  checkValuesTypes:( result, expect, status, key, index ) ->\n    rType  = @type(result)\n    eType  = @type(expect)\n    info  = switch\n      when @isNot(result)\n        \" Result of #{rType} is not defined\\nExpect is type '#{eType}'\"\n      when @isNot(expect)\n        \" Expect of #{eType} is not defined\\nResult is type '#{rType}'\"\n      when rType isnt eType and not @isIn( eType, \"specs\" )\n        \" Types do not match\\nResult type is '#{rType}'\\nExpect type is '#{eType}'\"\n      when rType is \"function\"\n        \" Result type is 'function'\\nExpect type is '#{eType}'\"\n      when eType is \"function\"\n        \" Expect type is 'function'\\nResult type is '#{rType}'\"\n      when not @isIn( rType, \"results\" )\n        \" Result is type '#{rType}' an unknown type is type '#{eType}'\"\n      when not @isIn( eType, \"expects\" )\n        \" Result is type '#{rType}'\\nExpect is type '#{eType}' an unknown type\"\n      else\n        \"\"\n    if @isStr(info)\n      @examine( false, result, expect, status, info, key, index )\n    else\n      status\n\n  valuesEq:( result, expect, status, oper ) ->\n    return true if expect is \"any\"\n    pass = switch oper\n      when \"eq\" then result is   expect\n      when \"le\" then result <=   expect\n      when \"lt\" then result <    expect\n      when \"ge\" then result >=   expect\n      when \"gt\" then result >    expect\n      when \"ne\" then result isnt expect\n      else           false\n    status.assert.pass = pass\n    status\n\n  # Just a fallback when types are not fully  screened\n  unknownsEq:( result, schema, status ) ->\n    status.assert.pass  = false\n    status.assert.warn += \"unknown types for comparision\"\n    status\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, status, level ) ->\n\n    # Check that the result object has all the keys that the expect object has\n    #   ? or ( op is \"schema\" and arg.card is \"1\" ) )\n    for own key, arg of expect when not result[key]?\n      status.assert.pass  = false\n      status.assert.keys += \"\\n   missing result \" + key\n\n    # Check that the expect object has all the keys that the result  object has\n    for own key, arg of result when not expect[key]?\n      status.assert.pass  = false\n      status.assert.keys += \"\\n   missing expect \" + key\n\n    # Assert each value for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], obj, status, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, status, level ) ->\n\n    # Examine the array lengths\n    if result.length isnt expect.length\n      info   = \" different array lengths\"\n      info  += \" Result length is #{result.length}\"\n      info  += \" Expect length is #{expect.length}\"\n      status = @examine( false, result, expect, status, info, null, null )\n\n    # Assert each value within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], status, ++level, null, i )\n    status\n\n\n  # @runUnitTests(...) @describe(...) @summary(...)\n\n  runUnitTests:( paths ) ->\n    for path in paths\n      modulePath = @toPath( path )\n      console.log( \"\\n-- Started Unit Testing for: #{modulePath.name} in #{modulePath.path}\" ) if @logging\n      await `import( path /* @vite-ignore */ )`\n    @complete()  # All tests complete so produce then log and publish the final summary\n    return\n\n  module:( moduleId, moduleTx, moduleOn=true ) =>\n    @moduleId = moduleId\n    @moduleTx = moduleTx\n    @moduleOn = moduleOn\n    @\n\n  describe:( methodId, methodTx, methodOn=true ) =>\n    @methodId = methodId\n    @methodTx = methodTx\n    @methodOn = methodOn\n    @\n\n  statusAssertText:( pass, result ) ->\n    text = if pass then \"\\n-- Passed -- \" else \"\\n-- Failed -- \"\n    if @isStr(@methodId) and @methodId.charAt(0) isnt \"-\"\n      text += @methodId + \"(\" + @toStr(result) + \")\"\n    text\n\n  textValue:( name, value, key=null, index=null ) ->\n    ref = \"\"\n    ref = \" at key:#{key}\"      if @isStr(key)\n    ref = \" at index: #{index}\" if @isInt(index)\n    if name is \"Schema\"\n      schema = value\n      \"\\n   #{name}#{ref} type is '#{schema.type}' with spec '#{schema.spec}' and oper '#{schema.oper}'\"\n    else\n      \"\\n   #{name}#{ref} type is '#{@type(value)}' with value #{@toStr(value)}\"\n\n  # Generates informative text in status\n  examine:( pass, result, expect, status, warn, key, index ) ->\n    isSchema = @isSchema( expect )\n    eq                   = if pass then \"eq\" else \"not\"\n    status.assert.text   = @statusAssertText( pass, result )\n    status.assert.text  += \"\"\" #{eq} #{@toStr(expect)}\"\"\" if status.result.type isnt \"function\"\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.result.text  += @textValue( \"Result\", result, key, index )\n    status.expect.text  += @textValue( \"Expect\", expect, key, index )  if not isSchema\n    status.expect.text  += @textValue( \"Schema\", expect, key, index )  if     isSchema\n    status.warned.text  += warn\n    status\n\n  isGroup:( status, group, pass=null ) ->\n    passed = ( status, pass ) => if pass? then status.assert.pass is pass else true\n    switch group\n      when \"all\"    then true\n      when \"method\" then status.assert.method is @methodId and passed( status, pass )\n      else               status.assert.module is @moduleId and passed( status, pass )\n\n  # Needs to become more of a method / test() block status summary\n  summary:( module=null ) ->\n    return \"\"      if @summaryReturn( module )   # blank string turns off logging\n    group        = if module? then \"module\" else \"method\"\n    summaryText  =  @summaryText( group  )\n    summaryText += @totals( group )\n    @stream.publish( @summarySubject, summaryText ) if @isDef(@stream)\n    summaryText  # for log( test().summary() )\n\n  summaryReturn:( module ) ->\n    isReturn =  ( module? and not @moduleOn ) or not @methodOn\n    @moduleOn = true if module?\n    @methodOn = true\n    isReturn\n\n  summaryText:( group ) =>\n    text = \"\"\n    for status in @statuses when @isGroup(status,group)\n      text += @status( status )\n    text\n\n  # Generate text from status arg or from @statusAs\n  # @statusAs comes from @assert(...)  from the last test run\n  # Example: console.log( test().status() )\n  #   or      test().log( test().status() )\n  status:( status=null ) ->\n    status = if status? then status else @statusAs\n    text = \"\"\n    text += status.assert.text\n    text += status.result.text\n    text += status.expect.text\n    text += status.warned.text  if @verbose\n    text\n\n  totals:( group ) ->\n    passCount    = @count( group, true  )\n    failCount    = @count( group, false )\n    fullCount    = @statuses.length\n    text  = @totalsTitle( group )\n    text += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n    text += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n    text += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    text\n\n  count:( group, pass ) ->\n    n = 0\n    for status in tester.statuses when @isGroup(status,group,pass )\n      n++\n    n\n\n  totalsTitle:( group ) ->\n    path   = if group is \"module\" and @modules[group]? then @modules[group].path else \"\"\n    title  = \"\\nTotals for \"\n    title += switch group\n      when \"method\" then \"\"\"#{@methodId} #{@methodTx}\"\"\"\n      when \"module\" then \"\"\"#{@moduleId} #{@moduleTx}\"\"\" + path\n      else               \"\"\"for all tests\"\"\"\n    title\n\n  complete:() =>\n    summaryText  = @totals( \"all\" )\n    @moduleOn    = true\n    @methodOn    = true\n    @stream.publish( @summarySubject, summaryText ) if @isDef(@stream)\n    @log( summaryText ) if @logging\n\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @statuses )\n      @reviewsLocal()\n    @  # for chaining\n\n  # Add a unit test file path to the @modules object  - not called\n  toPath:( path ) ->\n    dirs   = path.split(\"/\")\n    module = @tail(dirs).split(\"-\")[0]\n    @modules[module] = { name:module, path:path }\n    console.log( \"Tester.path(path)\", { path:path, dirs:dirs, module:module } ) if  @debug\n    @modules[module]\n\n  isEnums:( arg, oper, type ) ->\n    oper is \"enums\" and @isArray(arg,type) and @isResultType(type)\n\n  # Check if an arg like expect is a 'schema'\n  verifySchema:( arg ) ->\n    @conditions( @isObject(arg), @isResultType(arg.type), @isExpect(arg.expect,arg.oper), @isCard(arg.card) )\n\n  isResultType:( type ) ->\n    pass = @isDef(type) and @isIn( type,    \"results\" )\n    @isWarn( pass, \"Not a Result\", type, Type.results, (t) -> t.log( t.warn() ) )\n\n  isExpect:(expect,oper) ->\n    @isOper(oper)\n    @isDef(expect)\n    type = @type(expect)\n    pass = switch oper\n      when \"range\" then @isRange(expect)\n      when \"enums\" then @isEnums(expect,oper,type)\n      when \"eq\"    then @isResultType(type)\n      else @isWarn( false, \"Not a Expect oper\", oper, Type.opers, (t) -> t.log( t.warn() ) )\n    @isWarn( pass, \"Not a Expect\", type, Type.expects )\n\n  isExpectType:( type ) ->\n    pass = @isDef(type) and @isIn( type, \"expects\"      )\n    @isWarn( pass, \"Not a Expect\", type, Tester.expects, (t) -> t.log( t.warn() ) )\n\n  isOper:( oper ) ->\n    pass = @isDef(oper) and  @isIn( oper, \"opers\" )\n    @isWarn( pass, \"Not an 'oper'\", oper, \"opers\", (t) -> t.log( t.warn() ) )\n\n  isCard:( card ) ->\n    pass = @isDef(card) and @isIn( card, \"cards\" )\n    @isWarn( pass, \"Not a 'card'\", card, Type.cards, (t) -> t.log( t.warn() ) )\n\n  # This approach insures that all conditions are checked and messages sent\n  #   then all arg returns are anded together to determine a final pass or fail\n  conditions:( args... ) ->\n    pass = true\n    pass = pass and arg for arg in args\n    pass\n\n  isSchema:( expect ) ->\n    type    = @type(expect)\n    isParse = @isSchemaParse(  expect, type )\n    isObj   = @isSchemaObject( expect, type )\n    console.log( \"isSchema(expect)\", { expect:expect, type:type, isParse:isParse, isObj:isObj }) if @debug\n    isParse or isObj\n\n  # In the first t\n  toSchema:( expect ) ->\n    type   = @type(expect)\n    schema = { type:\"any\", oper:\"any\", expect:\"any\", card:\"1\", spec:\"\"  }\n    schema = switch\n      when @isSchemaParse(  expect, type ) then @toSchemaParse(  schema, expect )\n      when @isSchemaObject( expect, type ) then @toSchemaObject( schema, expect )\n      else @toWarn( \"toSchema(expect)\", \"expect not schema 'string' or 'object'\"\n      , expect, type, \"schema\", schema, (t) -> t.log( t.warn() ) )\n\n  isSchemaParse:  ( arg, type ) ->\n    type is \"string\" and arg.includes(\":\")\n\n  # toSchemaParse:( schema, arg )\n  # Examples\n  #   \"array:[0,255]\" }      { type:\"array\",   oper:\"range\", check:[0,255],         card=\"1\" }\n  #   \"string:James\"         { type:\"string\",  oper:\"eq\",    check:James,           card=\"1\" }\n  #   \"string:a|b|c\"         { type:\"string\",  oper:\"enums\", check:\"a|b|c\",         card=\"1\" }\n  #   \"int:[0,100]\"          { type:\"int\",     oper:\"range\", check:[0,100],         card=\"1\" }\n  #   \"float:[0.0,100.0,1.0] { type:\"float\",   oper:\"range\", check:[0.0,100.0,1.0], card=\"1\" }\n  #   \"string:[\"\",\"zzz\"]     { type:\"string\",  oper:\"range\", check:[\"\",\"zzz\"],      card=\"1\" }\n  #   \"boolean\"              { type:\"boolean\", oper:\"any\",   check:\"any\",           card=\"1\" }\n  #   \"object:{r:[0,255],g:[0,255],b:[0,255]}\n  #     { type:\"object\", oper:\"range\", range:{r:[0,255],g:[0,255],b:[0,255]}, card=\"1\" }\n  #  \"array:[[0,360],[0,100],[0,100]]:?\"\n  #     { type:\"array\",  oper:\"range\", range:[[0,360],[0,100],[0,100]], card=\"?\" }\n  toSchemaParse:( schema, arg ) ->\n    splits = arg.split(\":\")\n    length = splits.length\n    if length >= 1                                        # type\n      schema.type = splits[0]\n    if length >= 1                                        # expect\n      schema.spec = splits[1]\n      if splits[1].includes(\"|\")                         #   enum\n        schema.oper   = \"enums\"\n        schema.expect = @toEnums( splits[1] )\n      else if @isStrEnclosed( \"[\", splits[1], \"]\" )  #    range array\n        schema.oper   = \"range\"\n        schema.expect = @toArray( splits[1] )\n    else if @isStrEnclosed( \"{\", splits[1], \"}\" )   #    range object\n      schema.oper   = \"range\"\n      schema.expect = @toObject( splits[1] )\n    else\n      schema.oper   = \"any\"\n      schema.expect = \"any\"\n    if length >= 2                                        # card i.e cardinaliry\n      schema.oper = splits[2]\n    schema\n\n  isSchemaObject: ( arg, type ) ->\n    type is \"object\" and arg.oper? and arg.expect? # and arg.type? and arg.card?\n\n  toSchemaObject:( schema, arg ) ->\n    schema.type   = if arg.type?   then arg.type  else \"any\"\n    schema.oper   = if arg.oper?   then arg.oper  else \"any\"\n    schema.expect = if arg.expect? then arg.expect else \"any\"\n    schema.card   = if arg.card?   then arg.card  else  \"1\"  # required\n    schema.spec   = if arg.spec?   then arg.spec  else  \"\"   # required\n    schema\n\n  isSchemaValue:  ( type )  ->\n    @isIn( type, \"results\" )\n\n  # Holding off on this conversion. Instead we will just return an expect value\n  toSchemaValue:( schema, arg, type ) ->\n    schema.type   = type\n    schema.oper   = \"eq\"\n    schema.expect = arg\n    schema.card   = \"1\"  # required\n    schema.spec   = \"\"\n    schema\n\n  inEnums:(   result, schema, status, level, key, index ) ->\n    @noop( level )\n    enums = schema.expect\n    pass  = @inArray( result, enums )\n    @examine( pass, result, schema, status, \"inEnums(...)\", key, index )\n\n  inRange:( result, schema, status, level, key, index ) ->\n    range = schema.expect\n    pass  = @isRange(range)\n    type = @type(result)\n\n    inStrRange = ( string, range ) -> range[0]          <= string and string <= range[1]\n    inIntRange    = ( int,    range ) -> range[0]          <= int    and int    <= range[1]\n    inFloatRange  = ( float,  range ) -> range[0]-range[2] <= float  and float  <= range[1]+range[2]\n    pass = switch type\n      when \"string\" then inStrRange(    result, range )\n      when \"int\"    then inIntRange(    result, range )\n      when \"float\"  then inFloatRange(  result, range )\n      when \"array\"  then @inArrayRange( result, range )\n      when \"object\" then @objectsEq(    result, range, status, level )\n      else @toWarn( \"inRange()\", \"unknown range type\", result, type, false, (t) -> t.log( t.warn() ) )\n    @examine( pass, result, schema, status, \"inRange(...)\", key, index )\n\n  # Camnot is @arraysEq(...) because a single ramge can be applied to all resuls in a result array\n  inArrayRange:( result, range ) ->\n    pass    = true\n    type    = @type(result)\n    nResult = result.length\n    nRange  = range.length\n    if nRange  is 1\n      for i in [0...nResult] when @isArray(result[i])\n        pass = pass and @inMyRange( result[i], range )\n    else if nResult > nRange\n      text = \"not enough range tests #{nRange} for result so only will be #{nRange} tests on result\"\n      pass = @toWarn( \"inRange()\", text, result, type, false, (t) -> t.log( t.warn() ) )\n    else if nResult < nRange\n      text = \"OK with more range bounds #{nRange} than needed for result #{nResult}\"\n      pass = @toWarn( \"inRange()\", result, text, type, true, (t) -> t.log( t.warn() ) )\n      min = Math.min( nResult, nRange )\n      for i in [0...min] when @isArray(result[i]) and @isArray(range[i])\n        pass = pass and @inMyRange( result[i], range[i] )\n    pass\n\n  toEnums:( arg ) ->\n    enums = []\n    type  = type = @type(arg)\n    switch type\n      when \"string\" and arg.includes(\"|\")\n        splits = arg.split(\"|\")\n        for split in splits\n          enums.push( split )\n      when \"array\"\n        enums = arg\n      else\n        enums = @toWarn( \"toEnums(arg)\", \"unable to convert\", arg, \"enums\", [], (t) -> t.log( t.warn() ) )\n    enums\n\n  rangeType:( range ) ->\n    type = if range.length > 0 then @type(range[0]) else \"null\"\n    if @isIn( type, \"ranges\" )\n      if @isArray(range,type) then type else \"mixed\"\n    else if type is \"array\"\n      @rangeType(range[0])\n\n  # -- Range Methods --\n\n  # Asserts range with for types \"string\" or \"int\" or \"float\"\n  isRange:(range)  ->\n\n    # internal functions called after @rangeType(range) has verified that range\n    #   is an array of type \"string\" or \"int\" or \"float\"\n    isStrRamge = (r) -> r.length is 2 and r[0]      <= r[1]       # For 'string'\n    isIntRange    = (r) -> r.length is 2 and r[0]      <= r[1]       # For 'int'\n    isFloatRange  = (r) -> r.length is 3 and r[0]-r[2] <= r[1]+r[2]  # For 'float' r[2] is tol\n    isArrayRange  = (r) ->\n      pass = true\n      for e in r\n        pass = pass and @isRange(e)\n      pass\n\n    # @rangeType(...) checks array existence and asserts type with @isArray(range,type)\n    type = @rangeType(range)\n\n    switch type\n      when 'string' then isStrRamge(range)\n      when 'int'    then isIntRange(range)\n      when 'float'  then isFloatRange(range)\n      when 'array'  then isArrayRange(range)\n      else  @toWarn( \"isRange(range)\", \"not a range type\", range, \"\", false, (t) -> t.log( t.warn() ) )\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( statuses ) ->\n    localStorage.setItem( \"Tester\", JSON.stringify( statuses ) )\n    return\n\n  reviewsLocal:( ) ->\n    return if not ( @debug and @logging )\n    locals   = localStorage.getItem( \"Tester\" )\n    statuses = JSON.parse( locals )\n    for status in statuses\n      console.log( status )\n    return\n\n  # Override type.isIn() with addional Tester type arrays\n  isIn:( type, key ) ->\n    if        Type[key]? then   Type[key].includes(type)\n    else if Tester[key]? then Tester[key].includes(type)\n    else @isWarn( false, \"key #{key} missing for\", type, [], (t) -> t.log( t.warn() ) )\n\nTester.specs   = [\"range\",\"enums\"]               # high level schema based comparision specs\nTester.opers   = [\"eq\",\"le\",\"lt\",\"ge\",\"gt\",\"ne\"] # low  level value  based comparison  ooers 'eq' default\nTester.cards   = [\"n\",\"?\",\"*\",\"+\",\"min to max\"]  # cards  1 required, ? optional, * 0 to many, + 1 to many, m:m range\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\n\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nfits = tester.fits\nexport { test, unit, fits }\n"
  ]
}
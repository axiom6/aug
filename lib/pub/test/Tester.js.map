{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    @stream = null # Optional streaming publisher module that is set by @injectStream( stream )\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @stringSubject  = \"TestString\"  # Subject for publishing each test status string\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @describe( description, suite )\n    @description = \"\"\n    @suite       = \"\"\n\n    # Accummulate test status state\n    @text         = null # set by test() that is passed inside eq() and sent to run()\n    @statusText   = \"\"\n    @statusClear  = true\n    @blockText    = \"\"\n    @blockClear   = true\n    @code         = \"\"\n    @passed       = []\n    @failed       = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream       = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @stringSubject  = if options.stringSubject?  then options.stringSubject  else \"TestString\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test -- Pass a closeure in the form of  (t) => { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) => { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test('2 + 3 = 5', (t) ->\n  #     t.eq( add(2,3), 5 ) )\n\n  test:( text, closure ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text     = text               # @text is latter referenced inside eq()\n    @code     = closure.toString() # @code is latter referenced inside eq()\n    closure(@)\n    @\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n\n  unit:(  text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length is 0 # or not @testing -\n    @text   = text\n    @code   = \"\"\n    @run( text, result, expect, \"eq\", @code )\n    @\n\n  eq:( result, expect ) =>\n    @run( @text, result, expect, \"eq\", @code )\n\n  # This could be a very stupid feature with op = 'neq'\n  neq:( result, expect ) =>\n    @run( @text, result, expect, \"neq\", @code )\n\n  run:( text, result, expect, op, code ) =>\n    return @ if arguments.length == 0 or not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect, op:op } ) if  @debug\n    ###\n    if @isNot(text) or @isNot(result) or @isNot(expect)  or @isNot(op)\n      console.error( \"Tester.run() undefine arg(s)\", { text:text, result:result, expect:expect, op:op } )\n      return @\n    ###\n    status = @initStatus( result, expect, text, op, code )\n    status = @assert(     result, expect, status )\n    status.assert.pass = if op is 'eq' then status.assert.pass else not status.assert.pass\n    @report( status, result, expect )\n    @ # Provides access to tester instance for chaining\n\n  describe:( description, suite=null ) =>\n    @description = description\n    @suite       = if suite? then suite else null\n    @\n\n\n\n  runUnitTests:( paths ) =>\n    console.log( \"Tester.runUnitTests()\", paths ) if @debug\n    count = 0\n    total = paths.length\n    for path in paths\n        console.log( \"Tester.runUnitTests()\", path ) if @debug\n        await `import( path /* @vite-ignore */ )`\n        count++\n        @summary() if count is total\n    return\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = ' ' + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  initStatus:( result, expect, text, op, code ) ->\n    resultType  = @type(result)\n    expectType  = @type(expect)\n    module      = text.split('.')[0]\n    {\n      assert:{ text:text, pass:true, module:module, op:op, code:code }\n      result:{ text:\"\", type:resultType, value:result }\n      expect:{ text:\"\", type:expectType, value:expect }\n    }\n\n  assert:( result, expect, status, level=0 ) =>\n\n    # Set types\n    resultType  = @type(result)\n    expectType  = @type(expect)\n\n    # Define checks\n    if @isNot(result) or @isNot(expect)\n       status.assert.pass = false\n       status.assert.text = \"-- Failed -- because of null or undefined values for\" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n       return status\n\n    # Type checks\n    if resultType isnt expectType\n       status.assert.pass = false\n       status.assert.text = \"-- Failed -- Result type does match Expect tyoe for \" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n       return status\n\n    # String, Number, Object and Array check\n    # May want to factor in unknowns\n    switch resultType\n      when 'string'   then status.assert.pass = result is expect\n      when 'number'   then status.assert.pass = result is expect\n      when 'boolean'  then status.assert.pass = result is expect\n      when 'object'   then status = @objsEq( result, expect, status, level )\n      when 'array'    then status = @arrsEq( result, expect, status, level )\n      when 'function' then status.assert.pass = true   # Indicates a skip over when in a recursion\n      else                 status.assert.pass = false\n\n    # Update status at only level 0\n    if status.assert.pass and level is 0\n       status.assert.text = \"-- Passed -- \" + status.assert.text\n       status.assert.code = @code\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @passed.push( status )\n    else if level is 0\n       status.assert.text = \"-- Failed -- \" + status.assert.text\n       status.assert.code = @code\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n    status\n\n  report:( status, result, expect ) ->\n    eq = if status.assert.pass then 'is' else 'not'\n    @blockText   = \"\" if @blockClear\n    @statusText  = \"\"\n    @statusText += \"\"\"\\n#{status.assert.text} #{eq} #{@toStr(expect)}\"\"\"\n    @statusText += \"\"\"\\n   #{@textResult( status, result )}\"\"\" if @verbose or not status.assert.pass\n    @statusText += \"\"\"\\n   #{@textExpect( status, expect )}\"\"\" if @verbose or not status.assert.pass\n    #statusText += \"\\n\"+@code              if @isStr(@code) and ( @verbose or not status.assert.pass )\n    @blockText  += @statusText if not @statusClear\n    @statusClear = false\n    @blockClear  = false\n\n    if @isDef(@stream)\n      @stream.publish( @statusSubject, status )  if @stream.hasSubscribers( @statusSubject )\n      @stream.publish( @stringSubject, status )  if @stream.hasSubscribers( @stringSubject )\n    return\n\n  status:() ->\n    @statusClear = true\n    @statusText\n\n  block:() ->\n    @blockClear = true\n    @blockText\n\n  summary:( module=null ) =>\n    summaryText = \"\"\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      summaryText += \"\"\"\\n\\n-- Summary - for #{module}-unit.coffee\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    else\n      fullCount = @passed.length + @failed.length\n      summaryText += \"\"\"\\n\\n-- Summary - for all tests\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@passed.length,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@failed.length,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,     fullCount)} tests total\"\"\"\n\n    if @isDef(@stream) and @stream.hasSubscribers( @summarySubject )\n      @stream.publish( @summarySubject, summaryText )\n\n    summaryText = @block() + summaryText # Prepend any block statuses\n\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @failed,      @passed )\n      @reviewsLocal( { failed:false, passed:false } )\n      \n    summaryText\n\n  textResult:( status, result ) ->\n    \"\"\"Result type is #{status.result.type} with value #{@toStr(result)}\"\"\"\n\n  textExpect:( status, expect ) ->\n    \"\"\"Expect type is #{status.expect.type} with value #{@toStr(expect)}\"\"\"\n\n  # Deep object equality assertion\n  objsEq:( result, expect, status, level ) ->\n    for own key, obj of expect\n      if not  result[key]?\n        status.assert.pass  = false\n        status.assert.text  = \"-- Failed -- Result key:#{key} is missing for \" + status.assert.text\n        status.expect.text  = \"Expect type is #{@type(result)} with value #{@toStr(expect)}\"\n        status.result.text  = \"Result key:#{key} is missing\"\n        return status\n      else\n        status = @assert( result[key], expect[key], status, ++level )\n    status.assert.pass  = true\n    return status\n\n  # Deep array equality assertion\n  arrsEq:( result, expect, status, level ) ->\n    if result.length isnt expect.length\n      status.assert.pass = false\n      status.assert.text = \"-- Failed -- Different array lengths fot\" + status.assert.text\n      status.result.text = \"Result length is #{result.length} value is\"\n      status.expect.text = \"Expect length is #{expect.length} value is\"\n      return status\n    for i in [0...expect.length]\n      status = @assert( result[i], expect[i], status, ++level )\n    status.assert.pass  = true\n    return status\n\n  # Type Assertions that leverage @type(arg) the improved typeof(arg)\n  isType:(v,t)    =>  @type(v) is t\n  isNull:(d)      =>  @isType(d,'null')\n  isUndef:(d)     =>  @isType(d,'undefined')\n  isDef:(d)       =>  @type(d) isnt 'null' and @type(d) isnt 'undefined'\n  isNot:(d)       =>  not @isDef(d)\n  isStr:(s)       =>  @isType(s,\"string\") and s.length > 0 and s isnt 'None'\n  inStr:(s,e)     =>  @isStr(s) and s.indexOf(e) > -1\n  isNum:(n)       =>  @isType(n,\"number\")\n  isNaN:(n)       =>  @isNum(n) and Number.isNaN(n)\n  isObj:(o)       =>  @isType(o,\"object\")\n  inObj:(o,k)     =>  @isObj(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n  toKeys:(o)      =>  if @isObj(o) then Object.keys(o) else []\n  isVal:(v)       =>  @isType(v,\"number\") or @isType(v,\"string\") or @isType(v,\"boolean\")\n  isFunc:(f)      =>  @isType(f,\"function\")\n  isArray:(a)     =>  @isType(a,\"array\") and a.length? and a.length > 0\n  inArray:(a,e)   =>  @isArray(a) and a.includes(e)\n  inRange:(a,i)   =>  @isArray(a) and 0 <= i and i < a.length\n  atIndex:(a,e)   =>  if @isArray(a) then a.indexOf(e) else -1\n  head:(a)        =>  if @isArray(a) then a[0]          else null\n  tail:(a)        =>  if @isArray(a) then a[a.length-1] else null\n  time:()         =>  new Date().getTime()\n  hasInteger:(s)  =>  @isStr(s) and /^\\s*(\\+|-)?\\d+\\s*$/.test(s)\n  hasFloat:(s)    =>  @isStr(s) and /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/.test(s)\n  hasCurrency:(s) =>  @isStr(s) and /^\\s*(\\+|-)?((\\d+(\\.\\d\\d)?)|(\\.\\d\\d))\\s*$/.test(s)\n  hasEmail:(s)    =>  @isStr(s) and /^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/.test(s)\n\n  # Converters\n  toStr:( value, enclose=false ) =>\n    str = \"\"\n    switch @type(value)\n      when 'object'\n        str += \"{ \"\n        for own key, val of value\n          str += key+\":\"+@toStr(val,true)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma and space\n        str += \" }\"\n      when 'array'\n        str += \"[ \"\n        for val in value\n          str += @toStr(val,true)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma  and space\n        str += \" ]\"\n      when 'string'\n        str = if enclose then '\"'+value+'\"' else value\n      else str = value.toString()\n    console.log( \"Tester.toStr(val)\", { type:@type(value), value:value, str:str } ) if enclose and @debug\n    str\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) =>\n    return false if @isNot(e)\n    switch @isType(e)\n      when 'object' then Object.getOwnPropertyNames(e).length is 0\n      when 'array'  then e.length is 0\n      when 'string' then e.length is 0\n      else               false\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) =>\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt '$' and b isnt '_'\n\n  # An improved typeof() that follows the convention by returning types in lower case\n  # by default. The basic types returned are:\n  # boolean number string function object array date regexp undefined null\n  type:(val,lowerCase=true) =>\n    str = Object::toString.call(val)\n    tok = str.split(' ')[1]\n    typ = tok.substring(0,tok.length-1)\n    if lowerCase then typ.toLowerCase() else typ\n\n  # A more detail type that returns basic types, class, object and function name in upper case\n  klass:(val) =>\n    typ = @type(val,false) # Start with basic type to catch 'Null' and 'Undefined'\n    switch typ\n      when 'Null'      then 'Null'\n      when 'Undefined' then 'Undefined'\n      when \"Function\"  then val.name\n      when \"Object\"    then val.constructor.name\n      else                  typ\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( failed, passed ) =>\n    localStorage.setItem( 'TestsFailed', JSON.stringify( failed ) )\n    localStorage.setItem( 'TestsPassed', JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n    return if not @debug\n    if reviewFailed\n      failLocals = localStorage.getItem( 'TestsFailed' )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        for failStatus in failStatuses\n          console.log( failStatus )\n    if reviewPassed\n      passLocals = localStorage.getItem( 'TestsPassed' )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        for passStatus in passStatuses\n          console.log( passStatus )\n    return\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nexport { test, unit }\n\n###\n  # Need to work on another way to log( @statusText ) when @status is not called in a unit test\n  status:( wait=null) ->\n    if @isNull(wait)\n      @statusCalled = true\n    else if @logToConsole\n      @sleep( 2000 ).then( console.log( @statusText )  ) if not @statusCalled\n      # console.log( @statusText )                       if not @statusCalled\n    @statusText\n\n  sleep:(ms) ->\n    new Promise( (resolve) => setTimeout( resolve, ms ) )\n###"
  ]
}
{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    @stream = null # Optional streaming publisher module that is set by @injectStream( stream )\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    @logToConsole   = true\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its argidating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @stringSubject  = \"TestString\"  # Subject for publishing each test status string\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @describe( description, suite )\n    @description = \"\"\n    @suite       = \"\"\n\n    # Accummulate test status state\n    @text         = \"\" # set by test() that is passed inside eq() and sent to run()\n    @info         = \"\"\n    @code         = \"\"\n    @statusText   = \"\"\n    @statusClear  = true\n    @blockText    = \"\"\n    @blockClear   = true\n\n    # Accumulated status objects\n    @modules      = {}\n    @passed       = []\n    @failed       = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream       = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @stringSubject  = if options.stringSubject?  then options.stringSubject  else \"TestString\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test -- Pass a closeure in the form of  (t) -> { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) -> { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test(\"2 + 3 = 5\", (t) ->\n  #     t.eq( add(2,3), 5 ) )\n  test:( text, closure ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text     = text               # @text is latter referenced inside eq()\n    @code     = closure.toString() # @code is latter referenced inside eq()\n    closure(@)\n    @  # returns tester instance for chaining\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  unit:( text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    @run( text, result, expect, \"eq\" ) # returns tester instance for chaining\n\n  # Validate and diagnose a result that fits a schema both of type 'object' or 'array'\n  #  Very usefull for a result originating from a'.json' file and parsed by JSON.parse(...)\n  #  Very usefull for a schema originating from a'.json' file and parsed by JSON.parse(...)\n  fits:( text, result, schema ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    # if @debug\n    #  console.log( \"Tester.fits(result,schema)\", { type:@type(result), result:result, schema:schema, status:status } )\n    @run( text, result, schema, \"schema\" )  # returns tester for chaining  is expect = @toSchema( expect, op ) needed?\n\n  eq:( result, expect ) =>\n    @run( @text, result, expect, \"eq\" )\n\n  inRange:( result, range ) =>\n    @run( @text, result, range, \"range\" )\n\n  # -- info reporting ---\n\n  # A gem methods that appends text along with retrStr to @info for detailed reporting of inconsistence\n  #  along with a vialble actual return specified by the caller\n  toInfo:( method, text, arg, type, typeTo, retnStr, retn ) ->\n    @info += \"\\n  Tester.#{method} #{text} #{@toString(arg)} of '#{type}' to'#{typeTo}' returning #{retnStr}\"\n    retn\n\n  isInfo:( pass, text, type, types ) ->\n    return true if pass\n    @info += \"\\n  #{text} of type '#{type}' in'#{types}'\"\n    false\n\n  inInfo:( pass, result, expect, oper, spec, text ) ->\n    prefix = if pass then \"-- Passed --\" else \"-- Failed --\"\n    condit = if pass then \"matches \"      else \"no match\"\n    @info += \"\\n  #{prefix} #{result} #{condit} #{expect} with oper #{oper} and spec #{spec} #{text}\"\n    false\n\n  # -- run() scenario is @initStatus(...) @assert(...) @report(...)\n\n  run:( text, result, expect, op ) ->\n    return @ not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect, op:op } ) if  @debug\n    status = @initStatus( result, expect, op, text   )\n    status = @assert(     result, expect, op, status )\n    @report(              result, expect, op, status )\n    @    # returns tester instance for chaining\n\n  initStatus:( result, expect, op, text ) ->\n    module = text.split(\".\")[0]\n    eType  = if op is \"schema\" then \"schema\" else @type(expect)\n    {\n      assert:{ text:text, pass:true, module:module, op:op, code:@code, info:\"\" }\n      result:{ text:\"\", type:@type(result), value:result }\n      expect:{ text:\"\", type:eType,         value:expect }\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(arg) so asserions are only test when types match\n  #   Skips over @type(arg) = \"function\"\n  assert:( result, expect, op, status, level=0, key=null, index=null ) ->\n\n    # Optionally convert expect to a schema or range or enums based on 'op'\n    expect = switch op\n      when 'schema' then @toSchema(expect, op )\n      when 'range'  then @toRange( expect, op )   # Need another version\n      when 'enums'  then @toEnums( expect )\n      else expect\n\n    # Check values and types\n    status = @checkValuesTypes( result, expect, op, status, key, index )\n\n    # Perform all comparisions\n    if status.assert.pass\n       status = switch @type(result)\n         when \"string\",\"int\",\"float\",\"boolean\" then @valuesEq(   result, expect, op, status )\n         when \"object\"                         then @objectsEq(  result, expect, op, status, level )\n         when \"array\"                          then @arraysEq(   result, expect, op, status, level )\n         else                                       @unknownsEq( result, expect, op, status )  # just a fallback\n       @examine( status.assert.pass, result, expect, op, status, \"\", key, index )\n\n    # Store status in @passed and @failed arrays\n    if level is 0\n       @passed.push(status) if     status.assert.pass\n       @failed.push(status) if not status.assert.pass\n    status\n\n  # Generates informative text in status\n  examine:( pass, result, expect, op, status, info, key, index ) ->\n    rType  = @type(result)\n    eType  = @typeExpect(expect)\n    prefix = if pass then \"-- Passed -- \" else \"-- Failed -- \"\n    status.assert.text   = prefix + status.assert.text\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.assert.info  += info\n    status.assert.code   = if @isString(@code) then @code else \"\"\n    status.result.text  += @textValue( \"Result\", rType, result, key, index )\n    status.expect.text  += @textValue( \"Expect\", eType, expect, key, index )\n    status\n\n  checkValuesTypes:( result, expect, op, status, key, index ) ->\n    rType  = @type(result)\n    eType  = @typeExpect(expect,op)\n    rTypes = Tester.results\n    eTypes = Tester.expects\n    info  = switch\n      when @isNot(result)\n        \" Result of #{rType} is not defined\\nExpect is type '#{eType}'\"\n      when @isNot(expect)\n        \" Expect of #{eType} is not defined\\nResult is type '#{rType}'\"\n      when rType isnt eType and eType isnt ( \"schema\" or \"range\" or \"enums\" )\n        \" Types do not match\\nResult type is '#{rType}'\\nExpect type is '#{eType}'\"\n      when rType is \"function\"\n        \" Result type is 'function'\\nExpect type is '#{eType}'\"\n      when eType is \"function\"\n        \" Expect type is 'function'\\nResult type is '#{rType}'\"\n      when not @inArray(rType,rTypes)\n        \" Result is type '#{rType}' an unknown type is type '#{eType}'\"\n      when not @inArray(eType,eTypes)\n        \" Result is type '#{rType}'\\nExpect is type '#{eType}' an unknown type\"\n      else\n        \"\"\n    if @isString(info)\n      @examine( false, result, expect, op, status, info, key, index )\n    else\n      status\n\n\n\n  # Equality check for Tester.opEnums[]\n\n  valuesEq:( result, expect, op, status ) ->\n    return true if expect is \"any\"\n    pass = switch op\n      when \"schema\" then @inSchema( result, expect )  # expect is schema\n      when \"range\"  then @inRange(  result, expect )  # expect is range\n      when \"eq\" then result is   expect\n      when \"le\" then result <=   expect\n      when \"lt\" then result <    expect\n      when \"ge\" then result >=   expect\n      when \"gt\" then result >    expect\n      when \"ne\" then result isnt expect\n      else           false\n    status.assert.pass = pass\n    status\n\n  # Just a fallback when types are not fully  screened\n  unknownsEq:( result, expect, op, status ) ->\n    status.assert.pass  = false\n    status.assert.info += \"unknown types for comparision\"\n    status\n\n  textValue:( name, value, key, index ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isString(key)\n    ref = \" at index: #{index} \" if @isNumber(index)\n    \"#{name}#{ref}where type is #{@type(value)} and value is #{@toString(value)}\"\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, op, status, level ) ->\n\n    # Check that the expect object has all the keys that the result object has\n    for own key, arg of result when  expect[key]?\n      status = @examine( false, arg, expect[key], op, status, \"missing expect\", key, null )\n\n    # Check that the result object has all the keys that the expect object has\n    for own key, arg of expect when ( result[key]? or ( op is \"schema\" and arg.card is \"1\" ) )\n      status = @examine( false, result[key], arg, op, status, \"missing result\", key, null )\n\n    # Assert each value for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], arg, op, status, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, op, status, level ) ->\n    value = expect\n\n    # Check against the schema when present\n    if op is \"schema\"\n      value = expect.value\n      if value is \"any\"\n         status.assert.pass = true\n         return status\n      else if value.size isnt \"any\" and result.length > value.size\n         info   = \" Result length exceeds the maximum size #{value.size}\"\n         info  += \" Result length is #{result.length}\"\n         info  += \" Size is #{value.size}\"\n         return @examine( false, result, expect, op, status, info, null, null )\n      else if not @isArray(value)\n         return status\n\n    # Examine the array lengths\n    if result.length isnt value.length\n      info   = \" different array lengths\"\n      info  += \" Result length is #{result.length}\"\n      info  += \" Expect length is #{value.length}\"\n      status = @examine( false, result, expect, op, status, info, null, null )\n\n    # Assert each value within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], op, status, ++level, null, i )\n\n    status\n\n  report:( result, expect, op, status ) ->\n    pass = status.assert.pass\n    eq   = if pass then \"is\" else \"not\"\n    @blockText   = \"\" if @blockClear\n    @statusText  = \"\"\"\\n#{status.assert.text} \"\"\"\n    @statusText += \"\"\"#{eq} #{@toString(expect)}\"\"\" if status.result.type isnt \"function\"\n    @statusText += status.assert.info if @isString(status.assert.info)\n    @statusText += \"\"\"\\n   #{@textValue( \"Result\", @type(result),       result )}\"\"\" if @verbose or not pass\n    @statusText += \"\"\"\\n   #{@textValue( \"Expect\", @typeExpect(expect), expect )}\"\"\" if @verbose or not pass\n    #statusText += \"\\n\"+@code                                 if @isString(@code) and ( @verbose or not pass )\n    @blockText  += @statusText   # if not @statusClear # keep the status in the block for now\n    @statusClear = false\n    @blockClear  = false\n\n    if @isDef(@stream)\n      @stream.publish( @statusSubject, status )\n      @stream.publish( @stringSubject, status )\n    return\n\n  # @runUnitTests(...) @describe(...) @summary(...)\n\n  runUnitTests:( paths ) ->\n    for path in paths\n      modulePath = @path( path )\n      console.log( \"\\n-- Started Unit Testing for: #{modulePath.name} in #{modulePath.path}\" ) if @logToConsole\n      await `import( path /* @vite-ignore */ )`\n    @summary()\n    return\n\n  describe:( description, suite=null ) =>\n    @description = description\n    @suite       = if suite? then suite else null\n    @\n\n  summary:( module=null ) ->\n    path = if module? and @modules[module]? then @modules[module].path else \"?\"\n    if @debug\n      console.log( \"Tester.summary(module)\", { module:module, modules:@modules, key:@modules[module], path:path } )\n    summaryText = \"\"\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      summaryText += \"\"\"\\n\\n-- Summary - for #{module} in #{path}\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    else\n      fullCount = @passed.length + @failed.length\n      summaryText += \"\"\"\\n\\n-- Summary - for all tests\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@passed.length,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@failed.length,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,     fullCount)} tests total\"\"\"\n\n    if @isDef(@stream) and @stream.hasSubscribers( @summarySubject )\n      @stream.publish( @summarySubject, summaryText )\n\n    summaryText = @block() + summaryText # Prepend any block statuses\n\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @failed,      @passed )\n      @reviewsLocal( { failed:false, passed:false } )\n      \n    summaryText\n\n  # Returns a single text status fron the last test run when called in a unit test module like Tester-unit.coffee\n  # Example: console.log( unit().status() )\n  #   or      unit().log( unit().status() )\n  status:() ->\n    # @statusClear = true\n    @statusText\n\n  # Returns a block of text statuses when callrd in a unit test module like Tester-unit.coffee\n  # Example: console.log( unit().block() )\n  #   or      unit().log( unit().block() )\n  block:() ->\n    @blockClear = true\n    @blockText\n\n  # Add a unit test file path to the @modules object\n  path:( path ) ->\n    dirs   = path.split(\"/\")\n    module = @tail(dirs).split(\"-\")[0]\n    @modules[module] = { name:module, path:path }\n    console.log( \"Tester.path(path)\", { path:path, dirs:dirs, module:module } ) if @debug\n    @modules[module]\n\n  isEnums:( arg, oper, type ) ->\n    oper is \"enums\" and @isArray(arg,type) and @isResultType(type)\n\n  # Check if an arg like expect is a 'schema'\n  isSchema:( arg ) ->\n    @conditions( @isObject(arg), @isResultType(arg.type), @isExpect(arg.expect,arg.oper), @isCard(arg.card) )\n\n  isResultType:( type ) ->\n    pass = @isDef(type) and @inArray(type,Tester.results)\n    @isInfo( pass, \"Not a Result\", type, Tester.results )\n\n  isExpect:(expect,oper) ->\n    @isOper(oper)\n    @isDef(expect)\n    type = @type(expect)\n    pass = switch oper\n      when \"range\" then @isRange(expect)\n      when \"enums\" then @isEnums(expect,oper,type)\n      when \"eq\"    then @isResultType(type)\n      else @isInfo( false, \"Not a Expect oper\", oper, Tester.opers )\n    @isInfo( pass, \"Not a Expect\", type, Tester.expects )\n\n  isExpectType:( type ) ->\n    pass = @isDef(type) and @inArray( type, Tester.expects )\n    @isInfo( pass, \"Not a Expect\",     type, Tester.expects )\n\n  isOper:( oper ) ->\n    pass = @isDef(oper) and @inArray( oper, Tester.opers )\n    @isInfo( pass, \"Not an 'oper'\",    oper, Tester.opers )\n\n  isCard:( card ) ->\n    pass = @isDef(card) and @inArray( card, Tester.cards )\n    @isInfo( pass, \"Not a 'card'\",     card, Tester.cards )\n\n  # This approach insures that all conditions are checked and messages sent\n  #   then all arg returns are anded together to determine a final pass or fail\n  conditions:( args... ) ->\n    pass = true\n    pass = pass and arg for arg in args\n    pass\n\n  # Range is applies to all array values\n  # Format type:ranges or value:length:oper?\n  # Examples:\n  #\n  #   \"array:[0,255]\" }      { type:\"array\",   oper:\"range\", check:[0,255],         card=\"1\" }\n  #   \"string:James\"         { type:\"string\",  oper:\"eq\",    check:James,           card=\"1\" }\n  #   \"string:a|b|c\"         { type:\"string\",  oper:\"enums\", check:\"a|b|c\",         card=\"1\" }\n  #   \"int:[0,100]\"          { type:\"int\",     oper:\"range\", check:[0,100],         card=\"1\" }\n  #   \"float:[0.0,100.0,1.0] { type:\"float\",   oper:\"range\", check:[0.0,100.0,1.0], card=\"1\" }\n  #   \"string:[\"\",\"zzz\"]     { type:\"string\",  oper:\"range\", check:[\"\",\"zzz\"],      card=\"1\" }\n  #   \"boolean\"              { type:\"boolean\", oper:\"any\",   check:\"any\",           card=\"1\" }\n  #   \"object:{r:[0,255],g:[0,255],b:[0,255]}\n  #     { type:\"object\", oper:\"range\", range:{r:[0,255],g:[0,255],b:[0,255]}, card=\"1\" }\n  #  \"array:[[0,360],[0,100],[0,100]]:?\"\n  #     { type:\"array\",  oper:\"range\", range:[[0,360],[0,100],[0,100]], card=\"?\" }\n\n  toSchema:( arg, op ) ->\n\n    typeExpect = @typeExpect(expect,op)\n    schema     = { type:\"any\", oper:\"any\", expect:\"any\", card:\"1\", spec:\"\"  }\n\n    schema = switch typeExpect\n      when \"string\"\n        schema = @parseSchema( arg, schema )\n      when \"object\"\n        schema.type   = if arg.type?   then arg.type  else \"any\"\n        schema.oper   = if arg.oper?   then arg.oper  else \"any\"\n        schema.expect = if arg.expect? then arg.expect else \"any\"\n        schema.card   = if arg.card?   then arg.card  else  \"1\"  # required\n        schema.spec   = if arg.spec?   then arg.spec  else  \"\"   # required\n      else @toInfo( \"toSchema(expect,op)\", \"expect not 'string or object\",\n        arg, typeExpect, \"schema\", @toString(schema), schema )\n\n  # IN progress\n  testSchema:( result, schema ) ->\n    switch schema.oper\n      when 'range' then  @inRange( result, schema.expect )\n      when 'enuns' then  @inEnums( result, schema.expect )\n      when 'eq'    then  @isEqual( result, schema.expect )\n      else @inInfo( false, result, schema, schema.oper, schema.spec, \"unknown expect oper\" )\n\n  parseSchema:( expect, schema ) ->\n    splits      = expect.split(\":\")\n    length      = splits.length\n    if length >= 1                                        # type\n        schema.type = splits[0]\n    if length >= 1                                        # expect\n       schema.spec splits[1]\n       if splits[1].includes(\"|\")                         #   enum\n         schema.oper   = \"range\"\n         schema.expect = @toEnums( splits[1] )\n       else if @isStringEnclosed( \"[\", splits[1], \"]\" )  #    range array\n         schema.oper   = \"range\"\n         schema.expect = @toArray( splits[1] )\n      else if @isStringEnclosed( \"{\", splits[1], \"}\" )   #    range object\n         schema.oper   = \"range\"\n         schema.expect = @toObject( splits[1] )\n      else\n        schema.oper   = \"any\"\n        schema.expect = \"any\"\n    if length >= 2                                        # card i.e cardinaliry\n        schema.oper = splits[2]\n    schema\n\n  # The 9 fundamental type Assertions that leverage @type(arg) the improved typeof(arg)\n  # In addition isInt isFloat isBoolean isArray isObject can optionally chech strings\n  isString:(s)           ->   @isType(s,\"string\") and s.length > 0 and s isnt \"None\"\n  isInt:(i,sc=false)     -> ( @isType(i,\"int\")   and not isNaN(i) ) or ( sc and @isStringInt(i)   )\n  isFloat:(f,sc=false)   -> ( @isType(f,\"float\") and not isNaN(f) ) or ( sc and @isStringFloat(f) )\n  isBoolean:(b,sc=false) ->   @isType(b,\"boolean\") or ( sc and @isStringBoolean(b) )\n  isObject:(o,sc=false)  ->   @isType(o,\"object\")  or ( sc and @isStringObject(o) )\n  isRegex:(r)            ->   @isType(r,\"regex\")\n  isFunction:(f)         ->   @isType(f,\"function\")\n  isNull:(m)             ->   @isType(m,\"null\")\n  isUndef:(u)            ->   @isType(u,\"undefined\")\n  isBigInt:(b)           ->   typeof(b) is \"bigint\" # Will incorporate into type\n  isSymbol:(s)           ->   typeof(s) is \"symbol\" # Will incorporate into type\n\n  # Set type for asserting uniformly typed arrays and sc=true for determining if a string is an array\n  # isArrayOfType called within @isArray(...) because it assumes array exists\n  #   and returns true for 'null' that signifies that the type assertions\n  #   on the elements should be skipped\n  isArray:( a, type=null, sc=false ) ->\n    return @isStringArray(a) if sc\n    # Internal function that assert that an viable is uniformly types\n    isArrayOfType = (a,t) =>\n      return true if t is 'null'\n      for e in a\n        return false if @type(e) isnt t\n      true\n\n    if @isType(a,\"array\") and a.length? and a.length > 0\n      type = @type( a[0] )\n      isArrayOfType(a,type)\n\n  # General purpose since if checks the array's existence and interate over all the elements\n  isArrayType:(a,t) ->\n    return false if not @isArray(a)\n    for e in a\n      return false if @type(e) isnt t\n    true\n\n  # General purpose since if checks the array's existence and interate over all the elements\n  isArrayMixed:(a) ->\n    return false if not @isArray(a)\n    type = @type(a[0])\n    for e in a\n      return false if @type(e) isnt type\n    false\n\n  # Aggregate and special value assertions\n  isType:(v,t)      ->   @type(v) is t\n  isDef:(d)         ->   @type(d) isnt ( \"null\" or \"undefined\" )\n  isNumber:(n)      ->   @type(n) is   ( \"int\"  or \"float\"     )\n\n  isNot:(d)         ->   not @isDef(d)\n  isNaN:(n)         ->   Number.isNaN(n) # @isNumber(n) and\n\n  # Containment assertions where args are always ( value, container )\n  inString:(e,s)  ->  @isString(s) and @isDef(e) and s.includes(e)\n  inArray:( e,a)  ->  @isArray(a)  and @isDef(e) and a.includes(e)\n  inObject:(k,o)  ->  @isObject(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n\n  toKeys:(o)      ->  if @isObject(o) then Object.keys(o) else []\n  time:()         ->  new Date().getTime()\n\n  # -- More assertions --\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) ->\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt \"$\" and b isnt \"_\"\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) ->\n    return false if @isNot(e)\n    switch @isType(e)\n      when \"object\" then Object.getOwnPropertyNames(e).length is 0\n      when \"array\"  then e.length is 0\n      when \"string\" then e.length is 0\n      else               false  # Look into\n\n  isStringFloat:( str ) ->\n    if @isString( str )\n       regex = /^-?\\d+(?:[.,]\\d*?)?$/\n       regex.test(str)\n    else false\n\n  isStringInt:( str ) ->\n    if @isString( str )\n       regex = /^-?\\d+$/\n       regex.test(str)\n    else false\n\n  isStringBoolean:( str ) ->\n    @isString(str) and ( str is \"true\" or str \"false\" )\n\n  isStringArray:( str ) ->\n    @isStringEnclosed( \"[\", str, \"]\" )\n\n  isStringObject:( str ) ->\n    @isStringEnclosed( \"{\", str, \"}\" )\n\n  # Tests if string is enclosed good for [array] and {object}\n  isStringEnclosed:( beg, str, end ) ->\n    if @isString( str )\n      s = str.trim()\n      s.startsWith(beg) and s.endsWith(end)\n    else false\n\n  # Converters\n  toType:( arg, type ) ->\n    switch type\n      when \"string\"  then @toString(  arg )\n      when \"int\"     then @toInt(     arg )\n      when \"float\"   then @toFloat(   arg )\n      when \"boolean\" then @toBoolean( arg )\n      when \"array\"   then @toArray(   arg )\n      when \"object\"  then @toObject(  arg )\n      else\n        console.error( \"Tester.toType(type,arg) unknown type\", { type:type, arg:arg } )\n        null\n\n  # enclose a 'string'\n  # enclose(\"abc\",   '\"'  )       # returns \"abc\" - good for JSON keys and values\n  # enclose(\"123\",   \"'\"  )       # returns '123'\n  # enclose(\"xyz\",   \"()\" )       # returns (xyz)\n  # enclose(\"d,e,f\", \"[]\" )       # returns [d,e,f]\n  # enclose(\"a:x,b:y,c:z\", \"[]\" ) # returns {a:x,b:y,c:z}\n  enclose:( str, enc=\"\" ) ->\n    if enc.length is 2 then \"#{enc.charAt(0)}#{str}#{enc.charAt(1)}\"\n    if enc.length is 1 then \"#{enc.charAt(0)}#{str}#{enc.charAt(0)}\"\n    else str\n\n  toString:( arg, enc=\"\" ) ->\n    str  = \"\"\n    type = @type(arg)\n    switch type\n      when \"string\"   then arg\n      when \"int\"      then parseInt(arg)\n      when \"float\"    then parseFloat(arg)\n      when \"boolean\"  then if arg then \"true\" else \"false\"\n      when \"object\" # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"{ \"\n        for own key, val of arg\n          str += key+\":\"+@enclose(@toString(val),'\"')+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma and space\n        str += \" }\"\n      when \"array\"  # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"[ \"\n        for arg in arg\n          str += @toString(arg)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma  and space\n        str += \" ]\"\n      when \"function\"   then @toInfo( \"toString(arg)\", \"unable to convert\", arg, \"function\", \"string\", \"?function?\", \"?function?\" )\n      when \"null\"       then \"null\"\n      when \"undefined\"  then \"undefined\"\n      when \"bigint\"     then arg.toString()\n      when \"symbol\"     then arg.toString()   # return of arg.toString() could be a hail mary\n      else  @toInfo( \"toString(arg)\", \"unable to convert\", arg, type, \"string\", arg.toString(), arg.toString() )\n    if type isnt ( \"object\" or \"array\" ) and enc.length > 0 then @enclose(str,enc) else str\n\n  toFloat:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"float\" then arg\n      when \"int\"   then parseFloat(arg.toFixed(1)) # Coerces an 'int' like '1' to a 'float' like '1.0'\n      when \"string\"\n        if @isStringFloat(arg)  then parseFloat(arg)\n        else @toInfo( \"toFloat(arg)\", \"unable to convert\", arg, \"string\", \"float\", \"NaN\", NaN )\n      else   @toInfo( \"toFloat(arg)\", \"unable to convert\", arg,   type,   \"float\", \"NaN\", NaN )\n\n  toInt:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"int\"    then arg\n      when \"float\"  then Math.round(arg)\n      when \"string\"\n        if @isStringInt(arg)  then parseInt(arg)\n        else @toInfo( \"toInt(arg)\", \"unable to convert\", arg, \"string\", \"int\", \"NaN\", NaN )\n      else   @toInfo( \"toInt(arg)\", \"unable to convert\", arg,   type,   \"int\", \"NaN\", NaN )\n\n  toBoolean:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"boolean\" then arg\n      when \"string\"\n        switch arg \n          when \"true\"  then  true\n          when \"false\" then false\n          else @toInfo( \"toBoolean(arg)\", \"unable to convert\", arg, type, \"boolean\", \"false\", false )\n      when \"int\"   then arg isnt 0   # check 0   false may not be a convention\n      when \"float\" then arg isnt 0.0 # check 0.0 false may not be a convention\n      else     @toInfo( \"toBoolean(arg)\", \"unable to convert\", arg, type, \"boolean\", \"false\", false )\n\n  toArray:( arg, type, sep=\",\" ) ->\n    type = @type(arg)\n    switch  type\n      when \"array\" then arg\n      when \"string\"\n        str = arg.trim()\n        if @head(arg) is \"[\" and @tail(arg) is \"]\" # Strip off brackets\n          arg = @slice(arg,2,arg.length-1)\n        array = []\n        strs  = @slice(arg,2,arg.length-1).split(sep)\n        for str in strs\n          array.push( @toType( str, type ) )\n        array\n      else @toInfo( \"toArray(arg)\", \"unable to convert\", arg, type, \"array\", \"[]\", [] )\n\n  toObject:( arg ) ->\n    obj  = {}\n    type = @type(arg)\n    switch type\n      when \"object\"\n        obj = arg\n      when \"array\"\n        obj[i] = arg[i] for i in [0...arg.length]\n      when \"int\",\"float\",\"boolean\",\"function\"\n        obj[type] = arg\n      when \"string\"\n        obj = arg.split(\",\")\n                 .map( (keyVal) => keyVal.split(\":\").map( (arg) => arg.trim() ) )\n                 .reduce( (acc,cur) => acc[cur[0]] = cur[1]; acc {} )  # acc accumulator cur current\n      else\n        @toInfo( \"toObject(arg)\", \"unable to convert\", arg, type, \"object\", \"{}\", {} )\n    obj\n\n  toEnums:( arg ) ->\n    enums = []\n    type  = type = @type(arg)\n    switch type\n      when \"string\" and arg.includes(\"|\")\n        splits = arg.split(\"|\")\n        for split in splits\n          enums.push( split )\n      when \"array\"\n        enums = arg\n      else\n        enums = @toInfo( \"toEnums(arg)\", \"unable to convert\", arg, type, \"enums\", \"[]\", [] )\n    enums\n\n\n\n  rangeType:( range ) ->\n    type = if range.length > 0 then @type(range[0]) else \"null\"\n    if type is ( \"string\" or \"int\" or \"float\" )\n      if @isArray(range,type) then type else \"mixed\"\n    else if type is \"array\"\n      @rangeType(range[0])\n\n  # -- Range Methods --\n\n  # Asserts range with for types \"string\" or \"int\" or \"float\"\n  isRange:(range)  ->\n\n    # internal functions called after @rangeType(range) has verified that range\n    #   is an array of type \"string\" or \"int\" or \"float\"\n    isStringRamge = (r) -> r.length is 2 and r[0]      <= r[1]       # For 'string'\n    isIntRange    = (r) -> r.length is 2 and r[0]      <= r[1]       # For 'int'\n    isFloatRange  = (r) -> r.length is 3 and r[0]-r[2] <= r[1]+r[2]  # For 'float' r[2] is tol\n    isArrayRange  = (r) ->\n      pass = true\n      for e in r\n        pass = pass and @isRange(e)\n      pass\n\n    # @rangeType(...) checks array existence and asserts type with @isArray(range,type)\n    type = @rangeType(range)\n\n    switch type\n      when 'string' then isStringRamge(range)\n      when 'int'    then isIntRange(range)\n      when 'float'  then isFloatRange(range)\n      when 'array'  then isArrayRange(range)\n      else  @toInfo( \"isRange(range)\", \"not a range type\", range, type, \"\", \"false\", false )\n\n  toRange:( type, min=null, max=null, tol=null ) ->\n    minType = @type(min)\n    maxType = @type(max)\n    tolType = @type(tol)\n    switch type\n      when 'string'\n        min = if minType isnt \"null\" and minType is \"string\" then min else \"\"   # need to see if \"\" is a string min\n        max = if maxType isnt \"null\" and maxType is \"string\" then max else \"z\"  # not a good max string\n        [ min, max ]\n      when 'int'\n        min = if minType isnt \"null\" and minType is \"int\"    then min else   0\n        max = if maxType isnt \"null\" and maxType is \"int\"    then max else 100\n        [ min, max ]\n      when 'float'\n        min = if minType isnt \"null\" and minType is \"float\"   then min else   0.0\n        max = if maxType isnt \"null\" and maxType is \"float\"   then max else 100.0\n        max = if tolType isnt \"null\" and tolType is \"float\"   then tol else max*0.001\n        [ min, max, tol ]\n      else\n        allType  = \"#{minType}|#{maxType}\"\n        allType +=\"|#{tolType}\" if type is \"float\"\n        range    = [min,max]\n        range.push(tol) if type is \"float\"\n        @toInfo( \"toRange(arg)\", \"unable to create range for\", type, range, allType, \"[]\", [] )\n\n  inMyRange:( result, range, op=\"range\" ) ->\n    pass       = @isRange(range)\n    resultType = @type(result)\n    rangeType  = @typeExpect(result,op)\n    if not pass or resultType iant rangeType\n      return @toInfo( \"inRange(result,range,op)\", result, resultType, rangeType, \"false\", false )\n\n    inStringRange = ( string, range ) -> range[0]          <= string and string <= range[1]\n    inIntRange    = ( int,    range ) -> range[0]          <= int    and int    <= range[1]\n    inFloatRange  = ( float,  range ) -> range[0]-range[2] <= float  and float  <= range[1]+range[2]\n    switch resultType\n      when \"string\" then inStringRange(   result, range )\n      when \"int\"    then inIntRange(      result, range )\n      when \"float\"  then inFloatRange(    result, range )\n      when \"array\"  then @inArrayRange(   result, range )\n      when \"object\" and @isObject(rangeType) then @inObjectRange(  result, range )\n      when \"enums\"  and @isEnums(rangeType)  then @inEnumsRange(   result, range )\n      else @toInfo( \"inRamge()\", \"unknown range type\", result, resultType, rangeType, \"false\", false )\n\n  inArrayRange:( result, range ) ->\n    pass    = true\n    type    = @type(result)\n    nResult = result.length\n    nRange  = range.length\n    if nRange  is 1\n      for i in [0...nResult] when @isArray(result[i])\n        pass = pass and @inMyRange( result[i], range )\n    else if nResult > nRange\n      text = \"not enough range tests #{nRange} for result so only will be #{nRange} tests on result\"\n      pass = @toInfo( \"inRange()\", text, result, type, type, \"false\", false )\n    else if nResult < nRange\n      text = \"OK with more range bounds #{nRange} than needed for result #{nResult}\"\n      pass = @toInfo( \"inRange()\", result, text, type, type, \"true\", true )\n      min = Math.min( nResult, nRange )\n      for i in [0...min] when @isArray(result[i]) and @isArray(range[i])\n        pass = pass and @inMyRange( result[i], range[i] )\n    pass\n\n  # Return a number with a fixed number of decimal places\n  toFixed:( arg, dec=2 ) ->\n    num = switch @type(arg)\n      when \"int\",\"float\" then arg\n      when \"string\"      then parseFloat(arg)\n    num.toFixed(dec)\n\n  toCap:( str ) ->\n    str.charAt(0).toUpperCase() + str.substring(1)\n\n  unCap:( str ) ->\n    str.charAt(0).toLowerCase() + str.substring(1)\n\n  head:(v,action=false,pop=false) ->\n    arg = null\n    switch @type(v)\n      when \"array\"\n        switch @type(action)\n          when \"boolean\"\n            arg = v[0]\n            v   = v.shift() if action\n      when \"string\"\n        switch @type(action)\n          when \"boolean\"\n            arg = v.charAt(0)\n            v   = v.substring(1) if action\n          when \"string\" and v.startsWith(action)\n            arg = action\n            v   = v.substring(action.length) if pop\n    pop\n\n  tail:(v,action=false) ->\n    pop = null\n    switch @type(v)\n      when \"array\"\n        pop = v[v.length-1]\n        v   = v.pop() if @isType(action,\"boolean\") and action\n      when \"string\"\n        switch @type(action)\n          when \"boolean\"\n            pop = v.charAt(v.length-1)\n            v   = v.substring( 0, v.length-1 ) if action\n          when \"string\" and v.endsWith(action)\n            pop = action\n            v   = v.substring(0,v.length-action.length)\n    pop\n\n  # Unlike the built in Array v.slice(beg,end) where beg is a zero-based index and end\n\n  # Here beg starts at 1 and end includes the last position or is set to beg if ommitted\n  #  an array slice( [\"a\",\"b\",\"c\"], 1, 2 ) returns [\"a\",\"b\"]\n  #  an array slice( [\"a\",\"b\",\"c\"], 2    ) returns [\"b\"]\n  #  a string slice( [\"abc\"],       1, 2 ) returns   \"ab\"\n  #  a string slice( [\"abc\"],       2    ) returns   \"b\"\n  # where with Array.slice() it is open\n  slice:( v, beg, end=null, remove=false ) ->\n    end if @isDef(end) then end else beg\n    pop = null\n    switch @type(v)\n      when \"array\"\n        pop = if remove then v.splice(beg-1,end+1) else v.slice(beg-1,end+1)\n      when \"string\"\n        pop = v.splice(beg-1,end+1)\n        v   = v.substring(0,beg-1) + v.substring(end+1) if remove\n    pop\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = \" \" + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  # A deliberate do nothing consumer of arguments and variables\n  noop:( ...args ) ->\n    if args then false\n    return\n\n  # An improved typeof() that follows the convention by returning types in lower case by default.\n  # The basic types similar to typeof() returned are:\n  type:(arg,lowerCase=true) ->\n    str = Object::toString.call(arg)\n    tok = str.split(\" \")[1]\n    typ = tok.substring(0,tok.length-1)\n    typ = if typ is \"Number\"\n      if Number.isInteger(arg) then \"Int\" else \"Float\"\n    if lowerCase then typ.toLowerCase() else typ\n\n  # Adds 'range' 'enums' and 'schema' based on 'op' to @type(arg)\n  typeExpect:( expect, op ) ->\n    switch op\n      when 'range'  and @isRange(expect)  then \"range\"\n      when 'enums'  and @isEnums(expect)  then \"enums\"\n      when 'schema' and @isSchema(expect) then \"schema\"\n      else @type(expect)\n\n  # A more detail type that returns basic types, class, object and function name in upper case\n  klass:(arg) ->\n    typ = @type(arg,false) # Start with basic type to catch \"Null\" and \"Undefined\"\n    switch typ\n      when \"Null\"      then \"Null\"\n      when \"Undefined\" then \"Undefined\"\n      when \"Function\"  then arg.name\n      when \"Object\"    then arg.constructor.name\n      else                  typ\n\n  # mdnType from\n  mdnType:( obj, showFullClass ) ->\n\n    # get toPrototypeString() of obj (handles all types)\n    if showFullClass and typeof(obj) is \"object\" \n      return Object.prototype.toString.call(obj)\n\n    if obj is null then return (obj + '').toLowerCase()  # implicit toString() conversion\n\n    deepType = Object.prototype.toString.call(obj).slice(8,-1).toLowerCase()\n    if deepType is \"generatorfunction\" then return \"function\"\n\n    # Prevent overspecificity (for example, [object HTMLDivElement], etc).\n    # Account for functionish Regexp (Android <=2.3), functionish <object> element (Chrome <=57, Firefox <=52), etc.\n    # String.prototype.match is universally supported.\n\n    if deepType.match(/^(array|bigint|date|error|function|generator|regexp|symbol)$/)\n       deepType\n    else\n      if (typeof(obj) is 'object' or typeof(obj) is 'function') then 'object' else typeof(obj)\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( failed, passed ) ->\n    localStorage.setItem( \"TestsFailed\", JSON.stringify( failed ) )\n    localStorage.setItem( \"TestsPassed\", JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n    return if not @debug\n    if reviewFailed\n      failLocals = localStorage.getItem( \"TestsFailed\" )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        for failStatus in failStatuses\n          console.log( failStatus ) if @logToConsole\n    if reviewPassed\n      passLocals = localStorage.getItem( \"TestsPassed\" )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        for passStatus in passStatuses\n          console.log( passStatus ) if @logToConsole\n    return\n\nTester.remove( e, a ) ->\n  index = a.indexOf(e)\n  a.splice( index, 1 ) if index > -1\n  a\n\nTester.results = [\"string\",\"int\",\"float\",\"boolean\",\"object\",\"array\"]\nTester.expects = Tester.results.concat([\"schema\",\"range\",\"enums\",\"amy\"])\nTester.typeofs = [\"string\",\"number\",\"boolean\",\"object\",\"function\",\"bigint\",\"symbol\",\"null\",\"undefined\"]\nTester.types   = Tester.typeofs.concat([\"int\",\"float\",\"array\",\"regex\",\"date\"])\nTester.types   = Tester.remove(\"number\", Tester.types ) # number is now either 'int' or 'float'\nTester.opers   = [\"eq\",\"schema\",\"range\",\"enums\",\"le\",\"lt\",\"ge\",\"gt\",\"ne\"]   # 'eq' default\n\n# Cardinality  1 = required ? = optional * = 0 to many + = 1 to many min:max is a range\nTester.cards = [\"n\",\"?\",\"*\",\"+\",\"min to max\"]    # 'n' = 1 defaullt\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\n\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nfits = tester.fits\nexport { test, unit, fits }\n\n###\n        when op is \"schema\"\n        if eType is \"any\"\n          \"\"\n        else if etype includes(\"|\")\n          eTypes = eType.split(\"|\")\n          if @inArray(rType,eTypes)\n            \"\"\n          else\n            \" Result type is '#{rType}' that is not in\\nExpect schema types '#{eType}'\"\n        else if rType isnt eType\n          \" Result type is '#{rType}'\\nExpect type is '#{eType}' from schema\"\n###"
  ]
}
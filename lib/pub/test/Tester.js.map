{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    @stream = null # Optional streaming publisher module that is set by @injectStream( stream )\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned which allows tests to remain in code\n    @logToConsole   = true\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its argidating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @stringSubject  = \"TestString\"  # Subject for publishing each test status string\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @describe( description, suite )\n    @description = \"\"\n    @suite       = \"\"\n\n    # Accummulate test status state\n    @textText     = \"\" # set by test() that is passed inside eq() and sent to run()\n    @infoText     = \"\"\n    @codeText     = \"\"\n    @statusText   = \"\"\n    @statusClear  = true\n    @blockText    = \"\"\n    @blockClear   = true\n\n    # Accumulated status objects\n    @modules      = {}\n    @passed       = []\n    @failed       = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream       = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @stringSubject  = if options.stringSubject?  then options.stringSubject  else \"TestString\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test -- Pass a closeure in the form of  (t) -> { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) -> { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test(\"2 + 3 = 5\", (t) ->\n  #     t.eq( add(2,3), 5 ) )\n  test:( text, closure ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text     = text               # @text is latter referenced inside eq()\n    @code     = closure.toString() # @code is latter referenced inside eq()\n    closure(@)\n    @  # returns tester instance for chaining\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  unit:( text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    @run( result, expect, \"eq\" ) # returns tester instance for chaining\n\n  # Validate and diagnose a result that fits a schema both of type 'object' or 'array'\n  #  Very usefull for a result originating from a'.json' file and parsed by JSON.parse(...)\n  #  Very usefull for a schema originating from a'.json' file and parsed by JSON.parse(...)\n  fits:( text, result, schema ) =>\n    return @ if arguments.length is 0 or not @testing\n    @text   = text\n    @code   = \"\"\n    # if @debug\n    #  console.log( \"Tester.fits(result,schema)\", { type:@type(result), result:result, schema:schema, status:status } )\n    @run( result, schema, \"schema\" )  # returns tester for chaining  is expect = @toSchema( expect, op ) needed?\n\n  eq:( result, expect ) =>\n    @run( result, expect, \"eq\" )\n\n  run:( text, result, expect, op ) ->\n    return @ not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect, op:op } ) if  @debug\n    status = @initStatus( result, expect, op )\n    status = @assert(     result, expect, op, status )\n    @report(              result, expect, op, status )\n    @    # returns tester instance for chaining\n\n  describe:( description, suite=null ) ->\n    @description = description\n    @suite       = if suite? then suite else null\n    @\n\n  initStatus:( result, expect, op ) ->\n    module = text.split(\".\")[0]\n    eType  = if op is \"schema\" then \"schema\" else @type(expect)\n    {\n      assert:{ text:@text, pass:true, module:module, op:op, code:@code, info:\"\" }\n      result:{ text:\"\", type:@type(result), argue:result }\n      expect:{ text:\"\", type:eType,         argue:expect }\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(arg) so asserions are only test when types match\n  #   Skips over @type(arg) = \"function\"\n  assert:( result, expect, status, op, level=0, key=null, index=null ) ->\n\n    # Covert expect to a schema object if op is schema\n    expect = @toSchema(expect,op)\n\n    # Check argues and types\n    status = @checkValuesTypes( result, expect, status, op, key, index )\n\n    # Perform all comparisions\n    if status.assert.pass\n       status = switch @type(result)\n         when \"string\",\"number\",\"boolean\" then @arguesEq(   result, expect, status, op )\n         when \"object\"                    then @objectsEq(  result, expect, status, op, level )\n         when \"array\"                     then @arraysEq(   result, expect, status, op, level )\n         else                                  @unknownsEq( result, expect, status )  # just a fallback\n       @examine( status.assert.pass, result, expect, status, op, \"\", key, index )\n\n    # Store status in @passed and @failed arrays\n    if level is 0\n       @passed.push(status) if     status.assert.pass\n       @failed.push(status) if not status.assert.pass\n    status\n\n  # Generates informative text in status\n  examine:( pass, result, expect, status, op, info, key, index ) ->\n    expect = if op is \"schema\" and not @isSchema(expect) then @toSchema(expect,op) else expect\n    argue  = if op is \"schema\" then expect.argue else expect\n    eType  = if op is \"schema\" then expect.type  else @type(expect)\n    prefix = if pass then \"-- Passed -- \" else \"-- Failed -- \"\n    status.assert.text   = prefix + status.assert.text\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.assert.info  += info\n    status.assert.code   = if @isString(@code) then @code else \"\"\n    status.result.text  += @textValue( \"Result\", @type(result), result, key, index )\n    status.expect.text  += @textValue( \"Expect\", eType,         argue,  key, index )\n    status\n\n  # Convert expect to a schema object if op is schema\n  isSchema:( v ) ->\n    v.op? and v.type? and v.argue? and v.range? and v.op? and v.size?\n\n  # Format \"type:ranges or argue:length:oper?\"\n  # Examples:\n  #   \"array:[[0,360],[0,100],[0,100]]:eq?\"\n  #   { type:\"array\", ranges:[[0,360],[0,100],[0,100]], oper:\"eq\", opt=\"?\" }\n  #   \"array:[0,255]\" } # Range is applies to all array argues\n  #   { type:\"array\", ranges:[0,255]\n  #   \"object:{r:[0,255],g:[0,255],b:[0,255]}\n  #   \"string:James\"\n  #   \"number:[0,100]\"\n  #   \"boolean\"\n  toSchema:( expect,   op ) ->\n    return   expect if op isnt \"schema\"\n    schema = { type:\"any\", ranges:[\"any\"], argue:\"any\", length:\"any\", oper:\"eq\", opt:\"1\" }\n    switch @type(expect)\n      when \"string\"\n        schema = @parseSchema( expect, schema )\n\n      when \"object\"\n        schema.opt    = if expect.opt is \"?\"        then expect.opt    else  \"1\" # \"1\" implies key required\n        schema.type   = if @isString(expect.type)      then expect.type   else  \"any\"\n        schema.argue  = if expect.argue?            then expect.argue  else  \"any\"\n        schema.ranges = if @isArray(expect.ranges ) then expect.ranges else [\"any\"]\n        schema.length = if @isNumber(  expect.length ) then expect.length else  \"any\"\n        schema.oper   = if @isString(  expect.oper   ) then expect.oper   else  \"eq\"\n    schema\n\n  # parseSchemaStr\n  parseSchema:( expect, schema ) ->\n    schema.opt  = if @tail(expect,\"?\",true) is \"?\" then \"?\" else \"1\" # @tail() pops the '?'\n    splits      = expect.split(\":\")\n    length      = splits.length\n    schema.type = if length >= 1 then splits[0]\n    if length >= 1\n      if splits[1][0] is \"[\"\n        schema.ranges = @toRanges( splits[1] )\n        schema.argue  = \"any\"\n      else if splits[1].includes(\"|\")\n        schema.ranges = @toEnums( splits[1] )\n        schema.argue  = \"any\"\n      else\n        schema.ranges = \"any\"\n        schema.argue  = @toType( splits[1], schema.type )\n      schema.length    = if length >= 2 then @toInt( splits[2] ) else \"any\"\n      schema.oper      = if length >= 3 then @toString( splits[3] ) else \"eq\"\n      schema\n\n  # Range parser for @toSchema(expect,op)\n  toRanges:( splits ) ->\n    ranges = []\n    for split in splits\n      switch @type(split)\n        when \"string\"\n          for split in splits\n            if @head(split,\"[[\",false) is \"[[\" and @tail(split,\"]]\",false) is \"]]\"\n              strs = @toArray(split)\n              for str in strs\n                ranges.push[@toArray(str)]\n              return ranges\n            else if @head(split) is \"[\" and @tail(split) is \"]\"\n              ranges.push[@toArray(split)]\n              return ranges\n        when \"array\"\n          if @isArray(split[0])\n            for array in split\n              ranges.push(array)\n            return ranges\n          else\n            ranges.push[split]\n            return ranges\n    ranges\n\n  checkValuesTypes:( result, expect, status, op, key, index ) ->\n    rType =                          @type(result)\n    eType = if op isnt \"schema\" then @type(expect) else expect.type\n    types = [\"string\",\"number\",\"boolean\",\"object\",\"array\"]\n    info  = switch\n      when @isNot(result)\n        \" Result of #{rType} is not defined\\nExpect is type '#{eType}'\"\n      when @isNot(expect)\n        \" Expect of #{eType} is not defined\\nResult is type '#{rType}'\"\n      when op is \"schema\"\n        if eType is \"any\"\n          \"\"\n        else if etype includes(\"|\")\n          eTypes = eType.split(\"|\")\n          if @inArray(rType,eTypes)\n            \"\"\n          else\n            \" Result type is '#{rType}' that is not in\\nExpect schema types '#{eType}'\"\n        else if rType isnt eType\n          \" Result type is '#{rType}'\\nExpect type is '#{eType}' from schema\"\n      when rType isnt eType\n        \" Types do not match\\nResult type is '#{rType}'\\nExpect type is '#{eType}'\"\n      when rType is \"function\"\n        \" Result type is 'function'\\nExpect type is '#{eType}'\"\n      when eType is \"function\"\n        \" Expect type is 'function'\\nResult type is '#{rType}'\"\n      when not @inArray(rType,types)\n        \" Result is type '#{rType}' an unknown type is type '#{eType}'\"\n      when not @inArray(eType,types)\n        \" Result is type '#{rType}'\\nExpect is type '#{eType}' an unknown type\"\n      else\n        \"\"\n    if @isString(info)\n      @examine( false, result, expect, status, op, info, key, index )\n    else\n      status\n\n  # Equality check for \"string\",\"number\",\"boolean\" types\n  arguesEq:( result, expect, status, op ) ->\n\n    argue = expect\n    if op is \"schema\"\n      argue  = expect.argue\n      ranges = expect.ranges\n      oper   = switch\n        when ranges is \"any\" then \"eq\"\n        when @isArray(ranges)\n          if @isArray(ranges[0]) then \"ranges\" else \"range\"\n\n    status.assert.pass = switch oper\n      when argue is \"any\" then true\n      when op is \"range\" then @inRange( result, ranges )\n      when op is \"ranges\" and @isArray( result )\n        pass   = true\n        length = Math.min( result.length, ranges.length )\n        for i in [0...length]\n          if @isArray(result[i]) and @isArray(ranges[i])\n            pass = pass and @inRange( result[i], ranges[i] )\n        pass\n      when \"eq\" then result is   argue\n      when \"le\" then result <=   argue\n      when \"lt\" then result <    argue\n      when \"ge\" then result >=   argue\n      when \"lt\" then result >    argue\n      when \"ne\" then result isnt argue\n      else           false\n    status\n\n\n\n  # Just a fallback when types are not fully screened\n  unknownsEq:( result, expect, status ) ->\n    status.assert.pass  = false\n    status.assert.info += \"unknown types for comparision\"\n    status\n\n  textValue:( name, argue, key, index ) ->\n    ref   = \" \"\n    ref   \" at key:#{key} \"      if @isString(key)\n    ref = \" at index: #{index} \" if @isNumber(index)\n    \"#{name}#{ref}where type is #{@type(argue)} and argue is #{@toString(argue)}\"\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, status, op, level ) ->\n\n    # Check that the expect object has all the keys that the result object has\n    for own key, arg of result when  expect[key]?\n      status = @examine( false, arg, expect[key], status, op, \"missing expect\", key, null )\n\n    # Check that the result object has all the keys that the expect object has\n    for own key, arg of expect when ( result[key]? or ( op is \"schema\" and arg.opt is \"1\" ) )\n      status = @examine( false, result[key], arg, status, op, \"missing result\", key, null )\n\n    # Assert each argue for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], arg, status, op, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, status, op, level ) ->\n    argue = expect\n\n    # Check against the schema when present\n    if op is \"schema\"\n      argue = expect.argue\n      if argue is \"any\"\n         status.assert.pass = true\n         return status\n      else if argue.size isnt \"any\" and result.length > argue.size\n         info   = \" Result length exceeds the maximum size #{argue.size}\"\n         info  += \" Result length is #{result.length}\"\n         info  += \" Size is #{argue.size}\"\n         return @examine( false, result, expect, status, op, info, null, null )\n      else if not @isArray(argue)\n         return status\n\n    # Examine the array lengths\n    if result.length isnt argue.length\n      info   = \" different array lengths\"\n      info  += \" Result length is #{result.length}\"\n      info  += \" Expect length is #{argue.length}\"\n      status = @examine( false, result, expect, status, op, info, null, null )\n\n    # Assert each argue within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], status, op, ++level, null, i )\n\n    status\n\n  report:( status, result, expect ) ->\n    eq = if status.assert.pass then \"is\" else \"not\"\n    @blockText   = \"\" if @blockClear\n    @statusText  = \"\"\"\\n#{status.assert.text} \"\"\"\n    @statusText += \"\"\"#{eq} #{@toString(expect)}\"\"\" if status.result.type isnt \"function\"\n    @statusText += status.assert.info if @isString(status.assert.info)\n    @statusText += \"\"\"\\n   #{@textResult( status, result )}\"\"\" if @verbose or not status.assert.pass\n    @statusText += \"\"\"\\n   #{@textExpect( status, expect )}\"\"\" if @verbose or not status.assert.pass\n    #statusText += \"\\n\"+@code              if @isString(@code) and ( @verbose or not status.assert.pass )\n    @blockText  += @statusText if not @statusClear\n    @statusClear = false\n    @blockClear  = false\n\n    if @isDef(@stream)\n      @stream.publish( @statusSubject, status )\n      @stream.publish( @stringSubject, status )\n    return\n\n  status:() ->\n    @statusClear = true\n    @statusText\n\n  block:() ->\n    @blockClear = true\n    @blockText\n\n  runUnitTests:( paths ) ->\n    for path in paths\n      modulePath = @path( path )\n      console.log( \"\\n-- Started Unit Testing for: #{modulePath.name} in #{modulePath.path}\" ) if @logToConsole\n      await `import( path /* @vite-ignore */ )`\n    @summary()\n    return\n\n  path:( path ) ->\n    dirs   = path.split(\"/\")\n    module = @tail(dirs).split(\"-\")[0]\n    @modules[module] = { name:module, path:path }\n    console.log( \"Tester.path(path)\", { path:path, dirs:dirs, module:module } ) if @debug\n    @modules[module]\n\n  summary:( module=null ) ->\n    path = if module? and @modules[module]? then @modules[module].path else \"?\"\n    if @debug\n      console.log( \"Tester.summary(module)\", { module:module, modules:@modules, key:@modules[module], path:path } )\n    summaryText = \"\"\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      summaryText += \"\"\"\\n\\n-- Summary - for #{module} in #{path}\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    else\n      fullCount = @passed.length + @failed.length\n      summaryText += \"\"\"\\n\\n-- Summary - for all tests\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@passed.length,fullCount)} tests passed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(@failed.length,fullCount)} tests failed\"\"\"\n      summaryText += \"\"\"\\n   #{@pad(fullCount,     fullCount)} tests total\"\"\"\n\n    if @isDef(@stream) and @stream.hasSubscribers( @summarySubject )\n      @stream.publish( @summarySubject, summaryText )\n\n    summaryText = @block() + summaryText # Prepend any block statuses\n\n    # Archive since all tests are complete\n    if @archive\n      @archiveLocal(  @failed,      @passed )\n      @reviewsLocal( { failed:false, passed:false } )\n      \n    summaryText\n\n  # The 9 fundamental type Assertions that leverage @type(arg) the improved typeof(arg)\n  # In addition isInt isFloat isBoolean isArray isObject can optionally chech strings\n  isString:(s)          ->   @isType(s,\"string\") and s.length > 0 and s isnt \"None\"\n  isInt:(i,sc=false)     -> ( @isType(i,\"int\")   and not isNaN(i) ) or ( sc and @isStringInt(i)   )\n  isFloat:(f,sc=false)   -> ( @isType(f,\"float\") and not isNaN(f) ) or ( sc and @isStringFloat(f) )\n  isBoolean:(b,sc=false) ->   @isType(b,\"boolean\") or ( sc and @isStringBoolean(b) )\n  isObject:(o,sc=false)  ->   @isType(o,\"object\")  or ( sc and @isStringObject(o) )\n  isRegex:(r)            ->   @isType(r,\"regex\")\n  isFunction:(f)         ->   @isType(f,\"function\")\n  isNull:(m)             ->   @isType(m,\"null\")\n  isUndef:(u)            ->   @isType(u,\"undefined\")\n  isBigInt:(b)           ->   typeof(b) is \"bigint\" # Will incorporate into type\n  isSymbol:(s)           ->   typeof(s) is \"symbol\" # Will incorporate into type\n\n  # Set type for asserting uniformly typed arrays and sc=true for determining if a string is an array\n  isArray:( a, type=null, sc=false ) ->  \n    ( @isType(a,\"array\") and a.length? and a.length > 0 and @isArrayTyped(a,type) ) or ( sc and @isStringArray(a) )  \n\n  # Aggregate and special argue assertions\n  isType:(v,t)      ->   @type(v) is t\n  isDef:(d)         ->   @type(d) isnt ( \"null\" or \"undefined\" )\n  isNumber:(n)      ->   @type(n) is   ( \"int\"  or \"float\"     )\n\n  isNot:(d)         ->   not @isDef(d)\n  isNaN:(n)         ->   Number.isNaN(n) # @isNumber(n) and\n  \n  isArrayTyped:(a,t) ->\n    return true  if     @isNull(t)\n    return false if not @isArray(a)\n    for e in a\n      return false if @type(e) isnt t\n    true\n\n  isArrayMixed:(a) ->\n    return false if not @isArray(a)\n    type = @type(a[0])\n    for e in a\n      return false if @type(e) isnt type\n    false\n\n  # Containment assertions where args are always ( argue, container )\n  inString:(e,s)  ->  @isString(s) and s.includes(e)\n  inArray:( e,a)  ->  @isArray(a)  and a.includes(e)\n  inObject:(k,o)  ->  @isObject(o) and @isDef(o[k]) and o.hasOwnProperty(k)\n  \n  inRange:(i,r)     ->  @isRange(r)     and @isType(i,\"int\")    and r[0]      <= i and i <= r[1]\n  inTolerance:(f,t) ->  @isTolerance(t) and @isType(f,\"float\")  and t[0]-t[2] <= f and f <= t[1]+t[2]\n  inBetween:(s,b)   ->  @isBetween(r)   and @isType(s,\"string\") and b[0]-b[2] <= s and s <= b[1]+b[2]\n\n  toKeys:(o)      ->  if @isObject(o) then Object.keys(o) else []\n  time:()         ->  new Date().getTime()\n\n  # -- More assertions --\n\n  # Checks for offical child key which starts with capital letter and isnt an _ or $\n  isChild: (key) ->\n    a = key.charAt(0)\n    b = key.charAt(key.length - 1)\n    a is a.toUpperCase() and a isnt \"$\" and b isnt \"_\"\n\n  # Check if an object or array or string is empty\n  isEmpty:(e) ->\n    return false if @isNot(e)\n    switch @isType(e)\n      when \"object\" then Object.getOwnPropertyNames(e).length is 0\n      when \"array\"  then e.length is 0\n      when \"string\" then e.length is 0\n      else               false  # Look into\n\n  isStringFloat:( str ) ->\n    if @isString( str )\n       regex = /^-?\\d+(?:[.,]\\d*?)?$/\n       regex.test(str)\n    else false\n\n  isStringInt:( str ) ->\n    if @isString( str )\n       regex = /^-?\\d+$/\n       regex.test(str)\n    else false\n\n  isStringBoolean:( str ) ->\n    @isString(str) and ( str is \"true\" or str \"false\" )\n\n  isStringArray:( str ) ->\n    @isStringEnclosed( \"[\", str, \"]\" )\n\n  isStringObject:( str ) ->\n    @isStringEnclosed( \"{\", str, \"}\" )\n\n  # Tests if string is enclosed good for [array] and {object}\n  isStringEnclosed:( beg, str, end ) ->\n    if @isString( str )\n      s = str.trim()\n      s.startsWith(beg) and s.endsWith(end)\n    else false\n\n  # Converters\n  toType:( arg, type ) ->\n    switch type\n      when \"string\"  then @toString(  arg )\n      when \"int\"     then @toInt(     arg )\n      when \"float\"   then @toFloat(   arg )\n      when \"boolean\" then @toBoolean( arg )\n      when \"array\"   then @toArray(   arg )\n      when \"object\"  then @toObject(  arg )\n      else\n        console.error( \"Tester.toType(type,arg) unknown type\", { type:type, arg:arg } )\n        null\n\n  # enclose a 'string'\n  # enclose(\"abc\",   '\"'  )       # returns \"abc\" - good for JSON keys and values\n  # enclose(\"123\",   \"'\"  )       # returns '123'\n  # enclose(\"xyz\",   \"()\" )       # returns (xyz)\n  # enclose(\"d,e,f\", \"[]\" )       # returns [d,e,f]\n  # enclose(\"a:x,b:y,c:z\", \"[]\" ) # returns {a:x,b:y,c:z}\n  enclose:( str, enc=\"\" ) ->\n    if enc.length is 2 then \"#{enc.charAt(0)}#{str}#{enc.charAt(1)}\"\n    if enc.length is 1 then \"#{enc.charAt(0)}#{str}#{enc.charAt(0)}\"\n    else str\n\n  toString:( arg, enc=\"\" ) ->\n    str  = \"\"\n    type = @type(arg)\n    switch type\n      when \"string\"   then arg\n      when \"int\"      then parseInt(arg)\n      when \"float\"    then parseFloat(arg)\n      when \"boolean\"  then if arg then \"true\" else \"false\"\n      when \"object\" # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"{ \"\n        for own key, val of arg\n          str += key+\":\"+@enclose(@toString(val),'\"')+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma and space\n        str += \" }\"\n      when \"array\"  # This combination of travesal and recursion is cleaner than JSON.stringify()\n        str += \"[ \"\n        for arg in arg\n          str += @toString(arg)+\", \"\n        str = str.substring( 0, str.length-2 ) # remove trailing comma  and space\n        str += \" ]\"\n      when \"function\"   then @toInfo( \"toString(arg)\", arg, \"function\", \"string\", \"?function?\" )\n      when \"null\"       then \"null\"\n      when \"undefined\"  then \"undefined\"\n      when \"bigint\"     then arg.toString()\n      when \"symbol\"     then arg.toString()\n      else  @toInfo( \"toString(arg)\", arg, type, \"string\", arg.toString() ) # return of arg.toString() is a hail mary\n    if type isnt ( \"object\" or \"array\" ) and enc.length > 0 then @enclose(str,enc) else str\n\n  toFloat:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"float\" then arg\n      when \"int\"   then parseFloat(arg.toFixed(1)) # Coerces an 'int' like '1' to a 'float' like '1.0'\n      when \"string\"\n        if @isStringFloat(arg)  then parseFloat(arg)\n        else @toInfo( \"toFloat(arg)\", arg, \"string\", \"float\", NaN )\n      else   @toInfo( \"toFloat(arg)\", arg,   type,   \"float\", NaN )\n\n  toInt:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"int\"    then arg\n      when \"float\"  then Math.round(arg)\n      when \"string\"\n        if @isStringInt(arg)  then parseInt(arg)\n        else @toInfo( \"toInt(arg)\", arg, \"string\", \"int\", NaN )\n      else   @toInfo( \"toInt(arg)\", arg,   type,   \"int\", NaN )\n\n  toInfo:( method, arg, type, typeTo, retn ) ->\n    @infoText += \"\\n  Tester.#{method} unable to convert #{@toString(arg)} of '#{type}' to'#{typeTo}' returning '#{@toString(retn)}'\"\n    retn\n\n  toBoolean:( arg ) ->\n    type = @type(arg)\n    switch type\n      when \"boolean\" then arg\n      when \"string\"\n        switch arg \n          when \"true\"  then  true\n          when \"false\" then false\n          else @toInfo( \"toBoolean(arg)\", arg, type, \"boolean\", false )\n      when \"int\"   then arg isnt 0   # check 0   false may not be a convention\n      when \"float\" then arg isnt 0.0 # check 0.0 false may not be a convention\n      else     @toInfo( \"toBoolean(arg)\", arg, type, \"boolean\", false )\n\n  toArray:( arg, type, sep=\",\" ) ->\n    type = @type(arg)\n    switch  type\n      when \"array\" then arg\n      when \"string\"\n        str = arg.trim()\n        if @head(arg) is \"[\" and @tail(arg) is \"]\" # Strip off brackets\n          arg = @slice(arg,2,arg.length-1)\n        array = []\n        strs  = @slice(arg,2,arg.length-1).split(sep)\n        for str in strs\n          array.push( @toType( str, type ) )\n        array\n      else @toInfo( \"toArray(arg)\", arg, type, \"array\", [] )\n\n  toObject:( arg ) ->\n    obj  = {}\n    type = @type(arg)\n    switch type\n      when \"object\" then obj = arg\n      when \"array\"  then obj[i] = arg[i] for i in [0...arg.length]\n      when \"number\",\"boolean\",\"function\"\n        obj[type] = arg\n      when \"string\"\n        obj = arg.split(\",\")\n                 .map( (keyVal) => keyVal.split(\":\").map( (arg) => arg.trim() ) )\n                 .reduce( (acc,cur) => acc[cur[0]] = cur[1]; acc {} )  # acc accumulator cur current\n      else @toInfo( \"toObject(arg)\", arg, type, \"object\", {} )\n\n  # -- Assertion for range with type='int', tolerane with type='float' and 'between' with type='string'\n  isRange:(r)       ->   @isArray(r,\"int\")    and r.length is 2 and r[0]      <= r[1]       # For 'int'\n  isTolerance:(w)   ->   @isArray(r,\"float\")  and w.length is 3 and w[0]-w[2] <= w[1]+w[2]  # For 'float' w[2] is tol\n  isBetween:(b)     ->   @isArray(r,\"string\") and r.length is 2 and r[0]      <= r[1]       # For 'string'\n\n  toRange:(arg) ->\n    type = @type(arg)\n    if      @isRange(arg)    then arg\n    else if type is \"int\"    then [0,arg]\n    else if type is \"float\"  then [0,@toInt(arg)]\n    else if @isArray(arg,'int') and arg.length is 1 then [0,arg[0]]  # zero is  the default minimum\n    else @toInfo( \"toRange(arg)\", arg, type, \"range\", [] )\n\n  # Return a number with a fixed number of decimal places\n  toFixed:( arg, dec=2 ) ->\n    num = switch @type(arg)\n      when \"int\",\"float\" then arg\n      when \"string\"      then parseFloat(arg)\n    num.toFixed(dec)\n\n  toCap:( str ) ->\n    str.charAt(0).toUpperCase() + str.substring(1)\n\n  unCap:( str ) ->\n    str.charAt(0).toLowerCase() + str.substring(1)\n\n  head:(v,action=false,pop=false) ->\n    arg = null\n    switch @type(v)\n      when \"array\"\n        switch @type(action)\n          when \"boolean\"\n            arg = v[0]\n            v   = v.shift() if action\n      when \"string\"\n        switch @type(action)\n          when \"boolean\"\n            arg = v.charAt(0)\n            v   = v.substring(1) if action\n          when \"string\" and v.startsWith(action)\n            arg = action\n            v   = v.substring(action.length) if pop\n    pop\n\n  tail:(v,action=false) ->\n    pop = null\n    switch @type(v)\n      when \"array\"\n        pop = v[v.length-1]\n        v   = v.pop() if @isType(action,\"boolean\") and action\n      when \"string\"\n        switch @type(action)\n          when \"boolean\"\n            pop = v.charAt(v.length-1)\n            v   = v.substring( 0, v.length-1 ) if action\n          when \"string\" and v.endsWith(action)\n            pop = action\n            v   = v.substring(0,v.length-action.length)\n    pop\n\n  # Unlike the built in Array v.slice(beg,end) where beg is a zero-based index and end\n\n  # Here beg starts at 1 and end includes the last position or is set to beg if ommitted\n  #  an array slice( [\"a\",\"b\",\"c\"], 1, 2 ) returns [\"a\",\"b\"]\n  #  an array slice( [\"a\",\"b\",\"c\"], 2    ) returns [\"b\"]\n  #  a string slice( [\"abc\"],       1, 2 ) returns   \"ab\"\n  #  a string slice( [\"abc\"],       2    ) returns   \"b\"\n  # where with Array.slice() it is open\n  slice:( v, beg, end=null, remove=false ) ->\n    end if @isDef(end) then end else beg\n    pop = null\n    switch @type(v)\n      when \"array\"\n        pop = if remove then v.splice(beg-1,end+1) else v.slice(beg-1,end+1)\n      when \"string\"\n        pop = v.splice(beg-1,end+1)\n        v   = v.substring(0,beg-1) + v.substring(end+1) if remove\n    pop\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = \" \" + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  # An improved typeof() that follows the convention by returning types in lower case by default.\n  # The basic types similar to typeof() returned are:\n  Tester.types   = [\"string\",\"int\",\"float\",\"boolean\",\"array\",\"object\",\"regex\",\"date\",\"function\",\"bigint\",\"symbol\",\"null\",\"undefined\"]\n  Tester.typeofs = [\"string\",  \"number\",   \"boolean\",        \"object\",               \"function\",\"bigint\",\"symbol\",\"null\",\"undefined\"]\n  type:(arg,lowerCase=true) ->\n    str = Object::toString.call(arg)\n    tok = str.split(\" \")[1]\n    typ = tok.substring(0,tok.length-1)\n    typ = if typ is \"Number\"\n      if Number.isInteger(arg) then \"Int\" else \"Float\"\n    if lowerCase then typ.toLowerCase() else typ\n\n  scheme:( arg,op=\"eq\" ) ->\n    if op is \"schema\" then \"schema\" else @type(arg)\n\n  # A more detail type that returns basic types, class, object and function name in upper case\n  klass:(arg) ->\n    typ = @type(arg,false) # Start with basic type to catch \"Null\" and \"Undefined\"\n    switch typ\n      when \"Null\"      then \"Null\"\n      when \"Undefined\" then \"Undefined\"\n      when \"Function\"  then arg.name\n      when \"Object\"    then arg.constructor.name\n      else                  typ\n\n  # mdnType from\n  mdnType:( obj, showFullClass ) ->\n\n    # get toPrototypeString() of obj (handles all types)\n    if showFullClass and typeof(obj) is \"object\" \n      return Object.prototype.toString.call(obj)\n\n    if obj is null then return (obj + '').toLowerCase()  # implicit toString() conversion\n\n    deepType = Object.prototype.toString.call(obj).slice(8,-1).toLowerCase()\n    if deepType is \"generatorfunction\" then return \"function\"\n\n    # Prevent overspecificity (for example, [object HTMLDivElement], etc).\n    # Account for functionish Regexp (Android <=2.3), functionish <object> element (Chrome <=57, Firefox <=52), etc.\n    # String.prototype.match is universally supported.\n\n    if deepType.match(/^(array|bigint|date|error|function|generator|regexp|symbol)$/)\n       deepType\n    else\n      if (typeof(obj) is 'object' or typeof(obj) is 'function') then 'object' else typeof(obj)\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( failed, passed ) ->\n    localStorage.setItem( \"TestsFailed\", JSON.stringify( failed ) )\n    localStorage.setItem( \"TestsPassed\", JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n    return if not @debug\n    if reviewFailed\n      failLocals = localStorage.getItem( \"TestsFailed\" )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        for failStatus in failStatuses\n          console.log( failStatus ) if @logToConsole\n    if reviewPassed\n      passLocals = localStorage.getItem( \"TestsPassed\" )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        for passStatus in passStatuses\n          console.log( passStatus ) if @logToConsole\n    return\n\n\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\n\nexport tester = new Tester()\ntest = tester.test\nunit = tester.unit\nfits = tester.fits\nexport { test, unit, fits }\n\n###\n    isOrdered:(o)     -> ( @isNumber(o) and not isNaN(i) ) or @isString(o)\n    # if range.length = 3 min=range[0], max=range[1] and tol=range[2]\n  # if range.length = 2 min=range[0], max=range[1] and tol=0\n  # if range.length = 1 min=0,        max=range[0] and  tol=0\n  inRange:( result, range ) ->\n    pass  = true\n    rType = @type(result)\n    if @inArray(rType,[\"string\",\"number\"])\n      len = range.length\n      min = 0\n      max = range[0]\n      tol = 0\n      if len >= 2\n        min = range[0]\n        max = range[1]\n        tol = range[2] if len is 3\n      pass = pass and ( min-tol <= result and result <= max+tol )\n    else if rType is \"array\" and @inArray(@type(result[0]),[\"string\",\"number\"])\n      for arg in result\n        pass = pass and @inRange( arg, range )\n    pass\n###"
  ]
}
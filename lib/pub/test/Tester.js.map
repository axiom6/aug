{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Tester\n\n  constructor:() ->\n\n    # Key settings that are reconfigured through setOptions( options )\n    @testing        = true\n    @logToConsole   = true\n    @archive        = true\n    @verbose        = false\n    @debug          = false\n    @inViteJS       = @isDef(`import.meta.env`)\n\n    @module       = \"\"\n    @suite        = \"\"\n    @text         = null # set by test() that is passed inside eq() and sent to run()\n    @passed       = []\n    @failed       = []\n    @nav          = null\n    @stream       = null\n    @mix          = null\n    @batch        = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @logToConsole   = if options.logToConsole?   then options.logToConsole   else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    return\n\n  injectStream:( stream ) ->\n    return\n    @stream  = stream\n    return\n\n  injectNav:(  nav ) ->\n    return\n    @nav     = nav\n    @stream  = nav.stream\n    @mix     = nav.mix\n    @batch   = nav.batch\n    return\n\n  # -- unit -- For invoking the result argument immediately in a module-unit.js file\n  #\n  # Imports: import { unit } from \"../test/Tester.js\"\n  #          import Vis      from \"../draw/Vis.js\"\n  # Specify: unit( text, result, expect )\n  # Example: unit( \"can convert hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n\n  unit:(  text, result, expect ) =>   # unit(...) is always @testing\n    return @ if arguments.length == 0 # or not @testing -\n    @run( text, result, expect )      # unit() is actually a synonym for run()\n\n  unitLine:(  text, result, expect, error = new Error() ) =>   # unit(...) is always @testing\n    return @ if arguments.length == 0 # or not @testing -\n    @line( error )\n    @run( text, result, expect )      # unit() is actually a synonym for run()\n\n  # -- test -- Pass a closeure in the form of  (t) => { code... }\n  # Modeled like the Ava JavaScipt test framework\n  # Imports: import { test }     from \"../test/Tester.js\"\n  # Specify: test( text, (t) => { code... }\n  # Example:\n  #   const add = ( a, b ) ->\n  #     a + b\n  #   test('2 + 3 = 5', (t) ->\n  #     t.eq( add(2,3), 5 ) )\n\n  test:( text, closure ) =>\n    return @ if arguments.length == 0 or not @testing\n    @text  = text     # @text is latter referenced inside eq()\n    @func( closure )\n    @\n\n  func:( closure ) =>\n    str    = closure.toString()\n    tokens = str.split(\"return t.\")\n    eqCall = if tokens[1]? then tokens[1].substring( 0, tokens[1].length-3 ) else \"?\"\n    console.log( eqCall, closure, str, tokens[1] )\n\n  eq:( result, expect ) =>\n    console.log( \"Tester.eq()\", { text:@text, result:result, expect:expect } ) if @debug\n    @run( @text, result, expect )  # @text is set by test()\n\n  run:( text, result, expect ) =>\n    return @ if arguments.length == 0 or not @testing\n    console.log( \"Tester.run()\", { text:text, result:result, expect:expect } ) if @debug\n    if @isNot(text) or @isNot(result) or @isNot(expect)\n      console.error( \"Tester.run() undefine arg(s)\", { text:text, result:result, expect:expect } )\n      return @\n    status = @initStatus( result, expect, text   )\n    status = @assert(     result, expect, status )\n    @report( status )\n    @ # Provides access to tester instance for chaining\n\n  describe:(  module, suite=null ) =>\n    @module = module\n    @suite  = if suite? then suite else null\n    @\n\n  summary:( module=null ) =>\n    if module?\n      passCount = 0\n      failCount = 0\n      ++passCount for pass in @passed when pass.assert.module is module\n      ++failCount for fail in @failed when fail.assert.module is module\n      fullCount = passCount + failCount\n      console.log( '-- Summary - for', module )\n      console.log( '   ', @pad(passCount,fullCount) + ' tests passed' )\n      console.log( '   ', @pad(failCount,fullCount) + ' tests failed' )\n      console.log( '   ', @pad(fullCount,fullCount) + ' tests total'  )\n    else\n      fullCount = @passed.length + @failed.length\n      console.log( '-- Summary - for all tests' )\n      console.log( '   ', @pad(@passed.length,fullCount) + ' tests passed' )\n      console.log( '   ', @pad(@failed.length,fullCount) + ' tests failed' )\n      console.log( '   ', @pad(fullCount,     fullCount) + ' tests total'  )\n      if @archive\n         @archiveLocal(  @failed,     @passed )  # Good place to archive with all tests complete\n         @reviewsLocal( { failed:true, passed:false } )\n    @\n\n  archiveLocal:( failed, passed ) =>\n    localStorage.setItem( 'TestsFailed', JSON.stringify( failed ) )\n    localStorage.setItem( 'TestsPassed', JSON.stringify( passed ) )\n    return\n\n  reviewsLocal:( reviewFailed, reviewPassed ) ->\n\n    if reviewFailed\n      failLocals = localStorage.getItem( 'TestsFailed' )\n      if failLocals?\n        failStatuses = JSON.parse( failLocals )\n        console.log( failStatus ) for failStatus in failStatuses\n\n    if reviewPassed\n      passLocals = localStorage.getItem( 'TestsPassed' )\n      if passLocals?\n        passStatuses = JSON.parse( passLocals )\n        console.log( passStatus ) for passStatus in passStatuses\n\n    return\n\n  # At present this is vite.js dependent with import.meta.glob() and its dynamic await importer\n  runUnitTestModulesWithViteJS:() =>\n    globPtn = \"/lib/**/*-unit.js\"\n    modules = `import.meta.glob(\"/lib/**/*-unit.js\")` # vite.js dependent with nack tics for non standard import\n    console.log( \"Tester.runUnitTestModulesWithViteJS()\", modules, globPtn ) if @debug\n    count = 0\n    total = Object.keys(modules).length\n    for own path, importer of modules\n      modules[path]().then( (importer) =>\n        console.log( path,   importer ) if @debug\n        await importer\n        count++\n        @summary() if count is total\n        return )\n\n  runUnitTestModulesFromPaths:( paths ) =>\n    console.log( \"Tester.runUnitTestModulesFromPaths()\", paths ) if @debug\n    count = 0\n    total = paths.length\n    for path in paths\n        console.log( \"Tester.runUnitTestModulesFromPaths()\", path ) if @debug\n        await `import( path /* @vite-ignore */ )`\n        count++\n        @summary() if count is total\n    return\n\n  pad:( n, m ) ->\n    len = @numDigits( n )\n    tot = @numDigits( m )\n    str = n.toString()\n    for i in [len...tot]\n      str = ' ' + str\n    str\n\n  numDigits:( n ) ->\n    Math.max( Math.floor( Math.log10( Math.abs(n) ) ), 0 ) + 1\n\n  initStatus:( result, expect, text ) ->\n    resultType  = @type(result)\n    expectType  = @type(expect)\n    resultValue = if resultType isnt 'function' then result else '? function(args...) ?'\n    expectValue = if expectType isnt 'function' then expect else '? function(args...) ?'\n    module      = text.split('.')[0]\n    {\n      assert:{ text:text, pass:true, module:module }\n      result:{ text:\"\", type:resultType, value:resultValue }\n      expect:{ text:\"\", type:expectType, value:expectValue }\n    }\n\n  assert:( result, expect, status, level=0 ) =>\n\n    # Define checks\n    if @isNot(result) or @isNot(expect)\n       status.assert.pass = false\n       status.assert.text = \"-- Failed -- because of null or undefined values fot\" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n       return status\n\n    # Type checks\n    if status.result.type isnt status.expect.type\n       status.assert.pass = false\n       status.assert.text = \"-- Failed -- Result type does match Expect tyoe for \" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n       return status\n\n    # String, Number, Object and Array check\n    # May want to factor in unknowns\n    switch status.result.type\n      when 'string'   then status.assert.pass = result is expect\n      when 'number'   then status.assert.pass = result is expect\n      when 'boolean'  then status.assert.pass = result is expect\n      when 'object'   then status = @objsEq( result, expect, status, level )\n      when 'array'    then status = @arrsEq( result, expect, status, level )\n      when 'function' then status.assert.pass = true   # Indicates a skip over when in a recursion\n      else                 status.assert.pass = false\n\n    # Update status at only level 0\n    if status.assert.pass and level is 0\n       status.assert.text = \"-- Passed -- \" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @passed.push( status )\n    else if level is 0\n       status.assert.text = \"-- Failed -- \" + status.assert.text\n       status.result.text = @textResult( status, result )\n       status.expect.text = @textExpect( status, expect )\n       @failed.push( status )\n    status\n\n  report:( status ) ->\n    @stream.publish( status ) if @isDef(@stream)\n    if @logToConsole\n       eq = if status.assert.pass then ' = ' else ' != '\n       console.log(         status.assert.text + eq, status.expect.value )\n       console.log( \"   \" + status.result.text, status.result.value ) if @verbose or not status.assert.pass\n       console.log( \"   \" + status.expect.text, status.expect.value ) if @verbose or not status.assert.pass\n    return\n\n  objsEq:( result, expect, status, level ) ->\n    for own key, obj of expect\n      if not  result[key]\n        status.assert.pass  = false\n        status.assert.text  = \"-- Failed -- Result key:#{key} is missing for \" + status.assert.text\n        status.expect.text  = \"Expect type is #{@type(result)} with value #{expect}\" # Does no work on objects\n        status.result.text  = \"Result key:#{key} is missing\"\n        return status\n      else\n        status = @assert( result[key], expect[key], status, ++level )\n    status.assert.pass  = true\n    return status\n\n  arrsEq:( result, expect, status, level ) ->\n    if result.length isnt expect.length\n      status.assert.pass = false\n      status.assert.text = \"-- Failed -- Different array lengths fot\" + status.assert.text\n      status.result.text = \"Result length is #{result.length} value is\"\n      status.expect.text = \"Expect length is #{expect.length} value is\"\n      return status\n    for i in [0...expect.length]\n      status = @assert( result[i], expect[i], status, ++level )\n    status.assert.pass  = true\n    return status\n\n  # Need to understand type() more\n  # We many want to consider class types and unknowns\n  type: do () ->\n    classToType = {}\n    for name in \"Boolean Number String Function Object Array Date RegExp Undefined Null\".split(\" \")\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase()\n\n    (obj) ->\n      strType = Object::toString.call(obj)\n      classToType[strType] or \"object\"\n\n  isNul:(d) =>  @type(d) is   'null'\n  isUnd:(d) =>  @type(d) is   'undefined'\n  isDef:(d) =>  @type(d) isnt 'null' and @type(d) isnt 'undefined'\n  isNot:(d) =>  not @isDef(d)\n  isStr:(s) =>  @isDef(s) and @type(s) is \"string\" and s.length > 0 and s isnt 'None'\n  isNum:(n) =>  @isDef(n) and @type(n) is \"number\"\n  isNaN:(n) =>  @isNum(n) and Number.isNaN(n)\n  isObj:(o) =>  @isDef(o) and @type(o) is \"object\"\n  isVal:(v) =>  @type(v) is \"number\" or @type(v) is \"string\" or typeof(v) is \"boolean\"\n  isArr:(a) =>  @isDef(a) and @type(a) is \"array\" and a.length? and a.length > 0\n\n  textResult:( status ) ->\n    \"Result type is #{status.result.type} with value\"\n\n  textExpect:( status ) ->\n    \"Expect type is #{status.expect.type} with value\"\n\n  # Will full implement later\n  log:( msg, args... ) ->\n    return if not @debug\n    console.log( msg, args )\n    return\n\n  line:() ->\n    console.log( 'Tester.line()', @error )\n    return\n\nexport tester = new Tester()\ntest    = tester.test\nunit    = tester.unit\nlog     = tester.log\n\nexport { test, unit, log }\n\n\n###\n\n  # -- bdd -- Behavion Driven Design like Jasmine --\n  # Imports: import { bdd }     from \"../test/Tester.js\"\n  #          import Calculator  from \"../calculator/Calculator.js\"\n  #          const  calculator = new Calculator()\n  # Specify: bdd( text, closure )\n  # Example: bdd( 'can add two positive numbers', =>\n  #      result = calculator.add( 2, 3 )\n  #      bdd().expect(result).toBe( 5 )\n\n  status.assert.text = \"-- Passed -- #{status.result.type}s are equal for \" + status.assert.text\n  status.assert.text = \"-- Failed -- #{status.result.type}s are not equal for \" + status.assert.text\n\n  expect:( result ) ->\n    @result = result\n    @\n\n  toBe:( expect ) =>\n    @expect = expect\n    @\n\n###"
  ]
}
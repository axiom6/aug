{
  "version": 3,
  "file": "Tester.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Spec from \"./Spec.js\"\n\n# Type is also brought in by class Spec extends Type\nclass Tester extends Spec\n\n  constructor:() ->\n    super()\n\n    # Key settings that can be reconfigured through setOptions( options )\n    @testing        = true          # When false all testing is turned off which allows tests to remain in code\n    @always         = false         # When true  all testing is turned on  which overrides all other settings\n    #logging        = true          # @logging is in class Type\n    @archive        = true          # When true archives test status object to localStorage TestsPassed and TestFail\n    @verbose        = false         # Adds addition and sometimes mind numbing detail to testStatus objects\n    @debug          = false         # Turns on debugs call to console.log(...)\n    @schemaKey      = \"schema\"      # Specifies the key in a JSON file to look up its argidating schema in JSON\n    @statusSubject  = \"TestStatus\"  # Subject for publishing each test status object\n    @summarySubject = \"TestSummary\" # Subject for publishing module and final summaries\n\n    # Short hand for logging in a chained call i.e test(...).log( test().status )\n    #  it is important that @log and @error be called in the modules being tested\n    #  for viewing the code being tested rather that viewing code in the Tester itself\n    @log   = console.log\n    @error = console.error\n\n    # Set by @module(moduleTx)\n    @lastCalled = \"\"\n    @moduleUnit = \"\"\n    @moduleTx   = \"\"\n    @moduleName = \"\"    # Set automaticall by @toPath()\n    @moduleId   = 0     # Incremented each time @module(text) is called\n    @moduleOn   = true  # Set by @on(sw=true) when chained to @module(moduleTx)\n\n    # Set by @describe( methodTx )\n    @describeTx   = \"\"\n    @describeName = \"\"     # Set by @name(name) chained to @describe(...)\n    @describeId   = 0      # Incremented each time @describe(text) is called\n    @describeOp   = \"eq\"   #\n    @describeOn   = true   # Set by @on(sw=true) when chained to @describe(describeTx)\n    @summarized   = false  # Indicates that @summary() has been on the last @describe()\n                           #   and wether @complete() should genrate a summarized text\n    # Accumulated status objects\n    @text        = \"\" # set by test() that is passed inside eq() and sent to run()\n    @modulePaths = {}\n    @statusAs    = {}  # Latest status from @assert(...)\n    @statuses    = []\n\n    # optional instance for publishing each test status object to to UIs that subscripe to stream\n    # set by @injectStream(stream) which enforces that it have @klass 'Stream'\n    @stream  = null\n\n  setOptions:( options ) ->\n    @testing        = if options.testing?        then options.testing        else true\n    @always         = if options.always?         then options.always         else false\n    @logging        = if options.logging?        then options.logging        else true\n    @archive        = if options.archive?        then options.archive        else true\n    @verbose        = if options.verbose?        then options.verbose        else false\n    @debug          = if options.debug?          then options.debug          else false\n    @schemaKey      = if options.schemaKey?      then options.schemaKey      else \"schema\"\n    @statusSubject  = if options.statusSubject?  then options.statusSubject  else \"TestStatus\"\n    @summarySubject = if options.summarySubject? then options.summarySubject else \"TestSummary\"\n    return\n\n  # -- test --\n  #\n  #   import { test } from \"../test/Tester.js\"\n  #   import Vis      from \"../draw/Vis.js\"\n\n  #   test(  \"2 + 3 = 5\", (t) ->                # closure form\n  #     t.eq( 2 + 3,  5 ) )\n  #\n  #   test(  \"2 + 3 = 5\", 2 + 3, 5 )            # Direct result and expect arguments\n  #\n  #   test( \"Vis.rgb() converts hex color to rgb object\",  Vis.rgb(0xFFFFFF), {r:255,g:255,b:255} )\n  test:( text, args... ) =>\n    if      arguments.length is 0 or @testingOff()\n      return @\n    else if arguments.length is 2 and @isFunction(args[0])\n      closure = args[0]\n      @text   = text               # @text is latter referenced inside eq()\n      closure(@)                   # Call closure with an injected tester instand\n    else if arguments.length is 3 and not @isFunction(args[0])\n      result = args[0]\n      expect = args[1]\n      @text   = text\n      @run( text, result, expect ) # returns tester instance for chaining\n    @  # returns tester instance for chaining\n\n  # The strongest logic is the last where all 4 condition are checked where as\n  #  'module' and 'all' admit larger group of tests\n  testingOff:(group=\"test\") ->\n    toff = switch group\n      when \"all\"    then not ( @always or   @testing   )\n      when \"module\" then not ( @always or ( @testing and @moduleOn ) )\n      else               not ( @always or ( @testing and @moduleOn and @describeOn ) )\n    toff\n\n  eq:( result, expect ) =>\n    @run( @text, result, expect )\n\n  # -- run() scenario is @initStatus(...) @assert(...)\n  run:( text, result, expect ) ->\n    @statusAs = @initStatus( result, expect, text      )\n    @statusAs = switch @describeOp\n      when \"to\" then  @convert( result, expect, @statusAs )\n      else            @assert(  result, expect, @statusAs )\n    @    # returns tester instance for chaining\n\n  # Create a new status object for the current test\n  #   each test status is imprinted with the current module and describe settings\n  initStatus:( result, expect, text ) ->\n    {\n      assert:{ text:text, pass:true, keys:\"\",\n      moduleTx:@moduleTx,       moduleName:  @moduleName,   moduleId:  @moduleId, moduleOn:    @moduleOn,\n      describeTx:@describeTx, describeName:@describeName, describeId:@describeId, describeOn:@describeOn,\n      describeOp:@describeOp }\n      warned:{ text:\"\", }\n      result:{ text:\"\",   type:@type(result), value:result }\n      expect:{ text:\"\",   type:@type(expect), value:expect }\n      errors:\"\"\n    }\n\n  # Performs all assertions even a deep equal on objects and arrays\n  #   Strong type checking with @type(arg) so asserions are only test when types match\n  #   Skips over @type(arg) = \"function\"\n  assert:( result, expect, status, level=0, key=null, index=null ) ->\n\n    # Check values and types\n    status = @checkValuesTypes( result, expect, status )\n    if not status.assert.pass\n      status = @examine( false, result, expect, status, key, index )\n      return @processStatus( status )\n\n    # Perform all spec based assertions\n    if @isSpec( expect )\n      spec   = @toSpec( expect )\n      pass   = @inSpec( result, spec )\n      status = @examine( pass, result, spec, status, key, index )\n      return @processStatus( status )\n\n    # Perform all comparisions\n    type = @type( result )\n    status = switch type\n      when  \"string\", \"int\", \"float\", \"boolean\"\n                         @valuesEq(   result, expect, status, \"eq\"  )  # op is not passed aroung\n      when \"object\" then @objectsEq(  result, expect, status, level, key   )\n      when \"array\"  then @arraysEq(   result, expect, status, level, index )\n      else               @unknownsEq( result, expect, status, level ) # just a fallback\n    status = @examine( status.assert.pass, result, expect, status, key, index )\n    @processStatus( status )\n\n  # Store status in @statuses array and publish\n  processStatus:( status ) ->\n    if level is 0\n      @statuses.push(status)\n      @stream.publish( @statusSubject, status )  if @isDef(@stream)\n    status\n\n  convert:( result, expect, status ) ->\n    status = @checkValuesTypes(   result, expect, status )\n    @examine( status.assert.pass, result, expect, status )\n\n  # Check and report on values and types\n  #   refactored on Wed July 7, 2021\n  checkValuesTypes:( result, expect, status ) ->\n    op  = @describeOp\n    r   = @type(result)\n    e   = @type(expect)\n    rIs = () -> \"\\nResult is type '#{r}'\"\n    eIs = () -> \"\\nExpect is type '#{e}'\"\n    status.errors += switch\n      when @isNot(result)            then \" Result of #{r} is not defined#{eIs()}\"\n      when @isNot(expect)            then \" Expect of #{e} is not defined#{rIs()}\"\n      when not @isIn(r,\"expects\")    then \"Expect of type '#{e}' not in #{@toIn('expects')}#{rIs()}\"\n      when not @isIn(r,\"results\")    then \"Result of type '#{r}' not in #{@toIn('results')}#{eIs()}\"\n      when r is \"function\"           then \" Result type is 'function#{rIs()}\"\n      when e is \"function\"           then \" Expect type is 'function#{eIs()}\"\n      when r isnt e and op isnt \"to\" then \" Types do not match#{rIs()}#{eIs()}\"\n      else \"\"\n    status\n\n  valuesEq:( result, expect, status, oper ) ->\n    return true if expect is \"any\"\n    pass = switch oper\n      when \"eq\" then result is   expect\n      when \"le\" then result <=   expect\n      when \"lt\" then result <    expect\n      when \"ge\" then result >=   expect\n      when \"gt\" then result >    expect\n      when \"ne\" then result isnt expect\n      else           false\n    status.assert.pass = pass\n    status\n\n  # Just a fallback when types are not fully  screened\n  unknownsEq:( result, expect, status ) ->\n    @noop(     result, expect )\n    status.assert.pass  = false\n    status.assert.errors += \"unknown types for comparision\"\n    status\n\n  # Deep object equality assertion where all matching keys are examined\n  objectsEq:( result, expect, status, level, key ) ->\n\n    # Insure that result and expect are objects\n    if not @isObject(result) or not @isObject(expect)\n      status.errors += \" either one or both result and expect are not objects\"\n      status.errors += \" Result type is #{@type(result)}\"\n      status.errors += \" Expect type is #{@type(expect)}\"\n      return @examine( false, result, expect, status, key, null )\n\n    # Check that the result object has all the keys that the expect object has\n    #   ? or ( op is \"spec\" and arg.card is \"1\" ) )\n    for own key, arg of expect when not result[key]?\n      status.assert.pass  = false\n      status.assert.keys += \"\\n   missing result \" + key\n\n    # Check that the expect object has all the keys that the result  object has\n    for own key, arg of result when not expect[key]?\n      status.assert.pass  = false\n      status.assert.keys += \"\\n   missing expect \" + key\n\n    # Assert each value for the set of keys that result and expect objects share in common\n    for own key, obj of expect when result[key]? and expect[key]?\n      status = @assert( result[key], obj, status, ++level, key, null )\n    status\n\n  # Deep array equality assertion\n  arraysEq:( result, expect, status, level, index ) ->\n\n    # Insure that result and expect are arrays\n    if not @isArray(result) or not @isArray(expect)\n      status.errors += \" either one or both result and expect are not arrays\"\n      status.errors += \" Result type is #{@type(result)}\"\n      status.errors += \" Expect type is #{@type(expect)}\"\n      return @examine( false, result, expect, status, null, index )\n\n    # Examine the array lengths\n    if result.length isnt expect.length\n      status.errors += \" different array lengths\"\n      status.errors += \" Result length is #{result.length}\"\n      status.errors += \" Expect length is #{expect.length}\"\n      status = @examine( false, result, expect, status, null, index )\n\n    # Assert each value within the minimum length of the result and expect arrays\n    length = Math.min( result.length, expect.length )\n    for i in [0...length]\n      status = @assert( result[i], expect[i], status, ++level, null, i )\n    status\n\n  runUnitTests:( paths ) ->\n    for path in  paths\n      modulePath  = @toPath(path) # also sets the @moduleName\n      @moduleUnit = \"#{modulePath.path} unit test\"\n      @summarized = false\n      await `import( path /* @vite-ignore */ )`\n      @complete()     # This is where we know that the unit test module has finished so summarize\n    @complete(\"all\")  # All tests complete so produce then log and publish the final summary\n    return\n\n  # Add a unit test file path to the @modulePaths object\n  toPath:( path ) ->\n    dirs        = path.split(\"/\")\n    @moduleName = @tail(dirs).split(\"-\")[0]\n    @modulePaths[@moduleName] = { name:@moduleName, path:path }\n    # console.log( \"Tester.path(path)\", { path:path, dirs:dirs, module:@moduleName } ) if  @debug\n    @modulePaths[@moduleName]\n\n  module:( moduleTx ) =>\n    @moduleTx   = moduleTx\n    @moduleId  += @moduleId + 1 # ids are one based\n    @summarized = false         # set for functional tests when unit tests are not being run\n    @lastCalled = \"module\"\n    @\n\n  describe:( describeTx ) =>\n    @describeTx  = describeTx\n    @describeId += @describeId + 1 # ids are one based\n    @lastCalled  = \"describe\"\n    @\n\n  # Only chain to @describe(describeTx)\n  name:( name ) ->\n    @describeName = name\n    @\n\n  # Only chain to @describe(describeTx)\n  op:( op=\"eq\" ) ->\n    @describeOp = op\n    @\n\n  # Can be chained to @describe(describeTx) and @module(moduleTx) to turn test blocks on and off\n  on:( sw=true ) ->\n    if @lastCalled is \"module\" then @moduleOn = sw else @describeOn = sw\n    @\n\n  # Improved but still needs work\n  statusAssertText:( pass, result, status ) ->\n    describeName = status.assert.describeName\n    text       = if pass then \"\\n-- Passed -- \" else \"\\n-- Failed -- \"\n    if @isStr(describeName)\n      text += @strip(describeName,\"\",\"()\") + \"(\" + @toStr(result) + \") \"\n      text += @text + \" \" # if not pass\n    else\n      text += @text + \" \"\n    text\n\n  textValue:( name, value, key=null, index=null ) ->\n    ref = \"\"\n    ref = \" at key:#{key}\"      if @isStr(key)\n    ref = \" at index: #{index}\" if @isInt(index)\n    if name is \"Spec\"\n      spec = value\n      \"\\n   #{name}#{ref} type is '#{spec.type}' with match '#{spec.match}' and card '#{spec.card}'\"\n    else\n      \"\\n   #{name}#{ref} type is '#{@type(value)}' with value #{@toStr(value)}\"\n\n  # Generates informative text in status\n  examine:( pass, result, expect, status, key=null, index=null ) ->\n    return status if not @verbose and ( key? or index? )\n    isSpec               = @isSpec( expect )\n    eq                   = if pass then \"eq\" else \"not\"\n    status.assert.text   = @statusAssertText( pass, result, status )\n    status.assert.text  += \"\"\"#{eq} #{@toStr(expect)}\"\"\" if status.result.type isnt \"function\"\n    #tatus.assert.text  += \" for \" + @text\n    status.assert.pass   = pass and status.assert.pass # Asserts a previous status.assert.pass is false\n    status.result.text  += @textValue( \"Result\", result, key, index )\n    status.expect.text  += @textValue( \"Expect\", expect, key, index )  if not isSpec\n    status.expect.text  += @textValue( \"Spec\",   expect, key, index )  if     isSpec\n    #tatus.warned.text  += warn\n    status\n\n  # Determine if a status is part of module set or part of a describe set\n  #  pass = null implies that that status.assert.pass of true or false is\n  #    to be ingored while pass = true or false signals that whether a\n  #    test passed or failed is to be considered\n  isGroup:( group, status, pass=null ) ->\n    inSet = ( status, pass ) => if pass? then status.assert.pass is pass else true\n    switch group\n      when \"describe\" then inSet( status, pass ) and @describeId is status.assert.describeId\n      when \"module\"   then inSet( status, pass ) and @moduleId is status.assert.moduleId\n      when \"all\"      then inSet( status, pass )\n      else                 inSet( status, pass )\n\n  # Aa describe / test() block status summary\n  summary:() ->\n    summaryText  = \"\"\n    summaryText += @titleReport( \"module\"   ) if not @summarized\n    return summaryText if @testingOff(\"describe\")  # returning a blank summaryText string turns off logging\n    summaryText += @titleReport( \"describe\" )\n    summaryText += @summaryText( \"describe\" )\n    summaryText += @totals(      \"describe\" )\n    @summarized  = true\n    @stream.publish( @summarySubject, summaryText ) if @isDef(@stream)\n    @reset()     # reset all @describe..  parameters\n    summaryText  # for log( test().summary() )\n\n  # No arg implies generate a module summary while an arg of \"all\" is for all tests\n  #  for unit tests in @runUnitTests @complwte(arg) @complwte() is called automaticly\n  #  when modules or all tests are completed.\n  # @testingAllOff() or @testingModuleOff() determine if @complete(arg) should generate\n  # publish and/or log summaries for a module or all the tests\n  complete:( arg=null ) =>\n    isAll  = @isDef(arg)\n    group  = if isAll then \"all\" else \"module\"\n    return @ if @testingOff(group)\n    summaryText  = \"\"\n    summaryText += @titleReport( group )    if not @summarized\n    summaryText += @summaryText(\"describe\") if not @summarized\n    summaryText += @totals(      group )\n    @summarized  = true\n    @stream.publish( @summarySubject, summaryText ) if @isDef(@stream)\n    @log( summaryText ) if @logging\n\n    # Archive since all tests are complete\n    if isAll and @archive\n      @archiveLocal(  @statuses )\n      @reviewsLocal()\n      \n    @reset( \"module\")  # reset all @describe..  and @module.. parameters\n    @                  # return this for chaining\n\n  # reset all @describe..  and if group is module the @module.. parameters\n  #  this does not reset ids which are incremented by @describe(...) and @module()\n  reset:( group ) ->\n    @describeTx   = \"\"\n    @describeName = \"\"\n    @describeOp   = \"eq\"\n    @describeOn   = true\n    @moduleUnit   = \"\"\n    if group is \"module\"\n      @moduleTx   = \"\"\n      @moduleName = \"\"\n      @moduleOn   = true\n    return\n\n  summaryText:( group ) =>\n    text = \"\"\n    for status in @statuses when @isGroup(group,status)\n      text += @status( status )\n    text\n\n  # Generate text from status arg or from @statusAs\n  # @statusAs comes from @assert(...)  from the last test run\n  # Example: console.log( test().status() )\n  #   or      test().log( test().status() )\n  status:( status=null ) ->\n    status = if status? then status else @statusAs\n    text = \"\"\n    text += status.assert.text\n    text += status.result.text  if @verbose or not status.assert.pass\n    text += status.expect.text  if @verbose or not status.assert.pass\n    text += status.warned.text  if @verbose\n    text\n\n  totals:( group ) ->\n    passCount    = @count( group, true  )\n    failCount    = @count( group, false )\n    fullCount    = passCount + failCount\n    text  = @titleTotals( group )\n    text += \"\"\"\\n   #{@pad(passCount,fullCount)} tests passed\"\"\"\n    text += \"\"\"\\n   #{@pad(failCount,fullCount)} tests failed\"\"\"\n    text += \"\"\"\\n   #{@pad(fullCount,fullCount)} tests total\"\"\"\n    text\n\n  count:( group, pass ) ->\n    n = 0\n    for status in tester.statuses when @isGroup(group,status,pass)\n      n++\n    n\n\n  titleReport:( group ) ->\n    path = if group is \"module\" and @modulePaths[group]? then @modulePaths[group].path else \"\"\n    switch group\n      when \"module\"\n        \"\\n-- Module -- #{@moduleUnit}\" +\n        \"\\n-- Titled -- for #{@moduleName} #{@moduleTx}\" + path + \"\\n\"\n      when \"describe\"\n        if @isStr(@describeName)\n          \"\\n-- Report -- for #{@describeName} #{@describeTx}\"\n        else\n          \"\\n-- Report -- for #{@describeTx}\"\n      else\n        \"\"\n\n  # Relies on describe and module instance variables\n  titleTotals:( group ) ->\n    path = if group is \"module\" and @modulePaths[group]? then @modulePaths[group].path else \"\"\n    text = \"\\n-- Totals -- \"\n    text += switch group\n      when \"describe\"\n        if @isStr(@describeName)\n          \"for #{@describeName} #{@describeTx}\"\n        else\n          \"for #{@describeTx}\"\n      when \"module\"   then \"for #{@moduleName} #{@moduleTx}\" + path\n      else                 \"for all tests\"\n    text\n\n  # Stream is an optional libary for publising statusObject to UIs like RxJS\n  injectStream:( stream ) ->\n    type = @klass(stream)\n    if type is \"Stream\"\n      @stream  = stream\n    else\n      console.error( \"Tester.injectStream( stream ) stream klass must be 'Stream' not\", type )\n    return\n\n  archiveLocal:( statuses ) ->\n    localStorage.setItem( \"Tester\", JSON.stringify( statuses ) )\n    return\n\n  reviewsLocal:( ) ->\n    return if not ( @debug and @logging )\n    locals   = localStorage.getItem( \"Tester\" )\n    statuses = JSON.parse( locals )\n    for status in statuses\n      console.log( status )\n    return\n\n# -- ES6 exports for single tester instance and its test() and unit() methods\n#   tester is instanciates once on its first import subseqent imports\n#   get this single instance that holds all testing state\nexport tester = new Tester()\ntest = tester.test\nexport { test }\n\n###\n  # Determine if a result is bounded witnin a range.\n  # This method is here in Tester because it call @examine()\n  inRangeTester:( result, spec, status, level, key, index ) ->\n    range = spec.match\n    pass  = @inRange( result, range )\n    status.assert.text += \"inRange(...)\"\n    @examine( pass, result, spec, status, key, index )\n\n  # Determine if a result is enumerated.\n  # This method is here in Tester because it call @examine()\n  inEnumsTester:( result, spec, status, level=0, key=null, index=null ) ->\n    @noop( level )\n    enums = spec.expect\n    pass  = @inArray( result, enums )\n    status.assert.text +=  \"inEnums(...)\"\n    @examine( pass, result, spec, status, key, index )\n\n  # Determine if a result is enumerated.\n  # This method is here in Tester because it call @examine()\n  inRegexpTester:( result, spec, status, level=0, key=null, index=null ) ->\n    @noop( level )\n    regexp = spec.expect\n    pass  = regexp.test(result)\n    status.assert.text +=  \"inRegexp(...)\"\n    @examine( pass, result, spec, status, key, index )\n###\n"
  ]
}
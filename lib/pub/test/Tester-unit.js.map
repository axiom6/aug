{
  "version": 3,
  "file": "Tester-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { unit, test, tester } from './Tester.js'     # Only importing tester to unit test it\nimport Stream from \"../base/util/Stream.js\"\nimport Vis    from '../base/draw/Vis.js'\n\n# In this context all unit tests are executed immediately when this module is either\n#   dynaically  imported i.e module = import(path) - recommended\n# or statically imported i.e inport module from path\n\n# runUnitTestModulesFromPaths:( paths ) will dynamically import this module\n#   with paths = [\"/lib/pub/test/Tester-unitester.js\"]\n# For glob file patterns running in ViteJS there is\n# runUnitTestModulesWithViteJS:() will dynamically import this module\n#   using a glob pattern like \"/src/**/*-unitester.js\"  or \"/pub/**/*-unitester.js\"\n\n# t = tester\ntest().describe('Tester-unitester.js', 'unit tests' )\n\nfive = () ->\n  5\n\nadd  = ( a, b ) ->\n  a + b\n\ntest(  \"Tester.five() = 5\", (t) ->\n  t.eq( five(), 5 ) )\n\ntest(  \"Tester.add(2,3) = 5\", (t) ->\n  t.eq( add(2,3), 5 ) )\n\ntest(  \"Tester.type(123)\", (t) ->\n  t.eq( tester.type(123), 'number' ) )\n\ntest(  \"Tester.type('123')\", (t) ->\n  t.eq( tester.type('123'), 'string' ) )\n\nfunc  = () ->\nundef = undefined\n\nclass Main\n  @init = () =>\n\nsubjects   = [\"TestStatus\",\"TestString\",\"TestSummary\"]\nstreamLog  = { subscribe:false, publish:false, subjects:subjects }\nstream     = new Stream( subjects, streamLog )\n\nunit( \"Tester.type(true)\",       tester.type(true),          'boolean'   )\nunit( \"Tester.type(123)\",        tester.type(123),           'number'    )\nunit( \"Tester.type('123')\",      tester.type('123'),         'string'    )\nunit( \"Tester.type(func)\",       tester.type(func),          'function'  )\nunit( \"Tester.type({a:'a'})\",    tester.type({a:'a'}),       'object'    )\nunit( \"Tester.type([1,2,3]\",     tester.type([1,2,3]),       'array'     )\nunit( \"Tester.type(/x/)\",        tester.type(/x/),           'regexp'    )\nunit( \"Tester.type(new Date())\", tester.type(new Date()),    'date'      )\nunit( \"Tester.type(undef)\",      tester.type(undef),         'undefined' )\nunit( \"Tester.type(null)\",       tester.type(null),          'null'      )\nconsole.log( unit().block() ) # Log the current block of tests\n\nunit( \"Tester.type(stream)\",     tester.type(stream),        'object'    )\nunit( \"Tester.type(Stream)\",     tester.type(Stream),        'function'  )\nunit( \"Tester.type(tester)\",     tester.type(tester),        'object'    )\nunit( \"Tester.type(Vis)\",        tester.type(Vis),           'function'  )\nconsole.log( unit().block() ) # Log the current block of tests\n\nunit( \"Tester.klass(true)\",       tester.klass(true),        'Boolean'   )\nunit( \"Tester.klass(123)\",        tester.klass(123),         'Number'    )\nunit( \"Tester.klass('123')\",      tester.klass('123'),       'String'    )\nunit( \"Tester.klass(func)\",       tester.klass(func),        'func'      )\nunit( \"Tester.klass({a:'a'})\",    tester.klass({a:'a'}),     'Object'    )\nunit( \"Tester.klass([1,2,3]\",     tester.klass([1,2,3]),     'Array'     )\nunit( \"Tester.klass(/x/)\",        tester.klass(/x/),         'RegExp'    )\nunit( \"Tester.klass(new Date())\", tester.klass(new Date()),  'Date'      )\nunit( \"Tester.klass(undef)\",      tester.klass(undef),       'Undefined' )\nunit( \"Tester.klass(null)\",       tester.klass(null),        'Null'      )\nconsole.log( unit().block() ) # Log the current block of tests\n\nunit( \"Tester.klass(stream)\",     tester.klass(stream),      'Stream'     )\nunit( \"Tester.klass(Stream)\",     tester.klass(Stream),      'Stream'     )\nunit( \"Tester.klass(tester)\",     tester.klass(tester),      'Tester'     )\nunit( \"Tester.klass(tester)\",     tester.klass(tester.type), 'bound type' )\nunit( \"Tester.klass(Vis)\",        tester.klass(Vis),         'Vis'        )\nconsole.log( unit().block() ) # Log the current block of tests\n\n# Positive true tests\nunit( \"Tester.isNull(null)\",     tester.isNull(null),     true  )\nunit( \"Tester.isUndef(xxxx)\",    tester.isUndef(undef),   true  )\nunit( \"Tester.isNot(null)\",      tester.isNot(null),      true  )\nunit( \"Tester.isStr('abc')\",     tester.isStr('abc'),     true  )\nunit( \"Tester.isNum(12345)\",     tester.isNum(12345),     true  )\nunit( \"Tester.isNaN(NaN)\",       tester.isNaN(NaN),       true  )\nunit( \"Tester.isObj({a:'a'})\",   tester.isObj({a:'a'}),   true  )\nunit( \"Tester.isVal( 123 )\",     tester.isVal( 123 ),     true  )\nunit( \"Tester.isVal('123')\",     tester.isVal('123'),     true  )\nunit( \"Tester.isVal(true)\",      tester.isVal(true),      true  )\nunit( \"Tester.isVal(false)\",     tester.isVal(false),     true  )\nunit( \"Tester.isArray([1,2,3])\", tester.isArray([1,2,3]), true  )\nconsole.log( unit().block() ) # Log the current block of tests\n\n# Negative true tests\nunit( \"Tester.isNull('abc')\",    tester.isNull('abc'),    false )\nunit( \"Tester.isUndef(12345)\",   tester.isUndef(12345),   false )\nunit( \"Tester.isNot({a:'a'}\",    tester.isNot({a:'a'}),   false )\nunit( \"Tester.isStr( 123 )\",     tester.isStr( 123 ),     false )\nunit( \"Tester.isNum('123')\",     tester.isNum('123'),     false )\nunit( \"Tester.isNaN( 123 )\",     tester.isNaN( 123 ),     false )\nunit( \"Tester.isObj(123)\",       tester.isObj(123),       false )\nunit( \"Tester.isVal({a:'a'})\",   tester.isVal({a:'a'}),   false )\nunit( \"Tester.isVal([1,2,3])\",   tester.isVal([1,2,3]),   false )\nunit( \"Tester.isVal([1,2,3])\",   tester.isVal([1,2,3]),   true  )\nunit( \"Tester.isArray({a:'a'})\", tester.isArray({a:'a'}), true  )\n\ntest( 'Tester.eq( {a:\"a\"})', (t) -> t.eq(  {a:\"a\"}, {a:\"a\"} ) )\ntest( 'Tester.eq( {a:\"a\"})', (t) -> t.eq(  {a:\"a\"}, {a:\"b\"} ) )\ntest( 'Tester.eq( {a:\"a\"})', (t) -> t.eq(  {a:\"a\"}, {b:\"a\"} ) )\n\ntest( \"Tester.eq([1,2,3])\",  (t) -> t.eq([1,2,3],[1,2,3]    ) )\ntest( \"Tester.eq([1,2,3])\",  (t) -> t.eq([1,2,3],[1,2,3,4]  ) )\n\ntest( 'Tester.eq( (x) ->, (y) -> ) )', (t) -> t.eq(  (x) ->, (y) -> ) )\n\n# String conversions\nunit( 'Tester.toStr({ a:\"a\", b:\"b\" })',  tester.toStr({ a:\"a\", b:\"b\" }), '{ a:\"a\", b:\"b\" }' )\nunit( 'Tester.toStr([ 1, 2, 3 ])',       tester.toStr([ 1, 2, 3 ]),      '[ 1, 2, 3 ]'      )\nunit( 'Tester.toStr([ \"1\", \"2\", \"3\" ])', tester.toStr([ \"1\", \"2\", \"3\" ]),  '[ \"1\", \"2\", \"3\" ]'  )\n\n###\n  constructor:()\n  setOptions:( options )\n  test:( text, closure )\n  unit:( text, result, expect )\n  fits:( text, result, schema )\n  eq:( result, expect )\n  run:( text, result, expect, op )\n  describe:( description, suite=null )\n  initStatus:( result, expect, op )\n  assert:( result, expect, status, op, level=0, key=null, index=null )\n  examine:( pass, result, expect, status, op, info, key, index )\n  isSchema:( v )\n  toSchema:( expect,   op )\n  parseSchema:( expect, schema )\n  toRanges:( splits )\n  checkValuesTypes:( result, expect, status, op, key, index )\n  valuesEq:( result, expect, status, op )\n  unknownsEq:( result, expect, status )\n  textValue:( name, argue, key, index )\n  objectsEq:( result, expect, status, op, level )\n  arraysEq:( result, expect, status, op, level )\n  report:( result, expect, op, status )\n  status:()\n  block:()\n  runUnitTests:( paths )\n  path:( path )\n  summary:( module=null )\n  isString:(s)\n  isInt:(i,sc=false)\n  isFloat:(f,sc=false)\n  isBoolean:(b,sc=false)\n  isObject:(o,sc=false)\n  isRegex:(r)\n  isFunction:(f)\n  isNull:(m)\n  isUndef:(u)\n  isBigInt:(b)\n  isSymbol:(s)\n  isArray:( a, type=null, sc=false )\n  isType:(v,t)\n  isDef:(d)\n  isNumber:(n)\n  isNot:(d)\n  isNaN:(n)\n  isArrayTyped:(a,t)\n  sArrayMixed:(a)\n  inString:(e,s)\n  inArray:( e,a)\n  inObject:(k,o)\n  inRange:(i,r)\n  inTolerance:(f,t)\n  inBetween:(s,b)\n  toKeys:(o)\n  time:()\n  isChild: (key)\n  isEmpty:(e)\n  isStringFloat:( str )\n  isStringInt:( str )\n  isStringBoolean:( str )\n  isStringArray:( str )\n  isStringObject:( str )\n  isStringEnclosed:( beg, str, end )\n  toType:( arg, type )\n  enclose:( str, enc=\"\" )\n  toString:( arg, enc=\"\" )\n  toFloat:( arg )\n  toInt:( arg )\n  toInfo:( method, arg, type, typeTo, retnStr, retn )\n  toArray:( arg, type, sep=\",\" )\n  toObject:( arg )\n  isRange:(r)\n  isWithin:(w)\n  isBetween:(b)\n  toRange:(arg)\n  toWithin:(w)\n  toBetween:(b)\n  inRange:(arg,range)\n  inWithin:(w,within)\n  inBetween:(b,between)\n  toFixed:( arg, dec=2 )\n  toCap:( str )\n  unCap:( str )\n  head:(v,action=false,pop=false)\n  tail:(v,action=false)\n  slice:( v, beg, end=null, remove=false )\n  pad:( n, m )\n  noop:( ...args )\n  Tester.types\n  Tester.typeofs\n  scheme:( arg,op=\"eq\" )\n  type:(arg,lowerCase=true)\n  klass:(arg)\nx mdnType:( obj, showFullClass )\n  injectStream:( stream )\n  archiveLocal:( failed, passed )\n  reviewsLocal:( reviewFailed, reviewPassed )\n###\n\n# Log the current block of tests and then the summary for 't'\nconsole.log( unit().summary('Tester') )\n\n\n\n\n\n\n\n\n\n"
  ]
}
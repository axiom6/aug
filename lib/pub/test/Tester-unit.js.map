{
  "version": 3,
  "file": "Tester-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { unit, test, tester } from './Tester.js'     # Only importing tester to unit test it\nimport Stream from \"../base/util/Stream.js\"\nimport Mix    from \"../base/nav/Mix.js\"\nimport Nav    from \"../base/nav/Nav.js\"\nimport Vis    from '../base/draw/Vis.js'\n\n# In this context all unit tests are executed immediately when this module is either\n#   dynaically  imported i.e module = import(path) - recommended\n# or statically imported i.e inport module from path\n\n# runUnitTestModulesFromPaths:( paths ) will dynamically import this module\n#   with paths = [\"/lib/pub/test/Tester-unit.js\"]\n# For glob file patterns running in ViteJS there is\n# runUnitTestModulesWithViteJS:() will dynamically import this module\n#   using a glob pattern like \"/src/**/*-unit.js\"  or \"/pub/**/*-unit.js\"\n\n# t = tester\ntest().describe('Tester-unit.js', 'unit tests' )\n\nunit( \"Tester.type(true)\",  tester.type(true), 'boolean' ).log( unit().status() )\n\nfive = () ->\n  5\n\nadd  = ( a, b ) ->\n  a + b\n\ntest(  \"Tester.five() = 5\", (t) ->\n  t.eq( five(), 5 ).log( t.status() )  )\n\ntest(  \"Tester.add(2,3) = 5\", (t) ->\n  t.eq( add(2,3), 5 ).log( t.status() ) )\n\ntest(  \"Tester.type(123)\", (t) ->\n  t.eq( tester.type(123), 'number' ).error( t.status() ) )\n\ntest().summary('Tester')\n\n\nfunc  = () ->\nundef = undefined # Not sure how to test for undefined\n\nclass Main\n  @init = () =>\n\nsubjects   = [\"Nav\",\"Test\"]\nstreamLog  = { subscribe:false, publish:false, subjects:subjects }\nstream     = new Stream( subjects, streamLog )\nmix        = new Mix( Main )\nnav        = new Nav( stream, mix )\nt          = tester\n\nunit( \"t.type(true)\",       t.type(true),          'boolean'   )\nunit( \"t.type(123)\",        t.type(123),           'number'    )\nunit( \"t.type('123')\",      t.type('123'),         'string'    )\nunit( \"t.type(func)\",       t.type(func),          'function'  )\nunit( \"t.type({a:'a'})\",    t.type({a:'a'}),       'object'    )\nunit( \"t.type([1,2,3]\",     t.type([1,2,3]),       'array'     )\nunit( \"t.type(/x/)\",        t.type(/x/),           'regexp'    )\nunit( \"t.type(new Date())\", t.type(new Date()),    'date'      )\nunit( \"t.type(undef)\",      t.type(undef),         'undefined' )\nunit( \"t.type(null)\",       t.type(null),          'null'      )\n\nunit( \"t.type(stream)\",     t.type(stream),        'object'    )\nunit( \"t.type(Stream)\",     t.type(Stream),        'function'  )\nunit( \"t.type(tester)\",     t.type(tester),        'object'    )\nunit( \"t.type(Vis)\",        t.type(Vis),           'function'  )\n\nunit( \"t.klass(true)\",       t.klass(true),        'Boolean'   )\nunit( \"t.klass(123)\",        t.klass(123),         'Number'    )\nunit( \"t.klass('123')\",      t.klass('123'),       'String'    )\nunit( \"t.klass(func)\",       t.klass(func),        'func'      )\nunit( \"t.klass({a:'a'})\",    t.klass({a:'a'}),     'Object'    )\nunit( \"t.klass([1,2,3]\",     t.klass([1,2,3]),     'Array'     )\nunit( \"t.klass(/x/)\",        t.klass(/x/),         'RegExp'    )\nunit( \"t.klass(new Date())\", t.klass(new Date()),  'Date'      )\nunit( \"t.klass(undef)\",      t.klass(undef),       'Undefined' )\nunit( \"t.klass(null)\",       t.klass(null),        'Null'      )\n\nunit( \"t.klass(stream)\",     t.klass(stream),      'Stream'     )\nunit( \"t.klass(Stream)\",     t.klass(Stream),      'Stream'     )\nunit( \"t.klass(tester)\",     t.klass(tester),      'Tester'     )\nunit( \"t.klass(tester)\",     t.klass(tester.type), 'bound type' )\nunit( \"t.klass(Vis)\",        t.klass(Vis),         'Vis'        )\n\n# Positive true tests\nunit( \"t.isNull(null)\",     t.isNull(null),     true  )\nunit( \"t.isUndef(xxxx)\",    t.isUndef(undef),   true  )\nunit( \"t.isNot(null)\",      t.isNot(null),      true  )\nunit( \"t.isStr('abc')\",     t.isStr('abc'),     true  )\nunit( \"t.isNum(12345)\",     t.isNum(12345),     true  )\nunit( \"t.isNaN(NaN)\",       t.isNaN(NaN),       true  )\nunit( \"t.isObj({a:'a'})\",   t.isObj({a:'a'}),   true  )\nunit( \"t.isVal( 123 )\",     t.isVal( 123 ),     true  )\nunit( \"t.isVal('123')\",     t.isVal('123'),     true  )\nunit( \"t.isVal(true)\",      t.isVal(true),      true  )\nunit( \"t.isVal(false)\",     t.isVal(false),     true  )\nunit( \"t.isArray([1,2,3])\", t.isArray([1,2,3]), true  )\n\n# Negative true tests\nunit( \"t.isNull('abc')\",    t.isNull('abc'),    false )\nunit( \"t.isUndef(12345)\",   t.isUndef(12345),   false )\nunit( \"t.isNot({a:'a'}\",    t.isNot({a:'a'}),   false )\nunit( \"t.isStr( 123 )\",     t.isStr( 123 ),     false )\nunit( \"t.isNum('123')\",     t.isNum('123'),     false )\nunit( \"t.isNaN( 123 )\",     t.isNaN( 123 ),     false )\nunit( \"t.isObj(123)\",       t.isObj(123),       false )\nunit( \"t.isVal({a:'a'})\",   t.isVal({a:'a'}),   false )\nunit( \"t.isVal([1,2,3])\",   t.isVal([1,2,3]),   false )\nunit( \"t.isVal([1,2,3])\",   t.isVal([1,2,3]),   true  )\nunit( \"t.isArray({a:'a'})\", t.isArray({a:'a'}), true  )\n  \nunit().summary('t')\n\n\n\n\n\n\n\n\n"
  ]
}
{
  "version": 3,
  "file": "Tester-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { unit, test, tester } from './Tester.js'     # Only importing tester to unit test it\n\n# In this context all unit tests are executed immediately when this module is either\n#   dynaically  imported i.e module = import(path) - recommended\n# or statically imported i.e inport module from path\n\n# Module.js transpiled from Module.coffee will dynamically import this module\n#   using a glob pattern like \"/src/**/*-unit.js\"  or \"/pub/**/*-unit.js\" for transpiled\n#   JavaScript .js\n\n\n\ntest().describe('tester-unit.js', 'unit tests' )\n\n#Type tests [\"Boolean\", \"Number\", \"String\", \"Function\", \"Object\", \"Array\",\n#  \"RegExp\", \"Date\", \"Symbol\", \"Event\", \"Element\", \"Undefined\", \"Null\"]\n\nfunc  = () ->\nundef = undefined # Not sure how to test for undefined\n\nunit( \"tester.type(true)\",          tester.type(true),          'boolean'   )\nunit( \"tester.type(123)\",           tester.type(123),           'number'    )\nunit( \"tester.type('123')\",         tester.type('123'),         'string'    )\nunit( \"tester.type(func)\",          tester.type(func),          'function'  )\nunit( \"tester.type({a:'a'})\",       tester.type({a:'a'}),       'object'    )\nunit( \"tester.type([1,2,3]\",        tester.type([1,2,3]),       'array'     )\nunit( \"tester.type(/x/)\",           tester.type(/x/),           'regexp'    )\nunit( \"tester.type(new Date())\",    tester.type(new Date()),    'date'      )\n#nit( \"tester.type(new Event())\",   tester.type(new Event()),   'event'     )\n#nit( \"tester.type(new Element())\", tester.type(new Element()), 'element'   )\nunit( \"tester.type(undef)\",         tester.type(undef),         'undefined' )\nunit( \"tester.type(null)\",          tester.type(null),          'null'      )\n\n# Positive true tests\n\nunit( \"tester.isNul(null)\",    tester.isNul(null),    true  )\nunit( \"tester.isUnd(xxxx)\",    tester.isUnd(undef),   true  )\nunit( \"tester.isNot(null)\",    tester.isNot(null),    true  )\nunit( \"tester.isStr('abc')\",   tester.isStr('abc'),   true  )\nunit( \"tester.isNum(12345)\",   tester.isNum(12345),   true  )\nunit( \"tester.isNaN(NaN)\",     tester.isNaN(NaN),     true  )\nunit( \"tester.isObj({a:'a'})\", tester.isObj({a:'a'}), true  )\nunit( \"tester.isVal( 123 )\",   tester.isVal( 123 ),   true  )\nunit( \"tester.isVal('123')\",   tester.isVal('123'),   true  )\nunit( \"tester.isVal(true)\",    tester.isVal(true),    true  )\nunit( \"tester.isVal(false)\",   tester.isVal(false),   true  )\nunit( \"tester.isArr([1,2,3])\", tester.isArray([1,2,3]), true  )\n\n# Negative true tests\nunit( \"tester.isNul('abc')\",   tester.isNul('abc'),   false )\nunit( \"tester.isUnd(12345)\",   tester.isUnd(12345),   false )\nunit( \"tester.isNot({a:'a'}\",  tester.isNot({a:'a'}), false )\nunit( \"tester.isStr( 123 )\",   tester.isStr( 123 ),   false )\nunit( \"tester.isNum('123')\",   tester.isNum('123'),   false )\nunit( \"tester.isNaN( 123 )\",   tester.isNaN( 123 ),   false )\nunit( \"tester.isObj(123)\",     tester.isObj(123),     false )\nunit( \"tester.isVal({a:'a'})\", tester.isVal({a:'a'}), false )\nunit( \"tester.isVal([1,2,3])\", tester.isVal([1,2,3]), false )\nunit( \"tester.isVal([1,2,3])\", tester.isVal([1,2,3]), false )\nunit( \"tester.isArr({a:'a'})\", tester.isArray({a:'a'}), false )\n\nfive = () ->\n  5\n\nadd  = ( a, b ) ->\n  a + b\n\ntest(  \"five() = 5\", (t) ->\n  t.eq( five(),  5 ) )\n\ntest(  \"add(2,3) = 5\", (t) ->\n  t.eq( add(2,3),  5 ) )\n\ntest(  \"tester.type(123)\", (t) ->\n  t.eq( tester.type(123),  'number' ) )\n\nunit().summary('tester')\n\n\n\n\n\n\n\n"
  ]
}
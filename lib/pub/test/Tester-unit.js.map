{
  "version": 3,
  "file": "Tester-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester-unit.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA,GAAA,EAAA;;AAAA,OAAA;EAAS,IAAT;EAAe,MAAf;CAAA,MAAA,cAAA;;;;;;;;;;;;;;AAcA,IAAA,CAAA,CAAM,CAAC,aAAP,CAAsB,MAAtB;;AAEA,IAAA,CAAA,CAAM,CAAC,MAAP,CAAe,yBAAf,CAA0C,CAAC,EAA3C,CAA8C,KAA9C;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,mBAAjB,CAAsC,CAAC,EAAvC,CAAA;;AACA,IAAA,GAAO,QAAA,CAAA,CAAA;SAAM;AAAN;;AACP,GAAA,GAAO,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;SAAY,CAAA,GAAI;AAAhB;;AACP,IAAA,CAAO,YAAP,EAAuB,QAAA,CAAC,CAAD,CAAA;SAAO,CAAC,CAAC,EAAF,CAAM,IAAA,CAAA,CAAN,EAAc,CAAd;AAAP,CAAvB;;AACA,IAAA,CAAO,cAAP,EAAuB,QAAA,CAAC,CAAD,CAAA;SAAO,CAAC,CAAC,EAAF,CAAM,GAAA,CAAI,CAAJ,EAAM,CAAN,CAAN,EAAgB,CAAhB;AAAP,CAAvB;;AACA,IAAA,CAAO,WAAP,EAAuB,QAAA,CAAC,CAAD,CAAA;SAAO,CAAC,CAAC,EAAF,CAAM,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAN,EAAwB,QAAxB;AAAP,CAAvB;;AACA,IAAA,CAAO,aAAP,EAAuB,QAAA,CAAC,CAAD,CAAA;SAAO,CAAC,CAAC,EAAF,CAAM,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAN,EAA0B,QAA1B;AAAP,CAAvB;;AACA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,6CAAjB,CAAiE,CAAC,IAAlE,CAAuE,QAAvE,CAAgF,CAAC,EAAjF,CAAA;;AACA,IAAA,CAAO,+DAAP,EAAwE,QAAA,CAAC,CAAD,CAAA;AACxE,MAAA;EAAE,KAAA,GAAQ,CAAI,CAAE,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,QAAhB,IAA6B,CAAC,CAAC,UAAjC;SACZ,CAAC,CAAC,EAAF,CAAM,KAAN,EAAa,KAAb;AAFsE,CAAxE;;AAGA,IAAA,CAAO,8DAAP,EAAuE,QAAA,CAAC,CAAD,CAAA;AACvE,MAAA;EAAE,KAAA,GAAQ,CAAI,CAAE,CAAC,CAAC,OAAF,IAAc,CAAC,CAAC,QAAhB,IAA6B,CAAC,CAAC,UAAjC;SACZ,CAAC,CAAC,EAAF,CAAM,KAAN,EAAa,KAAb;AAFqE,CAAvE;;AAGA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AAEA,IAAA,CAAA,CAAM,CAAC,QAAP,CAAiB,uBAAjB,CAA0C,CAAC,IAA3C,CAAgD,MAAhD,CAAuD,CAAC,EAAxD,CAAA;;AACA,IAAA,CAAM,qBAAN,EAA8B,QAAA,CAAC,CAAD,CAAA;SAAO,CAAC,CAAC,EAAF,CAAO;IAAC,CAAA,EAAE;EAAH,CAAP,EAAgB;IAAC,CAAA,EAAE;EAAH,CAAhB;AAAP,CAA9B,EArCA;;;;AAwCA,IAAA,CAAM,sBAAN,EAA8B,QAAA,CAAC,CAAD,CAAA;SAAO,CAAC,CAAC,EAAF,CAAK,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAL,EAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb;AAAP,CAA9B,EAxCA;;;;AA2CA,IAAA,CAAA,CAAM,CAAC,GAAP,CAAY,IAAA,CAAA,CAAM,CAAC,OAAP,CAAA,CAAZ;;AA3CA",
  "sourcesContent": [
    "\nimport { test, tester } from './Tester.js'     # Only importing tester to unit test it\n\n# In this context all unit tests are executed immediately when this module is either\n#   dynaically  imported i.e module = import(path) - recommended\n# or statically imported i.e inport module from path\n\n# runUnitTestModulesFromPaths:( paths ) will dynamically import this module\n#   with paths = [\"/lib/pub/test/Tester-unitester.js\"]\n# For glob file patterns running in ViteJS there is\n# runUnitTestModulesWithViteJS:() will dynamically import this module\n#   using a glob pattern like \"/src/**/*-unitester.js\"  or \"/pub/**/*-unitester.js\"\n\n# t = tester\n\ntest().listFunctions( tester )\n\ntest().module( \"Class Tester Unit tests\" ).on(false)\n\ntest().describe( \"Test closure demo\" ).on()\nfive = () -> 5\nadd  = ( a, b ) -> a + b\ntest(  \"five() = 5\",   (t) -> t.eq( five(), 5 ) )\ntest(  \"add(2,3) = 5\", (t) -> t.eq( add(2,3), 5 ) )\ntest(  \"type(123)\",    (t) -> t.eq( tester.type(123), 'number' ) )\ntest(  \"type('123')\",  (t) -> t.eq( tester.type('123'), 'string' ) )\ntest().log( test().summary() )\n\ntest().describe( \"Internal logic for turning tests on and off\", ).name(\"test()\").on()\ntest(  'not (  @testing and  @moduleOn and  @methodOn ) @method=false', (t) ->\n  isOff = not ( t.testing and t.moduleOn and t.describeOn )\n  t.eq( isOff, false ) )\ntest(  'not (  @testing and  @moduleOn and  @methodOn ) @method=true', (t) ->\n  isOff = not ( t.testing and t.moduleOn and t.describeOn )\n  t.eq( isOff, false ) )\ntest().log( test().summary() )\n\ntest().describe( \"test(text, (t) -> ...\" ).name(\"eq()\").on()\ntest( 'eq({a:\"a\"},{a:\"a\"})',  (t) -> t.eq(  {a:\"a\"}, {a:\"a\"} ) )\n#est( 'eq({a:\"a\"},{a:\"b\"})',  (t) -> t.eq(  {a:\"a\"}, {a:\"b\"} ) )  # Noed ne\n#est( 'eq({a:\"a\"},{b:\"a\"})',  (t) -> t.eq(  {a:\"a\"}, {b:\"a\"} ) )  # Noed ne\ntest( \"eq([1,2,3],[1,2,3] )\", (t) -> t.eq([1,2,3],[1,2,3]    ) )\n#est( \"eq([1,2,3])\",          (t) -> t.eq([1,2,3],[1,2,3,4]  ) )  # Noed ne\n#est( 'eq((x)->,(y)->))',     (t) -> t.eq( (x)->, (y)->      ) )  # Need better handling of function types?\ntest().log( test().summary() )\n\n###\n  constructor:()\n  setOptions:( options )\n  test:( text, closure )\n  unit:( text, result, expect )\n  fits:( text, result, schema )\n  eq:( result, expect )\n  run:( text, result, expect, op )\n  describe:( description, suite=null )\n  initStatus:( result, expect, op )\n  assert:( result, expect, status, op, level=0, key=null, index=null )\n  examine:( pass, result, expect, status, op, info, key, index )\n  isSchema:( v )\n  toSchema:( expect,   op )\n  parseSchema:( expect, schema )\n  toRanges:( splits )\n  checkValuesTypes:( result, expect, status, op, key, index )\n  valuesEq:( result, expect, status, op )\n  unknownsEq:( result, expect, status )\n  textValue:( name, argue, key, index )\n  objectsEq:( result, expect, status, op, level )\n  arraysEq:( result, expect, status, op, level )\n  report:( result, expect, op, status )\n  status:()\n  block:()\n  runUnitTests:( paths )\n  path:( path )\n  summary:( module=null )\n  injectStream:( stream )\n  archiveLocal:( failed, passed )\n  reviewsLocal:( reviewFailed, reviewPassed )\n  isRange:(r)\n  toRange:(arg)\n  inRange:(arg,range)   \n###\n\n\n\n\n\n\n\n\n\n"
  ]
}
{
  "version": 3,
  "file": "Tester-unit.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Tester-unit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { test, tester } from './Tester.js'     # Only importing tester to unit test it\nimport Stream from \"../base/util/Stream.js\"\nimport Vis    from '../base/draw/Vis.js'\n\n# In this context all unit tests are executed immediately when this module is either\n#   dynaically  imported i.e module = import(path) - recommended\n# or statically imported i.e inport module from path\n\n# runUnitTestModulesFromPaths:( paths ) will dynamically import this module\n#   with paths = [\"/lib/pub/test/Tester-unitester.js\"]\n# For glob file patterns running in ViteJS there is\n# runUnitTestModulesWithViteJS:() will dynamically import this module\n#   using a glob pattern like \"/src/**/*-unitester.js\"  or \"/pub/**/*-unitester.js\"\n\n# t = tester\ntest().describe('Tester', 'unit tests' )\n\nfive = () ->\n  5\n\nadd  = ( a, b ) ->\n  a + b\n\ntest(  \"five() = 5\", (t) ->\n  t.eq( five(), 5 ) )\n\ntest(  \"add(2,3) = 5\", (t) ->\n  t.eq( add(2,3), 5 ) )\n\ntest(  \"type(123)\", (t) ->\n  t.eq( tester.type(123), 'number' ) )\n\ntest(  \"type('123')\", (t) ->\n  t.eq( tester.type('123'), 'string' ) )\n\nclass Main\n  @init = () =>\n\nsubjects   = [\"TestStatus\",\"TestString\",\"TestSummary\"]\nstreamLog  = { subscribe:false, publish:false, subjects:subjects }\nstream     = new Stream( subjects, streamLog )\n\ntest( \"klass(stream)\",     tester.klass(stream),      'Stream'     )\ntest( \"klass(Stream)\",     tester.klass(Stream),      'Stream'     )\ntest( \"klass(tester)\",     tester.klass(tester),      'Tester'     )\ntest( \"klass(tester)\",     tester.klass(type.type), 'bound type' )\ntest( \"klass(Vis)\",        tester.klass(Vis),         'Vis'        )\nconsole.log( test().block() ) # Log the current block of tests\n\n\ntest( 'eq( {a:\"a\"})', (t) -> t.eq(  {a:\"a\"}, {a:\"a\"} ) )\ntest( 'eq( {a:\"a\"})', (t) -> t.eq(  {a:\"a\"}, {a:\"b\"} ) )\ntest( 'eq( {a:\"a\"})', (t) -> t.eq(  {a:\"a\"}, {b:\"a\"} ) )\n\ntest( \"eq([1,2,3])\",  (t) -> t.eq([1,2,3],[1,2,3]    ) )\ntest( \"eq([1,2,3])\",  (t) -> t.eq([1,2,3],[1,2,3,4]  ) )\n\ntest( 'eq( (x) ->, (y) -> ) )', (t) -> t.eq(  (x) ->, (y) -> ) )\n\ntest( \"Type.type(stream)\",     type.type(stream),        'object'    )\ntest( \"Type.type(Stream)\",     type.type(Stream),        'function'  )\ntest( \"Type.type(tester)\",     type.type(tester),        'object'    )\ntest( \"Type.type(Vis)\",        type.type(Vis),           'function'  )\nconsole.log( test().block() ) # Log the current block of tests\n\n\n\n###\n  constructor:()\n  setOptions:( options )\n  test:( text, closure )\n  unit:( text, result, expect )\n  fits:( text, result, schema )\n  eq:( result, expect )\n  run:( text, result, expect, op )\n  describe:( description, suite=null )\n  initStatus:( result, expect, op )\n  assert:( result, expect, status, op, level=0, key=null, index=null )\n  examine:( pass, result, expect, status, op, info, key, index )\n  isSchema:( v )\n  toSchema:( expect,   op )\n  parseSchema:( expect, schema )\n  toRanges:( splits )\n  checkValuesTypes:( result, expect, status, op, key, index )\n  valuesEq:( result, expect, status, op )\n  unknownsEq:( result, expect, status )\n  textValue:( name, argue, key, index )\n  objectsEq:( result, expect, status, op, level )\n  arraysEq:( result, expect, status, op, level )\n  report:( result, expect, op, status )\n  status:()\n  block:()\n  runUnitTests:( paths )\n  path:( path )\n  summary:( module=null )\n  injectStream:( stream )\n  archiveLocal:( failed, passed )\n  reviewsLocal:( reviewFailed, reviewPassed )\n  isRange:(r)\n  toRange:(arg)\n  inRange:(arg,range)   \n###\n\n# Log the current block of tests and then the summary for 't'\nconsole.log( test().summary('Tester') )\n\n\n\n\n\n\n\n\n\n"
  ]
}
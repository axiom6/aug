{
  "version": 3,
  "file": "Spec.js",
  "sourceRoot": "../../src/test",
  "sources": [
    "Spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Type from \"./Type.js\"\n\nclass Spec extends Type\n\n  constructor:() ->\n    super()\n\n  # -- is... Spec assertions\n\n  isSpec:( arg ) ->\n    type = @toType(arg)\n    switch type\n      when \"string\"\n        @isSpecParse(  arg )\n      when \"object\"\n         if @isSpecObject( arg )\n           true\n         else\n           pass = true\n           pass = pass and @isSpec(val) for own key, val of arg\n           pass\n      when \"array\"\n        pass = true\n        pass = pass and @isSpec(val)  for val in arg\n        pass\n      else\n        false\n\n  isSpecParse:(   arg ) ->\n    type = @toType( arg )\n    @isDef(arg) and type isnt(\"object\") and ( type is \"regexp\" or ( type is \"string\" and arg.includes(\":\") ) )\n\n  isSpecObject: ( arg ) ->\n    @isObject(arg) and @isIn(arg.type,\"results\") and arg.match? and @isMatch(arg.match) and arg.card? and @isCard(arg.card)\n\n  isMatch:( match ) ->\n    switch\n      when @isRegexp(match) then true\n      when  @isEnums(match) then true\n      when  @isRange(match) then true\n      else  false\n\n  # let re = /ab+c/i; // literal notation\n  # let re = new RegExp('ab+c', 'i') // constructor with string pattern as first argument\n  # let re = new RegExp(/ab+c/, 'i') // constructor with regular express\n  isRegexp:( arg  ) ->\n    @isType(arg,\"regexp\")\n\n  # Asserts range with for types \"string\" or \"int\" or \"float\"\n  # internal functions verify an array of type \"string\" or \"int\" or \"float\"\n  #   is an array of type \"string\" or \"int\" or \"float\"\n  # rangeStr    = \"| a-z, 0-9, A-Z |\"\n  # rangeRgb    = \"| 0-255 |\"\n  # rangeHsv    = \"| 0-360, 0-100, 0-100 |\"\n  # rangeFlt    = \"| 0-360+0.001, 0-100+0.001, 0-100+0.001 |\"\n  isRange:(range)  ->\n    return @isRanges(@toRanges(range)) if range.includes(\",\")\n    a = @toRangeArray(range)\n    isStrRange    = (a) -> a.length is 2 and a[0]      <= a[1]       # Foa 'staing'\n    isIntRange    = (a) -> a.length is 2 and a[0]      <= a[1]       # Foa 'int'\n    isFloatRange  = (a) -> a.length is 3 and a[0]-a[2] <= a[1]+a[2]  # Foa 'float' a[2] is tol\n    switch @toType(a[0])\n      when 'string' then isStrRange(a)\n      when 'int'    then isIntRange(a)\n      when 'float'  then isFloatRange(a)\n      else               false\n\n  isRanges:(ranges) ->\n    pass = true\n    pass = pass and @isRange(range) for range in ranges\n    pass\n\n  # Moved to Type.coffee\n  isEnums:( arg ) ->\n    super.isEnums(arg)\n\n  isResult:( result ) ->\n    type =  @toType(result)\n    @isDef(result) and @isIn( type, \"results\" )\n\n  isExpect:( expect ) ->\n    type =  @toType(expect)\n    @isDef(expect) and @isIn( type, \"expects\" )\n\n  # -- to... Spec conversions\n\n  toSpec:( arg ) ->\n    switch\n      when @isSpecParse(  arg )\n           @toSpecParse(  arg )\n      when @isSpecObject( arg )\n           @toSpecObject( arg )\n      when      @isArray( arg )\n        array = []\n        array.push(@toSpec(val)) for val in arg\n        array\n      when     @isObject( arg )\n        obj = {}\n        obj[key] = @toSpec(val) for own key, val of arg\n        obj\n      else @toSpecInit()  # @toSpecInit() creates a do nothing spec\n\n  # toSpecParse:( spec, arg )\n  # Examples\n  #   \"array:[0,255]\" }      { type:\"array\",   oper:\"range\", match:[0,255],         card=\"1\" }\n  #   \"string:James\"         { type:\"string\",  oper:\"eq\",    match:James,           card=\"1\" }\n  #   \"string:a|b|c\"         { type:\"string\",  oper:\"enums\", match:\"a|b|c\",         card=\"1\" }\n  #   \"int:[0,100]\"          { type:\"int\",     oper:\"range\", match:[0,100],         card=\"1\" }\n  #   \"float:[0.0,100.0,1.0] { type:\"float\",   oper:\"range\", match:[0.0,100.0,1.0], card=\"1\" }\n  #   \"string:[\"\",\"zzz\"]     { type:\"string\",  oper:\"range\", match:[\"\",\"zzz\"],      card=\"1\" }\n  #   \"boolean\"              { type:\"boolean\", oper:\"any\",   match:\"any\",           card=\"1\" }\n  #   \"object:{r:[0,255],g:[0,255],b:[0,255]}\n  #     { type:\"object\", oper:\"range\", match:{r:[0,255],g:[0,255],b:[0,255]}, card=\"1\" }\n  #  \"array:[[0,360],[0,100],[0,100]]:?\"\n  #     { type:\"array\",  oper:\"range\", match:[[0,360],[0,100],[0,100]], card=\"?\" }\n  toSpecParse:( arg ) ->\n    spec   = @toSpecInit()\n    splits = arg.split(\":\")\n    length = splits.length\n    if length >= 1  then spec.type = splits[0]  # type\n    if length >= 1                              # match\n      type = @toType(splits[1])\n      spec.match = switch type\n        when \"regexp\"  then  \"regexp\"           # regex\n        when \"string\"\n          switch\n            when splits[1].includes(\"|\")             then @toEnums(  splits[1] )  # enums\n            when @isEnclosed( \"[\", splits[1], \"]\" )  then @toArray(  splits[1] )  # range\n            when @isEnclosed( \"{\", splits[1], \"}\" )  then @toObject( splits[1] )  # object?\n            else  \"any\"\n        else \"any\"\n    if length >= 2 then spec.card = splits[2]  # card i.e cardinaliry\n    spec\n\n  toSpecObject:( arg ) ->\n    spec       = @toSpecInit()\n    spec.type  = if arg.type?  then arg.type  else \"any\"\n    spec.match = if arg.match? then arg.match else \"any\"\n    spec.card  = if arg.card?  then arg.card  else  \"1\"  # required\n    spec\n\n  toSpecInit:() ->\n    { type:\"any\", match:\"any\", card:\"1\" }\n\n  toRange:( arg ) ->\n     if @isType(arg,\"range\") then arg else \"any\"\n\n  toRanges:(range) ->\n    range = @strip( range, \"|\", \"|\")\n    range = range.replaceAll( \" \", \"\" ) # remove white space\n    range.split(\",\")\n\n  # |a-z| |0-100|  |0-100+0.001|\n  toRangeArray:( range ) ->\n    a      = []\n    range  = @strip( range, \"|\", \"|\")\n    range  = range.replaceAll( \" \", \"\" )  # remove white space\n    splits = range.split(\"-\")\n    # Append the optional 3rd parameter tolerance for 'float' ranges\n    if splits.length is 2 and splits[1].includes(\"+\")\n      splits2   = splits[1].split(\"+\")\n      splits[1] = splits2[0]\n      splits.push(splits2[1])\n    switch @toType(splits[0])\n      when \"string\" and splits.length is 2     # 'string'\n        a.push(splits[0])\n        a.push(splits[1])\n      when \"int\"    and splits.length is 2     # 'int'\n        a.push(@toInt(splits[0]))\n        a.push(@toInt(splits[1]))\n      when \"float\"  and splits.length is 3     # 'float'\n        a.push(@toFloat(splits[0]))\n        a.push(@toFloat(splits[1]))\n        a.push(@toFloat(splits[2]))\n      else\n        a\n\n  # Moved to Type.coffee\n  toEnums:( arg ) ->\n    super.toEnums(arg)\n\n  # Arg types must be 'regexp' or 'string', otherwise returns 'any'\n  toRegexp:( arg ) ->\n    switch @toType(arg)\n      when \"regexp\" then arg\n      when \"string\" then new RegExp(arg)\n      else \"any\"\n\n# -- in... Spec matches\n\n  inSpec:( result, spec ) ->\n    return false if @isNot(spec) or not ( @isSpec(spec) and @toType(result) is spec.type and @inCard(result,spec) )\n    match = spec.match\n    switch\n      when  @isArray(result) and  @isArray(spec) then @inSpecArray(  result, spec  )\n      when @isObject(result) and @isObject(spec) then @inSpecObject( result, spec  )\n      when @isRange(  match )                    then @isRange(      result, match )\n      when @isEnums(  match )                    then @isEnums(      result, match )\n      when @isRegexp( match )                    then @isRegexp(     result, match )\n      else false\n\n  # Here only minimum length of spec and result are checked\n  inSpecArray:( result, spec ) ->\n    pass = true\n    min  = Math.min( result.length, spec.length )\n    pass = pass and @inSpec(result[i],spec[i]) for i in [0...min]\n    pass\n\n  # Here only the keys common to both spec and result are checked\n  inSpecObject:( result, spec ) ->\n    pass = true\n    for own key, val of spec when result[key]?  \n      pass = pass and @inSpec(result[key],spec[key])\n    pass\n\n  # Determine if a result is bounded witnin a range.\n  # This method is here in Tester because it call @examine()\n  inRange:( result, range ) ->\n    return  @inRanges(result,@toRanges(range)) if range.includes(\",\")\n    return false if not @isType(range) # @isRange(range)\n    a = @toRangeArray(range) # Convers the range to an array\n    inStrRange   = ( string, a ) -> a[0]      <= string and string <= a[1]\n    inIntRange   = ( int,    a ) -> a[0]      <= int    and int    <= a[1]\n    inFloatRange = ( float,  a ) -> a[0]-a[2] <= float  and float  <= a[1]+a[2]\n    switch @toType(result)\n      when \"string\" then inStrRange(   result, a )\n      when \"int\"    then inIntRange(   result, a )\n      when \"float\"  then inFloatRange( result, a )\n      else false\n\n  # Ony apply the ranges we have are applied\n  # if ranges is just a single range applied then it is applied to each result\n  inRanges:( results, ranges ) ->\n    pass = true\n    switch\n      when  @isArray(results) and @isArray(ranges)\n        min  = Math.min( results.length, ranges.length ) # Ony apply the ranges we ga\n        pass = pass and @inRange(results[i],ranges[i]) for i in [0...min]\n      when  @isArray(results)\n        pass = pass and @inRange(results,ranges) for result in results\n      else\n        pass = false\n    pass\n\n  # Determine if a result is enumerated.\n  # inEnums:( result, enums ) ->\n  #   super.toEnums( result, enums )\n\n  inRegexp:( result, regexp ) ->\n    return false if not @isRegexp(regexp)\n    regexp = @toRegexp( regexp )\n    regexp.test(result)\n\n  isCard:( card ) ->\n    @isStr(card) and ( @isType(card,\"int\") or card.includes(\":\") or @isIn(card,\"cards\") )\n\n  # ... more to come for checking cardinallity\n  inCard:( result, spec ) ->\n    card = spec.card\n    switch\n      when @isType(card,\"int\")     then true\n      when @isStr(card) and card.includes(\"-\")\n        minMax = @toMinMax(card)\n        num = minMax[0] # Dummy number\n        minMax[0] <= num <= minMax[1]\n      else switch card\n        when \"1\" then true\n        when \"?\" then true\n        when \"*\" then true\n        when \"+\" then true\n        else          false\n\n  toMinMax:( card ) ->\n    splits = card.split(\":\")\n    min    = @toInt(splits[0])\n    max    = @toInt(splits[1])\n    [min,max]\n\nexport spec = new Spec() # Export a singleton instence of type\nexport default Spec"
  ]
}
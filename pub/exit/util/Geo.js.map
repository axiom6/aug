{
  "version": 3,
  "file": "Geo.js",
  "sourceRoot": "../../../src/exit/util",
  "sources": [
    "Geo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util  from '../util/Util.js'\n\nclass Geo\n\n  constructor:() ->\n    Util.noop( @boundingBoxAroundPolyCoords, @pnpoly, @lineStringsIntersect, @pointInPolygon )\n    Util.noop( @pointInMultiPolygon, @drawCircle, @rectangleCentroid, @geometryWithinRadius )\n    Util.noop( @centroid, @simplify, @destinationPoint, Geo )\n\n  boundingBoxAroundPolyCoords:(coords) ->\n    xAll = []\n    yAll = []\n    i = 0\n    while i < coords[0].length\n      xAll.push coords[0][i][1]\n      yAll.push coords[0][i][0]\n      i++\n    xAll = xAll.sort((a, b) ->\n      a - b\n    )\n    yAll = yAll.sort((a, b) ->\n      a - b\n    )\n    [\n      [\n        xAll[0]\n        yAll[0]\n      ]\n      [\n        xAll[xAll.length - 1]\n        yAll[yAll.length - 1]\n      ]\n    ]\n\n  # Point in Polygon\n  # http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices\n\n  pnpoly:(x, y, coords) ->\n    i = 0\n    j = 0\n    vert = [ [\n      0\n      0\n    ] ]\n    i = 0\n    while i < coords.length\n      j = 0\n      while j < coords[i].length\n        vert.push coords[i][j]\n        j++\n      vert.push coords[i][0]\n      vert.push [\n        0\n        0\n      ]\n      i++\n    inside = false\n    i = 0\n    j = vert.length - 1\n    while i < vert.length\n      if vert[i][0] > y != vert[j][0] > y and x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]\n        inside = !inside\n      j = i++\n    inside\n\n  # if typeof module != 'undefined' and module.exports\n  #  module.exports = gju\n  # adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js\n\n  lineStringsIntersect:(l1, l2) ->\n    intersects = []\n    i = 0\n    while i <= l1.coordinates.length - 2\n      j = 0\n      while j <= l2.coordinates.length - 2\n        a1 = \n          x: l1.coordinates[i][1]\n          y: l1.coordinates[i][0]\n        a2 = \n          x: l1.coordinates[i + 1][1]\n          y: l1.coordinates[i + 1][0]\n        b1 = \n          x: l2.coordinates[j][1]\n          y: l2.coordinates[j][0]\n        b2 = \n          x: l2.coordinates[j + 1][1]\n          y: l2.coordinates[j + 1][0]\n        ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x)\n        ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x)\n        u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y)\n        if u_b != 0\n          ua = ua_t / u_b\n          ub = ub_t / u_b\n          if 0 <= ua and ua <= 1 and 0 <= ub and ub <= 1\n            intersects.push\n              'type': 'Point'\n              'coordinates': [\n                a1.x + ua * (a2.x - a1.x)\n                a1.y + ua * (a2.y - a1.y)\n              ]\n        ++j\n      ++i\n    if intersects.length == 0\n      intersects = false\n    intersects\n\n  pointInBoundingBox:(point, bounds) ->\n    !(point.coordinates[1] < bounds[0][0] or point.coordinates[1] > bounds[1][0] or point.coordinates[0] < bounds[0][1] or point.coordinates[0] > bounds[1][1])\n\n  pointInPolygon:(p, poly) ->\n    coords = if poly.type == 'Polygon' then [ poly.coordinates ] else poly.coordinates\n    insideBox = false\n    i = 0\n    while i < coords.length\n      if @pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))\n        insideBox = true\n      i++\n    if !insideBox\n      return false\n    insidePoly = false\n    i = 0\n    while i < coords.length\n      if pnpoly(p.coordinates[1], p.coordinates[0], coords[i])\n        insidePoly = true\n      i++\n    insidePoly\n\n  # support multi (but not donut) polygons\n\n  pointInMultiPolygon:(p, poly) ->\n    j = 0\n    coords_array = if poly.type == 'MultiPolygon' then [ poly.coordinates ] else poly.coordinates\n    insideBox = false\n    insidePoly = false\n    i = 0\n    while i < coords_array.length\n      coords = coords_array[i]\n      j = 0\n      while j < coords.length\n        if !insideBox\n          if @pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[j]))\n            insideBox = true\n        j++\n      if !insideBox\n        return false\n      j = 0\n      while j < coords.length\n        if !insidePoly\n          if pnpoly(p.coordinates[1], p.coordinates[0], coords[j])\n            insidePoly = true\n        j++\n      i++\n    insidePoly\n\n  numberToRadius:(number) ->\n    number * Math.PI / 180\n\n  numberToDegree:(number) ->\n    number * 180 / Math.PI\n\n  # written with help from @tautologe\n\n  drawCircle:(radiusInMeters, centerPoint, steps) ->\n    center = [\n      centerPoint.coordinates[1]\n      centerPoint.coordinates[0]\n    ]\n    dist = radiusInMeters / 1000 / 6371\n    radCenter = [@numberToRadius(center[0]),@numberToRadius(center[1])]\n    steps = steps or 15\n    poly = [ [ center[0], center[1] ] ]\n    while i < steps\n      brng = 2 * Math.PI * i / steps\n      lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng))\n      lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat))\n      poly[i] = []\n      poly[i][1] = @numberToDegree(lat)\n      poly[i][0] = @numberToDegree(lng)\n      i++\n    {\n      'type': 'Polygon'\n      'coordinates': [ poly ]\n    }\n\n  # assumes rectangle starts at lower left point\n\n  rectangleCentroid:(rectangle) ->\n    bbox = rectangle.coordinates[0]\n    xmin = bbox[0][0]\n    ymin = bbox[0][1]\n    xmax = bbox[2][0]\n    ymax = bbox[2][1]\n    xwidth = xmax - xmin\n    ywidth = ymax - ymin\n    {\n      'type': 'Point'\n      'coordinates': [\n        xmin + xwidth / 2\n        ymin + ywidth / 2\n      ]\n    }\n\n  # from http://www.movable-type.co.uk/scripts/latlong.html\n\n  pointDistance:(pt1, pt2) ->\n    lon1 = pt1.coordinates[0]\n    lat1 = pt1.coordinates[1]\n    lon2 = pt2.coordinates[0]\n    lat2 = pt2.coordinates[1]\n    dLat = @numberToRadius(lat2 - lat1)\n    dLon = @numberToRadius(lon2 - lon1)\n    a    = Math.sin(dLat/2) ** 2 + Math.cos(@numberToRadius(lat1)) * Math.cos(@numberToRadius(lat2)) * Math.sin(dLon / 2) ** 2\n    c    = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    6371 * c * 1000 # returns meters\n\n\n  geometryWithinRadius:(geometry, center, radius) ->\n    if geometry.type == 'Point'\n      return @pointDistance(geometry, center) <= radius\n    else if geometry.type == 'LineString' or geometry.type == 'Polygon'\n      point = {}\n      coordinates = undefined\n      if geometry.type == 'Polygon'\n        # it's enough to check the exterior ring of the Polygon\n        coordinates = geometry.coordinates[0]\n      else\n        coordinates = geometry.coordinates\n      for i of coordinates\n        point.coordinates = coordinates[i]\n        if @pointDistance(point, center) > radius\n          return false\n      true\n\n  # adapted from http://paulbourke.net/geometry/polyarea/javascript.txt\n\n  area:(polygon) ->\n    p1 = undefined\n    p2 = undefined\n    area = 0\n    # To Do: polygon holes at coordinates[1]\n    points = polygon.coordinates[0]\n    j = points.length - 1\n    i = 0\n    while i < points.length\n      p1 = \n        x: points[i][1]\n        y: points[i][0]\n      p2 = \n        x: points[j][1]\n        y: points[j][0]\n      area += p1.x * p2.y\n      area -= p1.y * p2.x\n      j = i++\n    area /= 2\n    area\n\n  centroid:(polygon) ->\n      p1 = undefined\n      p2 = undefined\n      f = undefined\n      x = 0\n      y = 0\n      # To Do: polygon holes at coordinates[1]\n      points = polygon.coordinates[0]\n      j = points.length - 1\n\n      i = 0\n      while i < points.length\n        p1 =\n          x: points[i][1]\n          y: points[i][0]\n        p2 =\n          x: points[j][1]\n          y: points[j][0]\n        f = p1.x * p2.y - p2.x * p1.y\n        x += (p1.x + p2.x) * f\n        y += (p1.y + p2.y) * f\n        j = i++\n      f = @area(polygon) * 6\n      {\n        'type': 'Point'\n        'coordinates': [\n          y / f\n          x / f\n        ]\n      }\n\n  simplify:(source, kink) ->\n\n    ### source[] array of geojson points ###\n\n    ### kink\tin metres, kinks above this depth kept  ###\n\n    ### kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments ###\n\n    kink = kink or 20\n    source = source.map( (o) ->\n      { lng: o.coordinates[0], lat: o.coordinates[1] } )\n    n_source = undefined\n    n_stack = undefined\n    n_dest = undefined\n    start = undefined\n    end = undefined\n    i = undefined\n    sig = undefined\n    dev_sqr = undefined\n    max_dev_sqr = undefined\n    band_sqr = undefined\n    x12 = undefined\n    y12 = undefined\n    d12 = undefined\n    x13 = undefined\n    y13 = undefined\n    d13 = undefined\n    x23 = undefined\n    y23 = undefined\n    d23 = undefined\n    F = Math.PI / 180.0 * 0.5\n    index = new Array\n\n    ### aray of indexes of source points to include in the reduced line ###\n\n    sig_start = new Array\n\n    ### indices of start & end of working section ###\n\n    sig_end = new Array\n\n    ### check for simple cases ###\n\n    if source.length < 3\n      return source\n\n    ### one or two points ###\n\n    ### more complex case. initialize stack ###\n\n    n_source = source.length\n    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0)\n\n    ### Now in degrees ###\n\n    band_sqr *= band_sqr\n    n_dest = 0\n    sig_start[0] = 0\n    sig_end[0] = n_source - 1\n    n_stack = 1\n\n    ### while the stack is not empty  ... ###\n\n    while n_stack > 0\n\n      ### ... pop the top-most entries off the stacks ###\n\n      start = sig_start[n_stack - 1]\n      end = sig_end[n_stack - 1]\n      n_stack--\n      if end - start > 1\n\n        ### any intermediate points ? ###\n\n        ### ... yes, so find most deviant intermediate point to\n        either side of line joining start & end points\n        ###\n\n        x12 = source[end].lng() - source[start].lng()\n        y12 = source[end].lat() - source[start].lat()\n        if Math.abs(x12) > 180.0\n          x12 = 360.0 - Math.abs(x12)\n        x12 *= Math.cos(F * (source[end].lat() + source[start].lat()))\n\n        ### use avg lat to reduce lng ###\n\n        d12 = x12 * x12 + y12 * y12\n        i = start + 1\n        sig = start\n        max_dev_sqr = -1.0\n        while i < end\n          x13 = source[i].lng() - source[start].lng()\n          y13 = source[i].lat() - source[start].lat()\n          if Math.abs(x13) > 180.0\n            x13 = 360.0 - Math.abs(x13)\n          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()))\n          d13 = x13 * x13 + y13 * y13\n          x23 = source[i].lng() - source[end].lng()\n          y23 = source[i].lat() - source[end].lat()\n          if Math.abs(x23) > 180.0\n            x23 = 360.0 - Math.abs(x23)\n          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()))\n          d23 = x23 * x23 + y23 * y23\n          if d13 >= d12 + d23\n            dev_sqr = d23\n          else if d23 >= d12 + d13\n            dev_sqr = d13\n          else\n            dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12\n          # solve triangle\n          if dev_sqr > max_dev_sqr\n            sig = i\n            max_dev_sqr = dev_sqr\n          i++\n        if max_dev_sqr < band_sqr\n\n          ### is there a sig. intermediate point ? ###\n\n          ### ... no, so transfer current start point ###\n\n          index[n_dest] = start\n          n_dest++\n        else\n\n          ### ... yes, so push two sub-sections on stack for further processing ###\n\n          n_stack++\n          sig_start[n_stack - 1] = sig\n          sig_end[n_stack - 1] = end\n          n_stack++\n          sig_start[n_stack - 1] = start\n          sig_end[n_stack - 1] = sig\n      else\n\n        ### ... no intermediate points, so transfer current start point ###\n\n        index[n_dest] = start\n        n_dest++\n\n    ### transfer last point ###\n\n    index[n_dest] = n_source - 1\n    n_dest++\n\n    ### make return array ###\n\n    r = new Array\n    i = 0\n    while i < n_dest\n      r.push( source[index[i]] )\n      i++\n\n    r.map( (o) ->\n      { type:'Point', coordinates:[ o.lng, o.lat ] } )\n\n  # http://www.movable-type.co.uk/scripts/latlong.html#destPoint\n\n  destinationPoint:(pt, brng, dist) ->\n    dist = dist / 6371\n    # convert dist to angular distance in radians\n    brng = @numberToRadius(brng)\n    lon1 = @numberToRadius(pt.coordinates[0])\n    lat1 = @numberToRadius(pt.coordinates[1])\n    lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1) * Math.sin(dist) * Math.cos(brng))\n    lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2))\n    lon2 = (lon2 + 3 * Math.PI) % 2 * Math.PI - Math.PI\n    # normalise to -180..+180º\n    {\n      'type': 'Point'\n      'coordinates': [\n        @numberToDegree(lon2)\n        @numberToDegree(lat2)\n      ]\n    }\n\n`export default Geo`"
  ]
}
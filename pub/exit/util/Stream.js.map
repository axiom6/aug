{
  "version": 3,
  "file": "Stream.js",
  "sourceRoot": "../../../src/exit/util",
  "sources": [
    "Stream.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n# Stream   is standalone base class for all publish and subscribe steams\n# StreamRx extends Stream for RxJS\n# SteamsXs extends Stream for xstream\n\nimport Util  from '../util/Util.js'\n\nclass Stream\n\n  constructor:( @subjectNames, @info ) ->\n    @subjects = {}\n    for subjectName in @subjectNames\n      @addSubject( subjectName )\n    Util.noop( @allInfo, @unsubscribeAll )\n\n  subscribe:( subjectName, subscriberName, onCallback ) ->\n    subject  = @getSubject( subjectName, false )\n    subject['subscribers'][subscriberName] = onCallback\n    if @isInfo( subjectName, 'subscribe' )\n      console.info( 'Strean.subscribe()', { subject:subjectName, subscriber:subscriberName } )\n    return\n\n  publish:( subjectName, object ) ->\n    subject = @getSubject( subjectName, false )\n    for own subscriberName, onCallback of subject['subscribers']\n      onCallback( object )\n    if @isInfo( subjectName, 'publish')\n      console.info( 'Stream.publish()', { subject:subjectName, object:object } )\n    return\n\n  event:( subjectName, object, $element, eventType ) ->\n    onEvent = ( event ) =>\n      event?.stopPropagation()\n      event?.preventDefault()\n      pobject = if eventType is 'change' then $element.children(\"option:selected\").val() else object\n      @publish( subjectName, pobject )\n      return\n\n    # console.log( 'Stream.event()', $element)\n    # Util.noop( eventType, onEvent )\n    # $element.on( eventType, onEvent )\n    if Util.isJQueryElem( $element )\n      $element.on( eventType, onEvent )\n    else if $element?\n      $element.addEventListener( eventType, onEvent )\n\n    return\n\n  complete:( subjectName, object, completeName, onComplete, completeObject ) ->\n    subject = @getSubject( subjectName, false )\n    subject[completeName] = {}\n    for own subscriberName, onCallback of subject['subscribers']\n      subject[completeName][subscriberName] = false\n    for own subscriberName, onCallback of subject['subscribers']\n      onSubscribe = ( object ) =>\n        onCallback(   object )\n        subject[completeName][subscriberName] = true\n        if @isComplete( subject, completeName )\n          onComplete( completeObject )\n          if @isInfo( subjectName, 'complete' )\n            console.info( 'Stream.complete()', { subject:subjectName, object:object, complete:completeName, completeObject:completeObject } )\n      onSubscribe( object )\n    return\n\n  isComplete:( subject, completeName ) ->\n    for own subscriberName, status of subject[completeName]\n      return false if status is false\n    true\n\n  unsubscribe:( subjectName, subscriberName ) ->\n    if @hasSubject( subjectName )\n      if @hasSubscriber( subjectName, subscriberName )\n        delete @subjects[subjectName].subscribers[subscriberName]\n      else\n        console.error( 'Strean.unsubscribe() unknown subscriber', { subject:subjectName, subscriber:subscriberName } )\n    else\n      console.error( 'Strean.unsubscribe() unknown subject', { subject:subjectName, subscriber:subscriberName } )\n\n    if @isInfo( subjectName, 'subscribe' )\n      console.info( 'Stream.unsubscribe()', { subject:subjectName, subscriber:subscriberName } )\n    return\n\n  unsubscribeAll:() ->\n    for own subjectName, subject of @subjects\n      for own subscriberName, onCallback of subject['subscribers']\n        @unsubscribe( subjectName, subscriberName )\n    return\n\n  addSubject:( subjectName, warn=true ) ->\n    if not @hasSubject(subjectName)\n      subject                = {}\n      subject['subscribers'] = {}\n      @subjects[subjectName] = subject\n    else\n      console.warn( 'Stream.addSubject() subject already exists', subjectName ) if warn\n    return\n\n  hasSubject:( subjectName ) ->\n    @subjects[ subjectName ]?\n\n  hasSubscriber:( subjectName, subscriberName ) ->\n    @hasSubject(  subjectName ) and @subjects[subjectName]['subscribers'][subscriberName]?\n\n  # Get a subject by name. Create a new one if need with a warning\n  getSubject:( subjectName, warn=true ) ->\n    if not @hasSubject(subjectName)\n      console.warn( 'Stream.getSubject() unknown name for subject so creating one for', subjectName ) if warn\n      @addSubject( subjectName, false )\n    @subjects[subjectName]\n\n  isInfo:( subjectName, op ) ->\n    Util.inArray( @info.subjects, subjectName ) and @info[op]? and @info[op]\n\n  allInfo:() ->\n    console.info( '--- Stream.Subjects --- ')\n    for   own subjectName,    subject    of @subjects\n      console.info( \"  Subject #{subjectName}\" )\n      for own subscriberName, subscriber of subject.subscribers\n        console.info( \"    Subscriber #{subscriberName}\" )\n    return\n\n`export default Stream`"
  ]
}
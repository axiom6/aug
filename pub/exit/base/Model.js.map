{
  "version": 3,
  "file": "Model.js",
  "sourceRoot": "../../../src/exit/base",
  "sources": [
    "Model.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util          from '../util/Util.js'\nimport Data          from '../base/Data.js'\nimport Trip          from '../base/Trip.js'\n\nclass Model\n\n  constructor:( @stream, @rest, @dataSource ) ->\n    @first       = true                       # Implies we have not acquired enough data to get started\n    @source      = '?'\n    @destination = '?'\n    @trips       = {}\n    @resetCompletionStatus()\n    @milePostsComplete           = false\n    @milePostsCompleteWithError  = false\n    @segments           = []\n    @conditions         = []\n    @deals              = []\n    @forecasts          = {}\n    @forecastsPending    = 0\n    @forecastsCount     = 0\n    @milePosts          = []\n    @segmentIds         = Data.WestSegmentIds  # CDOT road speed segment for Demo I70 West from 6th Ave to East Vail\n    @segmentIdsReturned = []                    # Accumulate by doSegments()\n    Util.noop( @forecastsPending, @segmentIds, @segmentIdsReturned )\n\n  ready:() ->\n    @subscribe()\n\n  subscribe:() ->\n    @stream.subscribe( 'Source',      'Model', (source)      => @onSource(      source      ) )\n    @stream.subscribe( 'Destination', 'Model', (destination) => @onDestination( destination ) )\n\n  # A poor man's chained completion status.\n  # Could be implemented better in the future with a chained Stream or a synched promise chain\n  resetCompletionStatus:() ->\n    @segmentsComplete            = false\n    @segmentsCompleteWithError   = false\n    @conditionsComplete          = false\n    @conditionsCompleteWithError = false\n    @dealsComplete               = false\n    @dealsCompleteWithError      = false\n    return\n\n  onSource:(  source ) =>\n    @source = source\n    if @destination isnt '?' and @source isnt @destination\n      @createTrip( @source, @destination )\n    return\n\n  onDestination:(  destination ) =>\n    @destination = destination\n    if @source isnt '?'  and @source isnt @destination\n      @createTrip( @source, @destination )\n    return\n\n  tripName:( source, destination ) ->\n    \"#{source}To#{destination}\"\n\n  trip:() ->\n    @trips[ @tripName( @source, @destination ) ]\n\n# The Trip parameter calculation process here needs to be refactored\n  createTrip:( source, destination ) ->\n    @source      = source\n    @destination = destination\n    name         = @tripName( @source, @destination )\n    @trips[name] = new Trip( @stream, @, name, source, destination )\n    switch @dataSource\n      when 'Rest',  'RestThenLocal'  then @doTrip(      @trips[name] )\n      when 'Local', 'LocalForecasts' then @doTripLocal( @trips[name] )\n      else console.error( 'Model.createTrip() unknown dataSource', @dataSource )\n    return\n\n  doTrip:( trip ) ->\n    @resetCompletionStatus()\n    @rest.segmentsByPreset(             trip.preset,        @doSegments,   @onSegmentsError   )\n    @rest.conditionsBySegments(         trip.segmentIdsAll, @doConditions, @onConditionsError )\n    @rest.deals( @app.dealsUI.latLon(), trip.segmentIdsAll, @doDeals,      @onDealsError      )\n    @rest.milePostsFromLocal(                               @doMilePosts,  @onMilePostsError  )\n    return\n\n  doTripLocal:( trip ) ->\n    @resetCompletionStatus()\n    @rest.segmentsFromLocal(   trip.direction, @doSegments,   @onSegmentsError   )\n    @rest.conditionsFromLocal( trip.direction, @doConditions, @onConditionsError )\n    @rest.dealsFromLocal(      trip.direction, @doDeals,      @onDealsError      )\n    @rest.forecastsFromLocal(                  @doForecasts,  @onForecastsError  )  if @dataSource is 'Local'\n    @rest.milePostsFromLocal(                  @doMilePosts,  @onMilePostsError  )  if not @milePostsComplete and not @milePostsCompleteWithError\n    return\n\n# checkComplete is call three times when each status completed is changed\n  # goOrNoGo is then only called once\n  checkComplete:() =>\n    if @segmentsComplete and @conditionsComplete and @dealsComplete and @milePostsComplete\n      @launchTrip( @trip() )\n\n  launchTrip:( trip ) ->\n    @first = false\n    trip.launch()\n    @stream.publish( 'Trip', trip )\n    if @dataSource isnt 'Local'\n      @restForecasts( trip ) # Will punlish forecasts on Stream when completed\n    return\n\n  # Makes a rest call for each town in the Trip, and checks completion for each town\n  #   so it does not have forecastComplete or forecastCompleteWithError flags\n  restForecasts:( trip ) ->\n    @forecastsPending  = 0\n    @forecastsCount    = 0\n    for own name, town of trip.towns\n      date             = new Date()\n      town.date        = date\n      town.time        = town.date.getTime()\n      #town.isoDateTime = Util.isoDateTime(date)\n      @forecastsPending++\n    for own name, town of trip.towns\n      @rest.forecastByTown( name, town, @doTownForecast, @onTownForecastError )\n    return\n\n  doSegments:( args, segments ) =>\n    trip            = @trip()\n    trip.travelTime = segments.travelTime\n    trip.segments   = []\n    trip.segmentIds = []\n    for own key, seg of segments.segments\n      id  = 0\n      num = 0\n      [id,num]  = trip.segIdNum( key )\n      # console.log( 'Model.doSegments id num', { id:id, num:num, beg:seg.StartMileMarker, end:seg.EndMileMarker } )\n      if trip.segInTrip( seg )\n        seg['segId'] = num\n        seg.num = num\n        trip.segments.  push( seg )\n        trip.segmentIds.push( num )\n    @segmentsComplete = true\n    # console.log( 'Model.doSegments segmenIds', trip.segmentIds )\n    @checkComplete()\n    return\n\n  doConditions:( args, conditions ) =>\n    @trip().conditions  = conditions\n    @conditionsComplete = true\n    @checkComplete()\n    return\n\n  doDeals:( args, deals ) =>\n    @trip().deals = deals\n    @dealsComplete = true\n    @checkComplete()\n    return\n\n  doMilePosts:( args, milePosts ) =>\n    @milePosts = milePosts\n    @trip().milePosts = milePosts\n    @milePostsComplete = true\n    @checkComplete()\n    return\n\n  doForecasts:( args, forecasts ) =>\n    trip = @trip()\n    for own name, forecast of forecasts\n      trip.forecasts[name]       = forecast\n      trip.forecasts[name].index = Trip.Towns[name].index\n    @stream.publish( 'Forecasts', trip.forecasts, 'Model' )\n    return\n\n  doTownForecast:( args, forecast ) =>\n    name                       = args.name\n    trip                       = @trip()\n    trip.forecasts[name]       = forecast\n    trip.forecasts[name].index = Trip.Towns[name].index\n    @publishForecastsWhenComplete( trip.forecasts )\n    return\n\n  onSegmentsError:( obj ) =>\n    console.error( 'Model.onSegmentError()', obj )\n    @segmentsCompleteWithError = true\n    @errorsDetected()\n    return\n\n  onConditionsError:( obj ) =>\n    console.error( 'Model.onConditionsError()', obj )\n    @conditionsCompleteWithError = true\n    @errorsDetected()\n    return\n\n  onDealsError:( obj ) =>\n    console.error( 'Model.onDealsError()', obj )\n    @dealsCompleteWithError = true\n    @errorsDetected()\n    return\n\n  onForecastsError:( obj ) =>\n    console.error( 'Model.onForecastsError()', { name:obj.args.name } )\n    return\n\n  onTownForecastError:( obj ) =>\n    name = obj.args.name\n    console.error( 'Model.townForecastError()', { name:name } )\n    @publishForecastsWhenComplete( @trip().forecasts ) # We push on error because some forecasts may have made it through\n    return\n\n  publishForecastsWhenComplete:( forecasts ) ->\n    @forecastsCount++\n    if @forecastsCount is @forecastsPending\n      @stream.publish( 'Forecasts', forecasts )\n      @forecastsPending = 0 # No more pending forecasts after push\n    return\n\n  onMilePostsError:( obj ) =>\n    console.error( 'Model.onMilePostsError()', obj )\n    @milePostsCompleteWithError = true\n    @errorsDetected()\n    return\n\n  errorsDetected:() =>\n    if( (@segmentsComplete   or @segmentsCompleteWithError)   and\n        (@conditionsComplete or @conditionsCompleteWithError) and\n        (@dealsComplete      or @dealsCompleteWithError)      and\n        (@milePostsComplete  or @milePostsCompleteWithError)  and\n         @dataSource is 'RestThenLocal' and @first )\n      @doTripLocal( @trip() )\n    else\n      console.error( 'Model.errorsDetected access data unable to proceed with trip' )\n    return\n\nexport default Model"
  ]
}
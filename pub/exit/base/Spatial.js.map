{
  "version": 3,
  "file": "Spatial.js",
  "sourceRoot": "../../../src/exit/base",
  "sources": [
    "Spatial.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util  from '../util/Util.js'\nimport Data  from '../base/Data.js'\n\n# Provides Spatial Geometry for Trip\n# Instanciated for each Trip for direct access to Trip data\n\nclass Spatial\n\n  Spatial.EarthRadiusInMiles  = 3958.761\n  Spatial.EarthRadiusInMeters = 6371000\n  Spatial.KiloMetersToMiles   = 0.621371\n  Spatial.MetersToFeet        = 3.28084\n  Spatial.MetersPerSecToMPH   = 0.44704  # 5280 / ( Spatial.MetersToFeet * 3600 )\n  Spatial.MaxAgePosition      = 0        # 600000 One Minute\n  Spatial.TimeOutPosition     = 5000     # 600000 One Minute\n  Spatial.EnableHighAccuracy  = true\n  Spatial.PushLocationsOn     = false\n\n  @radians:( deg ) -> deg * 0.01745329251996 # deg * PI / 180\n  @cos:(     deg ) -> Math.cos(Spatial.radians(deg))\n\n  # Class Method called as Spatial.direction\n  # Lot of boilerplate because @direction can be called from anywhere\n  @direction:( source, destination ) ->\n    hasSourceDesitnation = source? and source isnt '?' and destination and destination isnt '?'\n    if hasSourceDesitnation\n      if Data.DestinationsMile[source] >= Data.DestinationsMile[destination]  then 'West' else 'East'\n    else\n      console.error( 'Spatial.direction() source and/or destination missing so returning West' )\n      'West'\n\n  constructor:( @stream, @trip ) ->\n    @google = window['google']\n    @subscribe()\n    Util.noop( @pushLocations, @pushNavLocations, @pushGeoLocators, @pushAddressForLatLon, @mileSegs )\n    Util.noop( @mileLatLonSpherical, @mileLatLon2 )\n    \n    \n  subscribe:() =>\n    @stream.subscribe( 'Location', 'Spatial', (location) => @onLocation( location ) )\n\n  onLocation:( location ) =>\n    console.log( 'Spatial.onLocation', location )\n\n  segInTrip:( seg ) ->\n    begMileSeg = Util.toFloat(seg['StartMileMarker'])\n    endMileSeg = Util.toFloat(seg['EndMileMarker'])\n    inTrip = switch @trip.direction\n      when 'East', 'North'\n        @trip.begMile() - 0.5 <= begMileSeg and endMileSeg <= @trip.endMile() + 0.5\n      when 'West' or 'South'\n        @trip.begMile() + 0.5 >= begMileSeg and endMileSeg >= @trip.endMile() - 0.5\n    #console.log( 'Spatial.segInTrip 2', { inTrip:inTrip, begMileTrip:@trip.begMile(), begMileSeg:begMileSeg,\n    # endMileSeg:endMileSeg, endMileTrip:@trip.endMile() } )\n    inTrip\n\n  segIdNum:( key ) ->\n    id  = \"\"\n    num = 0\n    len = key.length\n    if len >= 2 and 'id' is key.substring(0,2)\n      id    = key\n      num   = Util.toInt( key.substring(2,key.length) )\n    else\n      console.error( 'Spatial.segIdNum() unable to parse key for Segment number', key )\n    [id,num]\n\n  locationFromPosition:( position ) ->\n    location = { lat:position.coords.latitude, lon:position.coords.longitude, time:Util.toTime() }\n    location.elev    = position.coords.elevation*Spatial.MetersToFeet if Util.isNum( position.coords.elevation )\n    location.heading = position.heading                               if Util.isNum( position.coords.heading   )\n    location.speed   = position.speed*Spatial.MetersPerSecToMPH       if Util.isNum( position.coords.speed     )\n    location\n\n  locationFromGeo:( geo ) ->\n    location = { lat:geo.coords.latitude, lon:geo.coords.longitude, time:Util.toTime() }\n    location.elev         = geo.coords.elevation*Spatial.MetersToFeet if Util.isNum( geo.coords.elevation     )\n    location.heading      = geo.heading                               if Util.isNum( geo.coords.heading       )\n    location.speed        = geo.speed*Spatial.MetersPerSecToMPH       if Util.isNum( geo.coords.speed         )\n    location.city         = geo.address.city                          if Util.isStr( geo.address.city         )\n    location.town         = geo.address.town                          if Util.isStr( geo.address.town         )\n    location.neighborhood = geo.address.neighborhood                  if Util.isStr( geo.address.neighborhood )\n    location.zip          = geo.address.postalCode                    if Util.isStr( geo.address.postalCode   )\n    location.street       = geo.address.street                        if Util.isStr( geo.address.street       )\n    location.streetNumber = geo.address.streetNumber                  if Util.isStr( geo.address.streetNumber )\n    location.address      = geo['formattedAddress']                   if Util.isStr( geo['formattedAddress']     )\n    location  \n    \n  pushLocations:() ->\n    # if geolocator? then @pushGeoLocators() else @pushNavLocations()\n\n  pushNavLocations:() ->\n    if Spatial.PushLocationsOn then return else Spatial.PushLocationsOn = true\n    onSuccess = (position) =>\n      @stream.publish( 'Location', @locationFromPosition(position), 'Trip' )\n    onError = ( error ) =>\n      console.error( 'Spatia.pushLocation()',' Unable to get your location', error )\n    options = { maximumAge:Spatial.MaxAgePosition, timeout:Spatial.TimeOutPosition, enableHighAccuracy:Spatial.EnableHighAccuracy }\n    navigator.geolocation.watchPosition( onSuccess, onError, options ) # or getCurrentPosition\n\n  pushGeoLocators:() ->\n    geolocator = new @google['maps'].Geolocator() # ???   \n    if Spatial.PushLocationsOn then return else Spatial.PushLocationsOn = true\n    onSuccess = ( geo ) =>\n      @stream.publish( 'Location', @locationFromGeo(geo), 'Trip' )\n    onError = ( error ) =>\n      console.error( 'Spatia.pushLocation()',' Unable to get your location', error )\n    options = { maximumAge:Spatial.MaxAgePosition, timeout:Spatial.TimeOutPosition, enableHighAccuracy:Spatial.EnableHighAccuracy }\n    geolocator.locate( onSuccess, onError, true, options, null )\n\n  # Hold off untill we want to load @google and @google maps\n  pushAddressForLatLon:( latLon ) ->\n    geocoder   = new @google['maps'].Geocoder()\n    geolocator = new @google['maps'].Geolocator() # ??? \n    onReverseGeo = ( results, status ) ->\n      if status is @google['maps']['GeocoderStatus']['OK']\n        geolocator.fetchDetailsFromLookup(results)\n        @stream.publish( 'Location', @locationFromGeo(geolocator.location), 'Spatial' )\n      else\n        console.error( 'Spatial.pushAddressForLatLon() bad status from @google.maps', status )\n    latlng = new @google['maps'].LatLng( latLon.lat, latLon.lon )\n    geocoder.geocode( {'latLng':latlng}, onReverseGeo )\n\n  seg:( segNum ) ->\n    for segment in @trip.segments\n      return segment if segment.num is segNum\n    undefined\n\n  milePosts:() ->\n    array = []\n    miles = @trip.milePosts.features[0].properties.Milepost\n    for i in [1...@trip.milePosts.features.length]\n      latLon1 = @trip.milePosts.features[i-1].geometry.coordinates\n      latLon2 = @trip.milePosts.features[i  ].geometry.coordinates\n      post    = @trip.milePosts.features[i  ].properties.Milepost\n      mile    = @mileLatLonFCC( latLon1[1], latLon1[0], latLon2[1], latLon2[0] )\n      miles  += mile\n      obj    = { mile:Util.toFixed(mile,2), miles:Util.toFixed(miles,2), post:post }\n      array.push(obj)\n    json = JSON.stringify(array)\n    Util.dbg( json )\n    miles\n\n  mileSeg:( seg ) ->\n    mile = 0\n    for i in [1...seg['latlngs'].length]\n      latlngs = seg['latlngs']\n      mile += @mileLatLonFCC( latlngs[i-1][0], latlngs[i-1][1], latlngs[i][0], latlngs[i][1] )\n    mile\n\n  mileSegs:() ->\n    array = []\n    miles = Util.toFloat(@trip.segments[0]['StartMileMarker'])\n    for seg in @trip.segments\n      mile   = @mileSeg(seg)\n      miles -= mile\n      beg    = Util.toFloat(seg['StartMileMarker'])\n      end    = Util.toFloat(seg['EndMileMarker'])\n      dist   = Util.toFixed(Math.abs(end-beg))\n      obj    = { num:seg.num, mile:Util.toFixed(mile,2), dist:dist, beg:seg['StartMileMarker'], end:seg['EndMileMarker'], miles:miles }\n      array.push(obj)\n    json = JSON.stringify(array)\n    Util.dbg( json )\n    miles\n\n  # FCC formula derived from the binomial series of Clarke 1866 reference ellipsoid). See Wikipedia:Geographical distance\n  mileLatLonFCC:( lat1, lon1, lat2, lon2 ) ->\n    cos     = Spatial.cos\n    mLat    = ( lat2 + lat1 ) * 0.5 # Midpoint\n    dLat    =   lat2 - lat1\n    dLon    =   lon2 - lon1\n    k1      = 111.13209           - 0.56605*cos(2*mLat) + 0.00120*cos(4*mLat)\n    k2      = 111.41513*cos(mLat) - 0.09455*cos(3*mLat) + 0.00012*cos(5*mLat)\n    Spatial.KiloMetersToMiles * Math.sqrt( k1*k1*dLat*dLat + k2*k2*dLon*dLon )\n\n  # This is a fast approximation formula for small distances. See Wikipedia:Geographical distance\n  mileLatLonSpherical:( lat1, lon1, lat2, lon2 ) ->\n    radians = Spatial.radians\n    mLat    = radians( lat2 + lat1 ) * 0.5 # Midpoint\n    dLat    = radians( lat2 - lat1 )\n    dLon    = radians( lon2 - lon1 )\n    Spatial.EarthRadiusInMiles * Math.sqrt( dLat*dLat + dLon*dLon*Math.cos(mLat) )\n\n  # This may provide a better result, but  have not a proper reference\n  mileLatLon2:(lat1, lon1, lat2, lon2 ) ->\n    radians = Spatial.radians\n    dLat    = radians(lat2 - lat1)\n    dLon    = radians(lon2 - lon1)\n    a = Math.sin(dLat*0.5) ** 2 + Math.cos(radians(lat1)) * Math.cos(radians(lat2)) * Math.sin(dLon*0.5) ** 2\n    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    Spatial.EarthRadiusInMiles * c # 6371000 * c  returns meters\n\n`export default Spatial`\n\n"
  ]
}
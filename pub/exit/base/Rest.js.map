{
  "version": 3,
  "file": "Rest.js",
  "sourceRoot": "../../../src/exit/base",
  "sources": [
    "Rest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport $    from 'jquery'\nimport Util from '../util/Util.js'\n\nclass Rest\n\n  constructor:( @stream  ) ->\n    @localURL      = window.location.href + 'assets/'\n    @jessURL       = \"https://exit-now-admin-jesseporter32.c9.io/\"\n    @forecastIoURL = \"https://api.forecast.io/forecast/\"\n    @forecastIoKey = '2c52a8974f127eee9de82ea06aadc7fb'\n    @currURL       = @localURL\n    @segmentURL    = @currURL + \"api/segment\"\n    @conditionsURL = @currURL + \"api/state\"\n    @dealsURL      = @currURL + \"api/deals\"\n    @cors          = 'json' # jsonp for different origin\n    @subscribe()\n    Util.noop( @jessURL, @accept, @jsonParse )\n\n  subscribe:() ->\n    #@stream.subscribe( 'RequestSegments', 'Rest', (query) => @requestSegmentsBy( query, doSegments, # onSegmentsError ) )\n    #@stream.subscribe( 'RequestConditionsBy', 'Rest', (query) =>  @requestConditionsBy( query, doConditions, onConditionsError ) )\n    #@stream.subscribe( 'RequestDealsBy',      'Rest', (query) =>  @requestDealsBy(      query, doDeals,      onDealsError      ) )\n    \n  segmentsFromLocal:( direction, onSuccess, onError ) ->\n    url  = \"#{@localURL}Segments#{direction}.json\"\n    args = { url:url, direction:direction }\n    @get( url, 'Segments', args, onSuccess, onError  )\n    return\n\n  conditionsFromLocal:( direction, onSuccess, onError ) ->\n    url  = \"#{@localURL}Conditions#{direction}.json\"\n    args = { url:url, direction:direction }\n    @get( url, 'Conditions', args, onSuccess, onError  )\n    return\n\n  # At this point Deals are not queurid by direction\n  dealsFromLocal:( direction, onSuccess, onError ) ->\n    url  = \"#{@localURL}Deals.json\"\n    args = { url:url, direction:direction }\n    @get( url, 'Deals', args, onSuccess, onError )\n    return\n\n  milePostsFromLocal:( onSuccess, onError ) ->\n    url  = \"#{@localURL}I70Mileposts.json\"\n    args = { url:url }\n    @get( url, 'Mileposts', args, onSuccess, onError )\n    return\n\n  # Like the other fromLocal methods this is plural,\n  #   because it gets all the forecasts for all the towns\n  forecastsFromLocal:( onSuccess, onError ) ->\n    url  = \"#{@localURL}Forecasts.json\"\n    args = { url:url }\n    @get( url, 'Forecasts', args, onSuccess, onError )\n    return\n\n  segmentsByPreset:( preset, onSuccess, onError  ) ->\n    args = { preset:preset }\n    url  = \"#{@segmentURL}?start=1,1&end=1,1&preset=#{preset}\"\n    @get( url, 'Segments', args, onSuccess, onError )\n    return\n\n  conditionsBySegments:( segments, onSuccess, onError  ) ->\n    args = { segments:segments }\n    csv  = @toCsv( segments )\n    url  = \"#{@conditionsURL}?segments=#{csv}\"\n    @get( url, 'Conditions', args, onSuccess, onError )\n    return\n\n  deals:( latlon, segments, onSuccess, onError  ) ->\n    args = { segments:segments, lat:latlon[0], lon:latlon[1] }\n    csv  = @toCsv( segments )\n    url  = \"#{@dealsURL}?segments=#{csv}&loc=#{latlon[0]},#{latlon[1]}\"\n    @get( url, 'Deals', args, onSuccess, onError )\n    return\n\n  # Unlike the other rest methods this is singular,\n  #   because it has to be called for each towm with its town.lon town.lat and town.time\n  forecastByTown:( name, town, onSuccess, onError ) ->\n    args = {  name:name, town:town, lat:town.lat, lon:town.lon, time:town.time, hms:Util.toHMS(town.time) }\n    #console.log( 'Rest.forecastByTown', args )\n    #url  = \"\"\"#{@forecastIoURL}#{@forecastIoKey}}/#{town.lat},#{town.lon}\"\"\"  # ,#{town.time}\n    #@get( url, 'Forecast', args, onSuccess, onError )\n    @getForecast( args, onSuccess, onError )\n    return\n\n  getForecast:( args, onSuccess, onError ) ->\n    town = args.town\n    key = '2c52a8974f127eee9de82ea06aadc7fb'\n    url = \"\"\"https://api.forecast.io/forecast/#{key}/#{town.lat},#{town.lon}\"\"\" # ,#{town.isoDateTime}\n    settings = { url:url, type:'GET', dataType:'jsonp', contentType:'text/plain' }\n    settings.success = ( json, textStatus, jqXHR ) =>\n      Util.noop( textStatus, jqXHR )\n      onSuccess( args, json )\n    settings.error = ( jqXHR, textStatus, errorThrown ) ->\n      Util.noop( errorThrown )\n      onError( { url:url, args:args, from:'Forecast' } )\n    $.ajax( settings )\n\n\n  # Unlike the other rest methods this is singular,\n  #   because it has to be called for each lon lat and time\n  forecastByLatLonTime:( lat, lon, time, onSuccess, onError ) ->\n    args = { lat:lat, lon:lon, time:Util.toTime(time) }\n    url  = \"\"\"#{@forecastIoURL}#{@forecastIoKey}}/#{lat},#{lon},#{time}\"\"\"\n    @get( url, 'Forecast', args, onSuccess, onError )\n    return\n\n  requestSegmentsBy:( query, onSuccess, onError  ) ->\n    Util.noop( 'Stream.requestSegmentsBy', query, onSuccess, onError )\n    return\n\n  requestConditionsBy:( query, onSuccess, onError  ) ->\n    Util.noop( 'Stream.requestConditionsBy', query, onSuccess, onError )\n    return\n\n  requestDealsBy:( query, onSuccess, onError  ) ->\n    Util.noop( 'Stream.requestDealsBy', query, onSuccess, onError )\n    return\n\n  segmentsByLatLon:( slat, slon, elat, elon, onSuccess, onError ) ->\n    args = { slat:slat, slon:slon, elat:elat, elon:elon }\n    url  = \"#{@segmentURL}?start=#{slat},#{slon}&end=#{elat},#{elon}\"\n    @get( url, 'Segments', args, onSuccess, onError )\n    return\n\n  segmentsBySegments:( segments, onSuccess, onError ) ->\n    args = { segments:segments }\n    csv  = @toCsv( segments )\n    url  = \"#{@segmentURL}?segments=#{csv}\"\n    @get( url, 'Segments', args, onSuccess, onError )\n    return\n\n  # Date is format like 01/01/2015\n  conditionsBySegmentsDate:( segments, date, onSuccess, onError ) ->\n    args = { segments:segments, date:date }\n    csv  = @toCsv( segments )\n    url  = \"#{@conditionsURL}?segments=#{csv}&setdate=#{date}\"\n    @get( url, 'Conditions', args, onSuccess, onError )\n    return\n\n  dealsByUrl:( url, onSuccess, onError ) ->\n    console.log( 'isCall', typeof(onSuccess), onSuccess? )\n    @get( url, 'Deals', {}, onSuccess, onError  )\n    return\n\n  # Needs work\n  accept:( userId, dealId, convert, onSuccess, onError ) ->\n    args = { userId:userId, dealId:dealId, convert:convert }\n    url  = \"#{@dealsURL}?userId=#{userId}&_id=#{dealId}&convert=#{convert}\"\n    @post( url, 'Accept', args, onSuccess, onError )\n    return\n\n  get:( url, from, args, onSuccess, onError ) ->\n    settings = { url:url, type:'GET', dataType:@cors, contentType:'application/json; charset=utf-8' }\n    settings.success = ( json, textStatus, jqXHR ) =>\n      Util.noop( textStatus, jqXHR )\n      onSuccess( args, json )\n      return\n    settings.error = ( jqXHR, textStatus, errorThrown ) =>\n      Util.noop( errorThrown )\n      console.error( 'Rest.'+from, { url:url, args:args, text:textStatus } )\n      onError( { url:url, args:args, from:from } )\n      return\n    $.ajax( settings )\n    return\n\n  # Needs work\n  post:( url, from, args, onSuccess, onError ) ->\n    settings = { url:url, type:'POST', dataType:'jsonp' } # , contentType:'text/plain'\n    settings.success = ( response, textStatus, jqXHR ) =>\n      Util.noop( textStatus, jqXHR )\n      onSuccess( args, response ) if onSuccess?\n    settings.error = ( jqXHR, textStatus, errorThrown ) =>\n      Util.noop( errorThrown )\n      console.error( 'Rest.'+from, { url:url, text:textStatus } )\n      onError( { url:url, args:args, from:from } )\n    $.ajax( settings )\n    return\n\n  toCsv:( array ) ->\n    csv = ''\n    for a in array\n      csv += a.toString() + ','\n    csv.substring( 0, csv.length-1 ) # Trim last comma\n\n  segIdNum:( segment ) ->\n    id  = \"\"\n    num = 0\n    for own key, obj of segment\n      len = key.length\n      if len >= 2 and 'id' is key.substring(0,1)\n        id    = key\n        num   = key.substring(0,1)\n    [id,num]\n\n  logSegments:( args, obj ) =>\n    args.size = segments.length\n    segments = obj.segments\n    console.log( 'logSegments args', args )\n    for segment in segments\n      id = 0\n      num = 0\n      [id,num] = @segIdNum( segment )\n      console.log( 'logSegment', { id:id, num:num, name:segment.name } )\n\n  logConditions:( args, conditions ) =>\n    args.size = conditions.length\n    console.log( 'logConditions args',  args )\n    console.log( 'logConditions conds',  )\n    for c in conditions\n      cc = c['Conditions']\n      console.log( '  condition', { SegmentId:c['SegmentId'], TravelTime:cc['TravelTime'], AverageSpeed:cc['AverageSpeed'] } )\n      console.log( '  weather', cc['Weather'] )\n\n  logDeals:( args, deals ) =>\n    args.size = deals.length\n    console.log( 'logDeals args',  args )\n    for d in deals\n      dd = d['dealData']\n      console.log( '  ', { segmentId:dd['segmentId'], lat:d['lat'], lon:d['lon'],  buiness:d['businessName'], description:d['name'] } )\n\n  logMileposts:( args, mileposts ) =>\n    args.size = mileposts.length\n    console.log( 'logMileposts args',  args )\n    for milepost in mileposts\n      console.log( '  ', milepost )\n\n  logForecasts:( args, forecasts ) =>\n    args.size = forecasts.length\n    console.log( 'logForecasts args',  args )\n    for forecast in forecasts\n      console.log( '  ', forecast )\n\n  # Deprecated\n  jsonParse:( url, from, args, json, onSuccess ) ->\n    json = json.toString().replace(/(\\r\\n|\\n|\\r)/gm,\"\")  # Remove all line breaks\n    console.log( '--------------------------' )\n    console.log( json )\n    console.log( '--------------------------' )\n    try\n      objs = JSON.parse(json)\n      onSuccess( args, objs )\n    catch error\n      console.error( 'Rest.jsonParse()', { url:url, from:from, args:args, error:error } )\n\n  ###\n   curl 'https://api.forecast.io/forecast/2c52a8974f127eee9de82ea06aadc7fb/39.759558,-105.654065?callback=jQuery21308299770827870816_1433124323587&_=1433124323588'\n\n  # \"\"\"https://api.forecast.io/forecast/#{key}/#{loc.lat},#{loc.lon},#{loc.time}\"\"\"\n  ###    \n  \nexport default Rest"
  ]
}
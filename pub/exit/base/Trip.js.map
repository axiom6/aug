{
  "version": 3,
  "file": "Trip.js",
  "sourceRoot": "../../../src/exit/base",
  "sources": [
    "Trip.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util    from '../util/Util.js'\nimport Data    from '../Data.js'\nimport Spatial from '../Spatial.js'\n\nclass Trip\n\n  # Weather Forecast Locations\n  Trip.Towns = {\n    \"Evergreen\"    : { index:1, lon:-105.334724, lat:39.701735, name:\"Evergreen\"      }\n    \"US40\"         : { index:2, lon:-105.654065, lat:39.759558, name:\"US40\"           }\n    \"EastTunnel\"   : { index:3, lon:-105.891111, lat:39.681757, name:\"East Tunnel\"    }\n    \"WestTunnel\"   : { index:4, lon:-105.878342, lat:39.692400, name:\"West Tunnel\"    }\n    \"Silverthorne\" : { index:5, lon:-106.072685, lat:39.624160, name:\"Silverthorne\"   }\n    \"CopperMtn\"    : { index:6, lon:-106.147382, lat:39.503512, name:\"Copper Mtn\"     }\n    \"VailPass\"     : { index:7, lon:-106.216071, lat:39.531042, name:\"Vail Pass\"      }\n    \"Vail\"         : { index:8, lon:-106.378767, lat:39.644407, name:\"Vail\"           } }\n\n  constructor:( @stream, @model, @name, @source, @destination  ) ->\n\n    @eta            = -1\n    @travelTime     = -1 # Set by travelTime in preset Segments\n    @recommendation = '?'\n    @preset         = -1\n\n    @segmentIdsAll  = []\n    @segmentIds     = []\n\n    @segments       = []\n    @conditions     = []\n    @deals          = []\n    @towns          = Trip.Towns\n    @forecasts      = {}\n\n    @begTown        = @toTown( @source,      'Source'      )\n    @endTown        = @toTown( @destination, 'Destination' )\n    @spatial        = new Spatial( @stream, @ )\n    @direction      = Spatial.direction( @source, @destination )\n    @initByDirection( @direction )\n\n  toTown:( name, role ) ->\n    { name:name, role:role, mile:Data.DestinationsMile[name] }\n\n  initByDirection:( direction ) ->\n    switch direction\n      when 'West'\n        @preset        = 2\n        @segmentIdsAll = Data.WestSegmentIds\n      when 'East'\n        @preset        = 1\n        @segmentIdsAll = Data.EastSegmentIds\n      # when 'North'\n      # when 'South'\n      else\n        console.error( 'Trip unknown direction', direction )\n\n  begMile:() ->\n    @begTown.mile\n\n  endMile:() ->\n    @endTown.mile\n\n  segInTrip:( seg ) ->\n    @spatial.segInTrip( seg )\n\n  segIdNum:( key ) ->\n    @spatial.segIdNum( key )\n\n  launch:() ->\n    @eta            = @etaFromCondtions()\n    @recommendation = @makeRecommendation()\n    # @spatial.pushLocations()\n    # @spatial.mileSegs()\n    # @spatial.milePosts()\n    @log( 'Trip.launch()' )\n\n  etaFromCondtions:() =>\n    eta = 0\n    for condition in @conditions\n      eta += Util.toFloat(condition['Conditions']['TravelTime'])\n    eta\n\n  etaHoursMins:() =>\n    Util.toInt(@eta/60) + ' Hours ' + @eta%60 + ' Mins'\n\n  makeRecommendation:( ) =>\n    if @destination is 'Copper Mtn' then 'NO GO' else 'GO'\n\n  getDealsBySegId:( segId ) ->\n    segDeals = []\n    for deal in @deals when @dealHasSegId( deal, segId )\n      segDeals.push( deal )\n    segDeals\n\n  dealHasSegId:( deal, segId ) ->\n    for seq in deal['dealData']['onSegments']\n      return true if seq.segmentId is segId\n    false\n\n  log:( caller ) ->\n    console.log( caller, { source:@source, destination:@destination, direction:@direction, preset:@preset, recommendation:@recommendation, eta:@eta, travelTime:@travelTime } )\n\nexport default Trip"
  ]
}
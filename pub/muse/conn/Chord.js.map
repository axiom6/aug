{
  "version": 3,
  "file": "Chord.js",
  "sourceRoot": "../../../src/muse/conn",
  "sources": [
    "Chord.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as d3 from 'd3';\n\nclass Chord\n\n  constructor:() ->\n\n  ready:() =>\n\n    @matrix = [\n      [11975,  5871, 8916, 2868],\n      [ 1951, 10048, 2060, 6171],\n      [ 8010, 16145, 8090, 8045],\n      [ 1013,   990,  940, 6907] ]\n\n    @range  = [\"#000000\", \"#FFDD89\", \"#957244\", \"#F26223\"]\n\n    @svg    = d3.select(\"svg\")\n    @width  = @svg.attr(\"width\")\n    @height = @svg.attr(\"height\")\n    @outer  = Math.min( @width, @height) * 0.5 - 40\n    @inner  = @outer - 30\n    @format = d3.formatPrefix(\",.0\", 1e3)\n    @chord  = d3.chord().padAngle(0.05).sortSubgroups(@d3.descending)\n    @arc    = d3.arc().innerRadius(@inner).outerRadius(@outer)\n    @ribbon = d3.ribbon().radius(@inner)\n    @color  = d3.scaleOrdinal().domain( d3.range(4) ).range(@range)\n    @g      = @svg.append(\"g\").attr(\"transform\", \"translate(\" + @width / 2 + \",\" + @height / 2 + \")\").datum(@chord(@matrix))\n\n    @group  = @g.append(\"g\")\n      .attr(\"class\", \"groups\")\n      .selectAll(\"g\")\n      .data( (d) => d.groups )\n      .enter().append(\"g\")\n\n    @group.append(\"path\")\n      .style(\"fill\",   (d) => @color(d.index) )\n      .style(\"stroke\", (d) => d3.rgb( @color(d.index)).darker() )\n      .attr(\"d\", @arc )\n\n    @groupTick = @group.selectAll(\".group-tick\")\n      .data(  (d) => @groupTicks(d, 1e3) )\n      .enter().append(\"g\")\n      .attr(\"class\", \"group-tick\")\n      .attr(\"transform\", (d) => \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \") translate(\" + @outer + \",0)\" )\n\n    @groupTick.append(\"line\").attr(\"x2\", 6)\n\n    @groupTick\n      .filter(              (d) -> d.value % 5e3 is 0 ).append(\"text\").attr(\"x\", 8).attr(\"dy\", \".35em\")\n      .attr(\"transform\",    (d) -> ( if d.angle > Math.PI then \"rotate(180) translate(-16)\" else null ) )\n      .style(\"text-anchor\", (d) -> ( if d.angle > Math.PI then \"end\" else null ) )\n      .text( (d) => @format(d.value) )\n\n    @g.append(\"g\")\n      .attr(\"class\", \"ribbons\")\n      .selectAll(\"path\")\n      .data( (chords) -> chords )\n      .enter().append(\"path\")\n      .attr(\"d\", @ribbon )\n      .style(\"fill\",   (d) => @color(d.target.index) )\n      .style(\"stroke\", (d) => d3.rgb( @color(d.target.index)).darker() )\n\n  # Returns an array of tick angles and values for a given group and step.\n  groupTicks:( d, step) ->\n    k = ( d.endAngle - d.startAngle) / d.value\n    d3.range( 0, d.value, step).map( (value) -> { value: value, angle: value * k + d.startAngle } )\n\n`export default Chord`\n\n"
  ]
}
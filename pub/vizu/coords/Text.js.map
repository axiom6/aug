{
  "version": 3,
  "file": "Text.js",
  "sourceRoot": "../../../src/vizu/coords",
  "sources": [
    "Text.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA;;AAAA,OAAO,QAAP,MAAA;;AACA,OAAA;EAAS,kBAAT;EAA6B,iBAA7B;EAAgD,IAAhD;EAAsD,IAAtD;CAAA,MAAA;;AAEM,OAAN,MAAA,KAAA;EAEE,WAAY,KAAA,WAAgB,EAAhB,CAAA;IAAE,IAAC,CAAA;IAAM,IAAC,CAAA;IACpB,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,WAAW,CAAC;IACtB,IAAC,CAAA,IAAD,GAAS,IAAI,IAAJ,CAAU,QAAV;IACT,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,IAAC,CAAA,KAAD,GAAO,IAAlB;EAHU;;EAKZ,QAAS,CAAE,MAAF,EAAU,IAAV,EAAgB,QAAhB,EAA0B,QAA1B,EAAoC,KAApC,EAA2C,KAA3C,CAAA;AACX,QAAA,QAAA,EAAA,QAAA,EAAA;IAAI,QAAA,GAAW,IAAI,kBAAJ,CAAwB,MAAxB,EACT;MAAE,IAAA,EAAK,IAAC,CAAA,IAAR;MAAc,IAAA,EAAK,IAAnB;MAAyB,MAAA,EAAO,IAAA,GAAK,GAArC;MAA0C,YAAA,EAAa;IAAvD,CADS,EAAf;;;IAII,QAAQ,CAAC,kBAAT,CAAA;IACA,QAAA,GAAW,IAAI,iBAAJ,CAAuB;MAAE,KAAA,EAAO;IAAT,CAAvB;IACX,QAAA,GAAW,IAAI,IAAJ,CAAU,QAAV,EAAoB,QAApB;IACX,QAAQ,CAAC,QAAQ,CAAC,CAAlB,GAAsB,QAAQ,CAAC,CAAD;IAC9B,QAAQ,CAAC,QAAQ,CAAC,CAAlB,GAAsB,QAAQ,CAAC,CAAD;IAC9B,QAAQ,CAAC,QAAQ,CAAC,CAAlB,GAAsB,QAAQ,CAAC,CAAD;IAC9B,QAAQ,CAAC,QAAQ,CAAC,CAAlB,GAAsB,QAAQ,CAAC,CAAD;IAC9B,QAAQ,CAAC,QAAQ,CAAC,CAAlB,GAAsB,QAAQ,CAAC,CAAD;IAC9B,QAAQ,CAAC,QAAQ,CAAC,CAAlB,GAAsB,QAAQ,CAAC,CAAD;IAC9B,KAAK,CAAC,GAAN,CAAW,QAAX;WACA;EAfO,CALX;;;EAuBE,SAAU,CAAE,KAAF,EAAS,KAAT,CAAA;AACZ,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA;IAAI,SAAA,GAAY;IACZ,KAAA,uCAAA;;MACE,IAAA,GAAe,iBAAJ,GAAoB,IAAI,CAAC,IAAzB,GAAmC;MAC9C,QAAA,GAAW,IAAC,CAAA,QAAD,CAAW,IAAI,CAAC,MAAhB,EAAwB,IAAxB,EAA8B,IAAI,CAAC,QAAnC,EAA6C,IAAI,CAAC,QAAlD,EAA4D,IAAI,CAAC,KAAjE,EAAwE,KAAxE;MACX,SAAS,CAAC,IAAV,CAAgB,QAAhB;IAHF;WAIA;EANQ;;AAzBZ;;AAiCA,OAAA,QAAe",
  "sourcesContent": [
    "\nimport FontJSON from \"../../../lib/css/font/three/helvetiker_regular.typeface.json\"\nimport { TextBufferGeometry, MeshBasicMaterial, Mesh, Font } from 'three' # TextGeometry,\n\nclass Text\n\n  constructor:( @main, @texts=[] ) ->\n    @klass = @constructor.name\n    @font  = new Font( FontJSON )\n    @main.log( @klass+'()' )\n\n  drawText:( string, size, position, rotation, color, group ) ->\n    textGeom = new TextBufferGeometry( string,\n      { font:@font, size:size, height:size*0.5, bevelEnabled:false } )\n    # bevelThickness: bevelThickness\n    # bevelSize: bevelSize,\n    textGeom.computeBoundingBox()\n    material = new MeshBasicMaterial( { color: color } );\n    textMesh = new Mesh( textGeom, material )\n    textMesh.position.x = position[0]\n    textMesh.position.y = position[1]\n    textMesh.position.z = position[2]\n    textMesh.rotation.x = rotation[0]\n    textMesh.rotation.y = rotation[1]\n    textMesh.rotation.z = rotation[2]\n    group.add( textMesh )\n    textMesh\n\n  # Need to remember what this was coded for\n  drawTexts:( texts, group ) ->\n    textMeshs = []\n    for text in texts\n      size     = if  text.size? then text.size else 100\n      textMesh = @drawText( text.string, size, text.position, text.rotation, text.color, group )\n      textMeshs.push( textMesh )\n    textMeshs\n\nexport default Text"
  ]
}
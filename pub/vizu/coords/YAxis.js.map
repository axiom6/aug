{
  "version": 3,
  "file": "YAxis.js",
  "sourceRoot": "../../../src/vizu/coords",
  "sources": [
    "YAxis.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA;;AAAA,OAAO,IAAP,MAAA;;AACA,OAAA;EAAS,KAAT;CAAA,MAAA;;AAEM,QAAN,MAAA,MAAA;EAEE,WAAY,KAAA,SAAA,CAAA;AACd,QAAA;IADgB,IAAC,CAAA;IAAM,IAAC,CAAA;IACpB,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,WAAW,CAAC;IACtB,EAAA,GAAS,IAAC,CAAA,IAAI,CAAC;IACf,IAAC,CAAA,KAAD,GAAS,IAAI,KAAJ,CAAA;IACT,IAAC,CAAA,OAAO,CAAC,QAAT,CAAmB,EAAE,CAAC,IAAtB,EAA4B,EAAE,CAAC,IAA/B,EAAqC,EAAE,CAAC,IAAxC,EAA8C,EAAE,CAAC,IAAjD,EAAuD,EAAE,CAAC,IAA1D,EAAgE,EAAE,CAAC,IAAnE,EAAyE,MAAzE,EAAiF,IAAC,CAAA,KAAlF;IACA,IAAC,CAAA,QAAD,CAAY,EAAZ,EAAkB,IAAC,CAAA,KAAnB;IACA,IAAC,CAAA,IAAI,CAAC,UAAN,CAAkB,IAAC,CAAA,KAAnB;IACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,IAAC,CAAA,KAAD,GAAO,IAAlB,EAAwB,IAAxB;EAPU;;EASZ,QAAS,CAAE,EAAF,EAAM,KAAN,CAAA;AACX,QAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAI,IAAA,GAAO,IAAI,IAAJ,CAAU,IAAC,CAAA,IAAX;IACP,CAAA,GAAO,EAAE,CAAC;IACV,EAAA,GAAO,CAAC,EAAE,CAAC,IAAH,GAAQ,EAAE,CAAC,IAAZ,CAAA,GAAoB;IAC3B,IAAA,GAAO,EAAA,GAAK;IACZ,GAAA,GAAO,IAAI,CAAC,EAAL,GAAU;AACjB,WAAM,CAAA,IAAK,EAAE,CAAC,IAAd;MACE,IAAC,CAAA,OAAO,CAAC,QAAT,CAAmB,EAAE,CAAC,IAAtB,EAA4B,CAA5B,EAA+B,EAAE,CAAC,IAAlC,EAAwC,EAAE,CAAC,IAA3C,EAAiD,CAAjD,EAAoD,EAAE,CAAC,IAAH,GAAQ,EAA5D,EAAgE,QAAhE,EAA0E,KAA1E;MACA,IAAI,CAAC,QAAL,CAAe,CAAC,CAAC,QAAF,CAAA,CAAf,EAA6B,IAA7B,EAAmC,CAAC,EAAE,CAAC,IAAJ,EAAS,CAAT,EAAW,EAAE,CAAC,IAAH,GAAQ,EAAnB,CAAnC,EAA2D,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAA3D,EAA0E,QAA1E,EAAoF,KAApF;MACA,CAAA,IAAK,EAAE,CAAC;IAHV;EANO;;AAXX;;AAuBA,OAAA,QAAe",
  "sourcesContent": [
    "\nimport Text from './Text.js'\nimport { Group } from 'three'\n\nclass YAxis\n\n  constructor:( @main, @content ) ->\n    @klass = @constructor.name\n    cc     = @main.cartesian\n    @group = new Group()\n    @content.drawLine( cc.xmin, cc.ymin, cc.zmin, cc.xmin, cc.ymax, cc.zmin, 'blue', @group )\n    @annotate(  cc,   @group )\n    @main.addToScene( @group )\n    @main.log( @klass+'()', @ )\n\n  annotate:( cc, group ) ->\n    text = new Text( @main )\n    y    = cc.ymin\n    dy   = (cc.ymax-cc.ymin) * 0.05\n    size = dy * 0.5\n    rot  = Math.PI / 6\n    while y <= cc.xmax\n      @content.drawLine( cc.xmin, y, cc.zmax, cc.xmin, y, cc.zmax+dy, 0xAAAAAA, group )\n      text.drawText( y.toString(), size, [cc.xmin,y,cc.zmax+dy], [rot,rot,rot], 0xAAAAAA, group )\n      y += cc.ytick1\n    return\n\nexport default YAxis"
  ]
}
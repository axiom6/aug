{
  "version": 3,
  "file": "Content.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Content.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { BoxGeometry, Mesh, BufferGeometry, SphereGeometry, Material, AxesHelper,\n         Vector3, Line, LineBasicMaterial, Points, Color, Float32BufferAttribute,\n         PointsMaterial, MeshStandardMaterial, Group, DoubleSide, FrontSide, InstancedMesh,\n         MeshBasicMaterial,  Matrix4 } from 'three'  # MeshLambertMaterial,\n\nimport {vis}   from '../../../lib/pub/draw/Vis.js'\nimport XAxis   from '../coords/XAxis.js'\nimport YAxis   from '../coords/YAxis.js'\nimport ZAxis   from '../coords/ZAxis.js'\nimport Plane   from '../coords/Plane.js'\nimport XYGrid  from '../coords/XYGrid.js'\nimport XZGrid  from '../coords/XZGrid.js'\nimport YZGrid  from '../coords/YZGrid.js'\nimport Surface from './Surface.js'\n\nclass Content\n\n  constructor:( @main ) ->\n    @klass        = @constructor.name\n    @surface      = new Surface( @main )\n    if @main.opts.content?\n      @opts       = @main.opts.content\n      @plane      = @drawPlane()            if @opts.plane?         and @opts.plane\n      @grids      = @drawGrids()            if @opts.grids?         and @opts.grids\n      @axes       = @drawAxes()             if @opts.axes?          and @opts.axes\n      @axesHelper = @drawHelper()           if @opts['axeshelper']? and @opts['axeshelper']\n      @cube       = @drawCube( @opts.cube ) if @opts.cube?\n      @drawRgb()                            if @opts['rgb']?        and @opts['rgb']\n      @drawRbgFaces()                       if @opts['face']?       and @opts['face']\n      @drawHsv( true  )                     if @opts['ysv']?        and @opts['ysv']\n      @drawHsv( false )                     if @opts['hsv']?        and @opts['hsv']\n      @drawHues( @main.pageKey, true  )     if @opts['hues']?       and @opts['hues']\n      @surface.drawHsv()                 if @opts['surface']?    and @opts['surface']\n    else\n      @grids      = @drawGrids()\n      @axes       = @drawAxes()\n    @main.log( @klass+'()', @ )\n\n  drawHelper:() ->\n    axesHelper = new AxesHelper( 20 );\n    @main.addToScene( axesHelper )\n    axesHelper\n\n  drawAxes:() ->\n    axes = {}\n    axes.xAxis = new XAxis( @main, @ )\n    axes.yAxis = new YAxis( @main, @ )\n    axes.zAxis = new ZAxis( @main, @ )\n    axes\n\n  drawGrids:() ->\n    grids = {}\n    grids.xyGrid = new XYGrid( @main, @ )\n    grids.xzGrid = new XZGrid( @main, @ )\n    grids.yzGrid = new YZGrid( @main, @ )\n    grids\n\n  # Need to work out\n  drawPlane:() ->\n    group = new Group()\n    plane = new Plane( @main, group, 'None' )\n    @main.addToScene( group )\n    plane\n\n  drawCube:( opts ) ->\n    boxGeometry = new BoxGeometry( opts.s, opts.s, opts.s )\n    boxMaterial = new MeshStandardMaterial( { color:0x0000FF, emissive:0x0a0a0a, side:DoubleSide } )  # 0xaffe00\n    boxCube     = new Mesh( boxGeometry, boxMaterial )\n    boxCube.position.set( opts.x, opts.y, opts.y )\n    boxCube.castShadow    = true\n    boxCube.receiveShadow = false\n    @main.addToScene( boxCube )\n    boxCube\n\n  drawRgb:() ->\n    radius   = 8\n    i        = 0\n    max      = 256\n    inc      =  32\n    count    = Math.pow((max/inc+1),3)\n    geometry = new SphereGeometry( radius, 16, 16 )\n    material = new MeshBasicMaterial( { transparent:false, side:FrontSide } )\n    inMesh   = new InstancedMesh( geometry, material, count )\n    matrix   = new Matrix4()\n    color    = new Color()\n    group    = new Group()\n    for     r in [0..max] by inc\n      for   g in [0..max] by inc\n        for b in [0..max] by inc\n          i = @rgbSet( r, g, b, matrix, color, inMesh, i )\n    group.add( inMesh )\n    @main.addToScene( group )\n    console.log( 'Content.drawRgbs()', { i:i, count:count } )\n    return\n\n  rgbSet:( r,g,b, matrix, color, inMesh, i ) ->\n    sc = 1.0 / 255.0\n    matrix.setPosition( r, g, b );\n    color.setRGB( r*sc, g*sc, b*sc )\n    inMesh.setMatrixAt( i, matrix )\n    inMesh.setColorAt(  i, color  )\n    # console.log( 'Content.drawYsv()', { r:r, g:g, b:b, rgb:color.getStyle() } )\n    i++\n    i\n\n  drawRbgFaces:() ->\n    radius   = 8\n    i        = 0\n    max      = 256\n    inc      =  32\n    count    = Math.pow((max/inc+1),2)*6\n    geometry = new SphereGeometry( radius, 16, 16 )\n    material = new MeshBasicMaterial( { transparent:false, side:FrontSide } )\n    inMesh   = new InstancedMesh( geometry, material, count )\n    matrix   = new Matrix4()\n    color    = new Color()\n    group    = new Group()\n    i = @rgbRG( matrix, color, inMesh, i, max, inc )\n    i = @rgbRB( matrix, color, inMesh, i, max, inc )\n    i = @rgbGB( matrix, color, inMesh, i, max, inc )\n    group.add( inMesh )\n    @main.addToScene( group )\n    console.log( 'Content.drawRbgFaces()', { i:i, count:count } )\n    return\n\n  rgbRG:( matrix, color, inMesh, i, max, inc ) ->\n    for     r in [0..max] by inc\n      for   g in [0..max] by inc\n        for b in [0, max]\n          i = @rgbSet( r, g, b, matrix, color, inMesh, i )\n    i\n\n  rgbRB:( matrix, color, inMesh, i, max, inc ) ->\n    for     r in [0..max] by inc\n      for   g in [0, max]\n        for b in [0..max] by inc\n          i = @rgbSet( r, g, b, matrix, color, inMesh, i )\n    i\n\n  rgbGB:( matrix, color, inMesh, i, max, inc ) ->\n    for     r in [0, max]\n      for   g in [0..max] by inc\n        for b in [0..max] by inc\n          i = @rgbSet( r, g, b, matrix, color, inMesh, i )\n    i\n\n  # alphaMap:0xFFFFFF } material.alphaMap = 0xFFFFFF Opaque\n  drawHsv:( ysv=true ) ->\n    radius   = 8\n    i        = 0\n    sc       = 1.0 / 255.0\n    hueInc   = if ysv then 45 else 60\n    count    = (360/hueInc)*(100/10+1)*(100/10+1)\n    geometry = new SphereGeometry( radius, 16, 16 )\n    material = new MeshBasicMaterial( { transparent:false, side:FrontSide } )\n    inMesh   = new InstancedMesh( geometry, material, count )\n    matrix   = new Matrix4()\n    color    = new Color()\n    group    = new Group()\n    for     h in [0...360] by hueInc\n      for   s in [0..100]  by 10\n        for v in [0..100]  by 10\n          x = vis.cos(h) * s * 2.0\n          y = vis.sin(h) * s * 2.0\n          z = v              * 2.0\n          matrix.setPosition( x, y, z )\n          hsv = if ysv then [h,s,v,\"HMI\"] else [h,s,v,\"HMIR\"]\n          rgb = vis.rgb( hsv )\n          color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n          inMesh.setMatrixAt( i, matrix )\n          inMesh.setColorAt(  i, color  )\n          # console.log( 'Content.drawYsv()', { h:h, s:s, v:v, rgb:rgb } )\n          i++\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Content.drawYsv()', { i:i, count:count } )\n    return\n\n  drawHues:( pageKey, ysv=true ) ->\n    hue      = vis.hue( pageKey, ysv )\n    radius   = 8\n    i        = 0\n    sc       = 1.0 / 255.0\n    count    = (100/10+1)*(100/10+1)\n    geometry = new SphereGeometry( radius, 16, 16 )\n    material = new MeshBasicMaterial( { transparent:false, side:FrontSide } )\n    inMesh   = new InstancedMesh( geometry, material, count )\n    matrix   = new Matrix4()\n    color    = new Color()\n    group    = new Group()\n    for   s in [0..100]  by 10\n      for v in [0..100]  by 10\n        x = s * 2.0\n        y = v * 2.0\n        z = 0\n        matrix.setPosition( x, y, z )\n        hsv = if ysv then [hue,s,v,\"HMI\"] else [hue,s,v,\"HMIR\"]\n        rgb = vis.rgb( hsv )\n        color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        # console.log( 'Content.drawYsv()', { hue:hue, s:s, v:v, rgb:rgb } )\n        i++\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Content.drawHues()', { i:i, count:count } )\n    return\n\n  drawPoints:( positions, colors, radius, group ) ->\n    geometry = new BufferGeometry()\n    geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) )\n    geometry.setAttribute( 'color',    new Float32BufferAttribute( colors,    3 ) )\n    geometry.computeBoundingSphere()\n    material = new PointsMaterial( { size:radius, vertexColors:true } )\n    points   = new Points( geometry, material )\n    group.add( points )\n    return\n\n  createPoint:( position, color, radius ) ->\n    geometry  = new BufferGeometry()\n    positions = new Float32Array( position )\n    colors    = new Float32Array( color    )\n    geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) )\n    geometry.setAttribute( 'color',    new Float32BufferAttribute( colors,    3 ) )\n    geometry.computeBoundingSphere()\n    material = new PointsMaterial( { size:radius, vertexColors:true } )\n    point    = new Points( geometry, material )\n    @main.addToScene( point )\n    point\n\n  drawLine:( x1, y1, z1, x2, y2, z2, color, group ) ->\n    points = [];\n    points.push( new Vector3( x1, y1, z1 ) )\n    points.push( new Vector3( x2, y2, z2 ) )\n    geometry = new BufferGeometry().setFromPoints( points )\n    material = new LineBasicMaterial(    { color:color } )\n    #aterial = new MeshStandardMaterial( { color:color, emissive:0x0a0a0a, side:DoubleSide } )\n    line     = new Line( geometry, material )\n    line.receiveShadow = true\n    group.add( line )\n    return\n\n  dispose:() ->\n    BufferGeometry.dispose()\n    Material.dispose()\n\nexport default Content\n"
  ]
}
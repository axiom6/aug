{
  "version": 3,
  "file": "Surface.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Surface.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AACA,OAAA;EAAS,GAAT;CAAA,MAAA;;AAEM,UAAN,MAAA,QAAA;EAEE,WAAY,KAAA,CAAA;IAAE,IAAC,CAAA;IACb,IAAC,CAAA,KAAD,GAAW,IAAC,CAAA,WAAW,CAAC;IACxB,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,IAAC,CAAA,KAAD,GAAO,IAAlB,EAAwB,IAAxB;EAFU;;EAIZ,OAAQ,CAAE,MAAF,CAAA;AACV,QAAA;IAAI,GAAA,GAAgB,CAAA;IAChB,GAAG,CAAC,SAAJ,GAAgB;IAChB,GAAG,CAAC,KAAJ,GAAgB,IAAI,KAAK,CAAC,KAAV,CAAA;IAChB,GAAG,CAAC,MAAJ,GAAgB,QAAA,CAAE,GAAF,EAAO,GAAP,CAAA;aAAgB;IAAhB;IAChB,IAAC,CAAA,MAAD,CAAS,GAAT;IACA,IAAC,CAAA,IAAI,CAAC,UAAN,CAAkB,GAAG,CAAC,KAAtB;IACA,IAAC,CAAA,IAAI,CAAC,UAAN,CAAkB,GAAG,CAAC,WAAtB;IACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,mBAAX,EAAgC,GAAhC;EARM;;EAWR,MAAO,CAAE,GAAF,CAAA;AACT,QAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAI,GAAG,CAAC,MAAJ,GAAgB;IAChB,GAAG,CAAC,QAAJ,GAAgB;IAChB,GAAG,CAAC,OAAJ,GAAgB;IAChB,GAAG,CAAC,GAAJ,GAAgB;IAChB,GAAG,CAAC,OAAJ,GAAgB;IAChB,GAAG,CAAC,MAAJ,GAAgB,IAAI,KAAK,CAAC,OAAV,CAAA;IAChB,GAAG,CAAC,MAAJ,GAAgB,IAAI,KAAK,CAAC,OAAV,CAAA;IAChB,GAAG,CAAC,EAAJ,GAAgB,IAAI,KAAK,CAAC,OAAV,CAAA;IAChB,GAAG,CAAC,EAAJ,GAAgB,GAAA,GAAM;IACtB,GAAG,CAAC,MAAJ,GAAgB;IAChB,GAAG,CAAC,MAAJ,GAAgB;IAChB,GAAG,CAAC,MAAJ,GAAgB,GAAA,GAAM,GAAG,CAAC;IAC1B,GAAG,CAAC,MAAJ,GAAgB,GAAG,CAAC,MAAJ,GAAa;IAC7B,GAAG,CAAC,MAAJ,GAAgB,GAAA,GAAM,GAAG,CAAC;IAC1B,IAAC,CAAA,WAAD,CAAc,GAAd;IACA,KAAa,yFAAb;MACE,KAAW,+FAAX;QACE,GAAA,GAAS,GAAA,GAAM,GAAG,CAAC,MAAV,KAAoB,CAAvB,GAA+B,GAA/B,GAAwC,GAAA,GAAM,GAAG,CAAC,MAAJ,GAAW;QAC/D,GAAA,GAAS,GAAA,GAAM,GAAG,CAAC,MAAV,KAAoB,CAAvB,GAA+B,GAA/B,GAAwC,GAAA,GAAM,GAAA,GAAI,KADhE;QAEQ,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,gBAAX,EAA6B;UAAE,GAAA,EAAI,GAAN;UAAW,GAAA,EAAI,GAAf;UAAoB,GAAA,EAAI;QAAxB,CAA7B;QACA,GAAA,GAAM,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAe,GAAf;QACN,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAA,GAAI,GAAJ,GAAQ,GAAG,CAAC,GAAJ,CAAQ,CAAC,GAAD,GAAK,EAAb,CAAxC,EAA0D,CAA1D,EAA6D,GAAA,GAAI,GAAJ,GAAQ,GAAG,CAAC,GAAJ,CAAQ,GAAA,GAAI,EAAZ,CAArE,EALF;MAAA;IADF;IAOA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,kBAAX,EAA+B,GAAG,CAAC,QAAnC;IACA,IAAC,CAAA,aAAD,CAAgB,GAAhB;IACA,IAAC,CAAA,oBAAD,CAAuB,GAAvB;IACA,UAAA,GAAa,CAAA,GAAI,GAAG,CAAC,MAAR,GAAe,CAAf,GAAmB,CAAA,GAAI,GAAG,CAAC,MAAR,GAAiB,GAAG,CAAC,MAArB,GAA4B;IAC5D,OAAO,CAAC,GAAR,CAAa,sBAAb,EACE;MAAE,SAAA,EAAU,GAAG,CAAC,QAAQ,CAAC,MAAb,GAAoB,CAAhC;MAAmC,UAAA,EAAW,GAAG,CAAC,OAAO,CAAC,MAAZ,GAAmB,CAAjE;MAAoE,WAAA,EAAY;IAAhF,CADF;EA3BK;;EA+BP,WAAY,CAAE,GAAF,CAAA;AACd,QAAA,KAAA,EAAA;IAAI,MAAA,GAAqB;IACrB,KAAA,GAAqB,CAAA,GAAI,GAAG,CAAC,MAAR,GAAiB,CAAA,GAAI,GAAG,CAAC,MAAR,GAAiB,GAAG,CAAC;IAC3D,GAAG,CAAC,WAAJ,GAAqB;IACrB,GAAG,CAAC,cAAJ,GAAqB,IAAI,KAAK,CAAC,cAAV,CAA0B,MAA1B,EAAkC,EAAlC,EAAsC,EAAtC;IACrB,GAAG,CAAC,cAAJ,GAAqB,IAAI,KAAK,CAAC,iBAAV,CAA6B;MAAE,WAAA,EAAY,KAAd;MAAqB,IAAA,EAAK,KAAK,CAAC;IAAhC,CAA7B;IACrB,GAAG,CAAC,UAAJ,GAAqB,IAAI,KAAK,CAAC,aAAV,CAAyB,GAAG,CAAC,cAA7B,EAA6C,GAAG,CAAC,cAAjD,EAAiE,KAAjE;IACrB,GAAG,CAAC,YAAJ,GAAqB,IAAI,KAAK,CAAC,OAAV,CAAA;IACrB,GAAG,CAAC,WAAJ,GAAqB,IAAI,KAAK,CAAC,KAAV,CAAA;IACrB,GAAG,CAAC,WAAJ,GAAqB,IAAI,KAAK,CAAC,KAAV,CAAA;IACrB,GAAG,CAAC,WAAW,CAAC,GAAhB,CAAqB,GAAG,CAAC,UAAzB;EAVU;;EAaZ,cAAe,CAAE,GAAF,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAA;AACjB,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAI,EAAA,GAAK,GAAG,CAAC;IACT,KAAS,+CAAT;MACE,IAAc,GAAG,CAAC,OAAJ,CAAa,CAAb,EAAgB,EAAE,CAAC,CAAD,CAAlB,EAAuB,CAAvB,EAA0B,EAAE,CAAC,CAAA,GAAE,CAAH,CAA5B,EAAmC,CAAnC,EAAsC,EAAE,CAAC,CAAA,GAAE,CAAH,CAAxC,CAAd;AAAA,eAAO,CAAA,GAAE,EAAT;;IADF;WAEA,CAAC;EAJY;;EAMf,WAAY,CAAE,GAAF,CAAA;WACV,GAAG,CAAC,QAAQ,CAAC,MAAb,GAAsB;EADZ;;EAGZ,SAAU,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAA;AACZ,QAAA,KAAA,EAAA;IAAI,KAAA,GAAQ,IAAC,CAAA,cAAD,CAAiB,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;IACR,IAAG,KAAA,KAAS,CAAC,CAAb;MACE,KAAA,GAAQ,IAAC,CAAA,WAAD,CAAc,GAAd;MACR,GAAA,GAAM,GAAG,CAAC,GAAJ,CAAS,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,MAAjB,CAAT;MACN,GAAG,CAAC,MAAM,CAAC,IAAX,CAAiB,GAAG,CAAC,CAAJ,GAAM,GAAG,CAAC,EAA3B,EAA+B,GAAG,CAAC,CAAJ,GAAM,GAAG,CAAC,EAAzC,EAA6C,GAAG,CAAC,CAAJ,GAAM,GAAG,CAAC,EAAvD;MACA,GAAG,CAAC,MAAM,CAAC,CAAX,GAAe;MACf,GAAG,CAAC,MAAM,CAAC,CAAX,GAAe;MACf,GAAG,CAAC,MAAM,CAAC,CAAX,GAAe;MACf,GAAG,CAAC,QAAQ,CAAC,IAAb,CAAmB,GAAG,CAAC,MAAM,CAAC,CAA9B,EAAiC,GAAG,CAAC,MAAM,CAAC,CAA5C,EAA+C,GAAG,CAAC,MAAM,CAAC,CAA1D;MACA,GAAG,CAAC,MAAM,CAAC,IAAX,CAAmB,GAAG,CAAC,MAAvB,CAA+B,CAAC,SAAhC,CAAA;MACA,GAAG,CAAC,OAAO,CAAC,IAAZ,CAAmB,GAAG,CAAC,MAAM,CAAC,CAA9B,EAAiC,GAAG,CAAC,MAAM,CAAC,CAA5C,EAA+C,GAAG,CAAC,MAAM,CAAC,CAA1D;MACA,GAAG,CAAC,EAAE,CAAC,CAAP,GAAW,GAAA,GAAM,GAAG,CAAC,MAAV,GAAmB,GAAG,CAAC;MAClC,GAAG,CAAC,EAAE,CAAC,CAAP,GAAW,GAAA,GAAM,GAAG,CAAC,MAAV,GAAmB,GAAG,CAAC;MAClC,GAAG,CAAC,GAAG,CAAC,IAAR,CAAc,GAAG,CAAC,EAAE,CAAC,CAArB,EAAwB,GAAG,CAAC,EAAE,CAAC,CAA/B;MACA,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAbF;;IAcA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,qBAAX,EAAkC;MAAE,KAAA,EAAM,KAAR;MAAe,GAAA,EAAI,GAAnB;MAAwB,GAAA,EAAI,GAA5B;MAAiC,GAAA,EAAI,GAArC;MAA0C,CAAA,EAAE,CAA5C;MAA+C,CAAA,EAAE,CAAjD;MAAoD,CAAA,EAAE;IAAtD,CAAlC;WACA;EAjBQ;;EAmBV,SAAU,CAAE,GAAF,EAAO,GAAP,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAA;IACR,GAAG,CAAC,YAAY,CAAC,WAAjB,CAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;IACA,GAAG,CAAC,WAAW,CAAC,MAAhB,CAAwB,GAAG,CAAC,CAAJ,GAAM,GAAG,CAAC,EAAlC,EAAsC,GAAG,CAAC,CAAJ,GAAM,GAAG,CAAC,EAAhD,EAAoD,GAAG,CAAC,CAAJ,GAAM,GAAG,CAAC,EAA9D;IACA,GAAG,CAAC,UAAU,CAAC,WAAf,CAA4B,GAAG,CAAC,WAAhC,EAA6C,GAAG,CAAC,YAAjD;IACA,GAAG,CAAC,UAAU,CAAC,UAAf,CAA4B,GAAG,CAAC,WAAhC,EAA6C,GAAG,CAAC,WAAjD;IACA,GAAG,CAAC,WAAJ;EALQ;;EAUV,oBAAqB,CAAE,GAAF,CAAA;AACvB,QAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA;IAAI,IAAA,GAAO,IAAI,KAAK,CAAC,cAAV,CAAA;IACP,IAAI,CAAC,QAAL,CAAe,GAAG,CAAC,OAAnB;IACA,IAAI,CAAC,YAAL,CAAmB,UAAnB,EAA+B,IAAI,KAAK,CAAC,sBAAV,CAAkC,GAAG,CAAC,QAAtC,EAAgD,CAAhD,CAA/B;IACA,IAAI,CAAC,YAAL,CAAmB,QAAnB,EAA+B,IAAI,KAAK,CAAC,sBAAV,CAAkC,GAAG,CAAC,OAAtC,EAAgD,CAAhD,CAA/B;IACA,IAAI,CAAC,YAAL,CAAmB,IAAnB,EAA+B,IAAI,KAAK,CAAC,sBAAV,CAAkC,GAAG,CAAC,GAAtC,EAAgD,CAAhD,CAA/B;IACA,IAAI,CAAC,YAAL,CAAmB,OAAnB,EAA+B,IAAI,KAAK,CAAC,sBAAV,CAAkC,GAAG,CAAC,MAAtC,EAAgD,CAAhD,CAA/B;IACA,OAAA,GAAW,IAAI,KAAK,CAAC,iBAAV,CAA6B;MAAE,IAAA,EAAK,KAAK,CAAC,UAAb;MAAyB,YAAA,EAAa,KAAK,CAAC;IAA5C,CAA7B;IACX,QAAA,GAAW,IAAI,KAAK,CAAC,IAAV,CAAgB,IAAhB,EAAsB,OAAtB;IACX,OAAA,GAAW,IAAI,KAAK,CAAC,iBAAV,CAA6B;MAAE,SAAA,EAAU,IAAZ;MAAkB,KAAA,EAAM;IAAxB,CAA7B;IACX,QAAA,GAAW,IAAI,KAAK,CAAC,IAAV,CAAgB,IAAhB,EAAsB,OAAtB;IACX,QAAQ,CAAC,GAAT,CAAe,QAAf;IACA,GAAG,CAAC,KAAK,CAAC,GAAV,CAAe,QAAf;EAZmB,CAjGvB;;;EAiHE,aAAc,CAAE,GAAF,CAAA;AAChB,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAI,CAAA,GAAI,GAAG,CAAC,MAAJ,GAAa;IACjB,KAAU,kDAAV;MACE,EAAA,GAAK,EAAA,GAAK;MACV,EAAA,GAAQ,EAAA,GAAK,GAAG,CAAC,MAAJ,GAAW,CAAnB,GAA0B,EAAA,GAAK,CAA/B,GAAsC;MAC3C,IAAC,CAAA,WAAD,CAAgB,GAAhB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC;MACA,KAAS,0FAAT;QACE,IAAC,CAAA,WAAD,CAAc,GAAd,EAAmB,CAAnB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,CAAlC;MADF;IAJF;EAFY;;EAUd,SAAU,CAAK,GAAL,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,CAAA;IACR,GAAG,CAAC,OAAO,CAAC,IAAZ,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B;EADQ,CA3HZ;;;EAgIE,WAAY,CAAE,GAAF,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,CAAA;AACd,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;IAAI,EAAA,GAAK,EAAA,GAAK;IACV,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS;IACd,EAAA,GAAK,EAAA,GAAK;IACV,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS;IACd,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAJJ;IAKI,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;IACA,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;IACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,uBAAX,EAAoC;MAAE,EAAA,EAAG,EAAL;MAAS,EAAA,EAAG,EAAZ;MAAgB,EAAA,EAAG,EAAnB;MAAuB,EAAA,EAAG,EAA1B;MAA8B,EAAA,EAAG;IAAjC,CAApC;EARU;;EAWZ,WAAY,CAAE,GAAF,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,EAAsB,CAAtB,CAAA;AACd,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;IAAI,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS;IACd,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS,CAAT,GAAa;IAClB,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS;IACd,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS;IACd,EAAA,GAAK,EAAA,GAAK,CAAL,GAAS,CAAT,GAAa;IAClB,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;IACA,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;IACA,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;IACA,IAAC,CAAA,SAAD,CAAY,GAAZ,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;IACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,uBAAX,EAAoC;MAAE,EAAA,EAAG,EAAL;MAAS,CAAA,EAAE,CAAX;MAAc,EAAA,EAAG,EAAjB;MAAqB,EAAA,EAAG,EAAxB;MAA4B,EAAA,EAAG,EAA/B;MAAmC,EAAA,EAAG,EAAtC;MAA0C,EAAA,EAAG;IAA7C,CAApC;EAVU,CA3Id;;;EAyJE,OAAQ,CAAE,MAAF,EAAU,MAAV,EAAkB,OAAlB,CAAA;AACV,QAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAI,IAAA,GAAO;IACP,KAAe,qFAAf;MACE,KAAa,2FAAb;QACE,IAAI,CAAC,IAAL,CAAU,IAAI,KAAK,CAAC,OAAV,CAAkB,GAAlB,EAAsB,GAAtB,EAA0B,OAAA,CAAQ,GAAR,EAAY,GAAZ,CAA1B,CAAV;MADF;IADF;WAGA;EALM;;EAOR,IAAK,CAAE,MAAF,EAAU,EAAV,EAAc,EAAd,EAAkB,GAAlB,CAAA;AACP,QAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA;IAAI,CAAA,GAAS;IACT,MAAA,GAAS,IAAI,KAAK,CAAC,OAAV,CAAA;IACT,KAAA,GAAS,IAAI,KAAK,CAAC,KAAV,CAAA;IACT,KAAW,8FAAX;MACE,KAAS,iGAAT;QACE,CAAA,GAAI,CAAE,CAAA,GAAI,CAAN,CAAA,GAAY;QAChB,MAAM,CAAC,WAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;QACA,KAAK,CAAC,MAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAFR;QAGQ,MAAM,CAAC,WAAP,CAAoB,CAApB,EAAuB,MAAvB;QACA,MAAM,CAAC,UAAP,CAAoB,CAApB,EAAuB,KAAvB;QACA,CAAA;MANF;IADF;WAQA;EAZG,CAhKP;;;EA+KE,OAAQ,CAAE,CAAF,EAAK,CAAL,EAAQ,EAAR,CAAA;AACV,QAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA;IAAI,GAAA,GAAO,CAAA,GAAI;IACX,GAAA,GAAO,CAAA,GAAI;IACX,GAAA,GAAO;IACP,CAAA,GAAO,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAA,GAAe;IACtB,CAAA,GAAO,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAA,GAAe;IACtB,CAAA,GAAO,IALX;;WAOI,EAAE,CAAC,GAAH,CAAQ,CAAR,EAAW,CAAX,EAAc,CAAd;EARM;;EAUR,UAAW,CAAA,CAAA;AACb,QAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,CAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA;IAAI,CAAA,GAAW;IACX,OAAA,GAAW;IACX,OAAA,GAAW;IACX,KAAA,GAAW,OAAA,GAAU;IACrB,QAAA,GAAW,IAAI,KAAK,CAAC,kBAAV,CAA8B,IAAC,CAAA,OAA/B,EAAwC,OAAxC,EAAiD,OAAjD;IACX,QAAA,GAAW,IAAI,KAAK,CAAC,iBAAV,CAA6B;MAAE,WAAA,EAAY,KAAd;MAAqB,IAAA,EAAK,KAAK,CAAC;IAAhC,CAA7B;IACX,MAAA,GAAW,IAAI,KAAK,CAAC,aAAV,CAAyB,QAAzB,EAAmC,QAAnC,EAA6C,CAA7C;IACX,MAAA,GAAW,IAAI,KAAK,CAAC,OAAV,CAAA,EAPf;;IASI,KAAA,GAAW,IAAI,KAAK,CAAC,KAAV,CAAA;IACX,MAAM,CAAC,WAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAVJ;;IAYI,MAAM,CAAC,WAAP,CAAoB,CAApB,EAAuB,MAAvB,EAZJ;;IAcI,IAAC,CAAA,UAAD,CAAa,QAAb;IACA,KAAK,CAAC,GAAN,CAAW,MAAX;IACA,IAAC,CAAA,IAAI,CAAC,UAAN,CAAkB,KAAlB;IACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,sBAAX,EAAmC;MAAE,CAAA,EAAE,CAAJ;MAAO,KAAA,EAAM;IAAb,CAAnC;EAlBS;;EAqBX,UAAW,CAAE,QAAF,CAAA;AACb,QAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA;IAAI,QAAQ,CAAC,kBAAT,CAAA;IACA,OAAA,GAAW,QAAQ,CAAC,YAAT,CAAsB,UAAtB,EADf;;IAGI,QAAA,GAAW,OAAO,CAAC,MAHvB;;;;IAOI,MAAA,GAAa;IACb,OAAO,CAAC,GAAR,CAAa,sBAAb,EAAqC;MAAE,IAAA,EAAK,OAAO,CAAC,KAAf;MAAsB,QAAA,EAAS;IAA/B,CAArC,EARJ;;IAUI,EAAA,GAAK,GAAA,GAAM,MAVf;;AAWI;IAAA,KAAS,0FAAT;MACE,GAAA,GAAO,QAAQ,CAAC,CAAD,CAAG,CAAC,KAAZ,CAAA;MACP,GAAG,CAAC,IAAJ,CAAS,MAAT;MACA,GAAA,GAAM,GAAG,CAAC,GAAJ,CAAS,GAAT;MACN,KAAK,CAAC,MAAN,CAAc,GAAG,CAAC,CAAJ,GAAM,EAApB,EAAwB,GAAG,CAAC,CAAJ,GAAM,EAA9B,EAAkC,GAAG,CAAC,CAAJ,GAAM,EAAxC;MACA,KAAA,GAAQ,IAAI,KAAK,CAAC,KAAV,CAAkB,GAAG,CAAC,CAAtB,EAA0B,GAAG,CAAC,CAA9B,EAAkC,GAAG,CAAC,CAAtC;mBACR,MAAM,CAAC,IAAP,CAAa,KAAb;IANF,CAAA;;EAZS,CA9Mb;;;EAmOE,OAAQ,CAAE,GAAF,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,CAAA;AACV,QAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;IAAI,EAAA,GAAK,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,GAAG,CAAC,QAAQ,CAAC,CAAA,GAAE,CAAF,GAAI,CAAL;IAAxB;IACL,MAAA,GAAS;IACT,EAAA,GAAU,IAAI,KAAK,CAAC,OAAV,CAAmB,EAAA,CAAG,EAAH,EAAM,CAAN,CAAnB,EAA6B,EAAA,CAAG,EAAH,EAAM,CAAN,CAA7B,EAAuC,EAAA,CAAG,EAAH,EAAM,CAAN,CAAvC;IACV,EAAA,GAAU,IAAI,KAAK,CAAC,OAAV,CAAmB,EAAA,CAAG,EAAH,EAAM,CAAN,CAAnB,EAA6B,EAAA,CAAG,EAAH,EAAM,CAAN,CAA7B,EAAuC,EAAA,CAAG,EAAH,EAAM,CAAN,CAAvC;IACV,EAAA,GAAU,IAAI,KAAK,CAAC,OAAV,CAAmB,EAAA,CAAG,EAAH,EAAM,CAAN,CAAnB,EAA6B,EAAA,CAAG,EAAH,EAAM,CAAN,CAA7B,EAAuC,EAAA,CAAG,EAAH,EAAM,CAAN,CAAvC;IACV,MAAM,CAAC,IAAP,CAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB;IACA,IAAA,GAAQ,IAAI,KAAK,CAAC,cAAV,CAAA,CAA0B,CAAC,aAA3B,CAA0C,MAA1C;IACR,GAAA,GAAQ,IAAI,KAAK,CAAC,iBAAV,CAA4B;MAAE,KAAA,EAAO;IAAT,CAA5B;IACR,IAAA,GAAQ,IAAI,KAAK,CAAC,QAAV,CAAoB,IAApB,EAA0B,GAA1B;IACR,GAAG,CAAC,IAAJ,CAAU,IAAV;EAVM;;AArOV,EAHA;;;AAsPA,OAAA,QAAe",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\nimport { vis }    from \"../../../lib/pub/draw/Vis.js\"\n\nclass Surface\n\n  constructor:( @main ) ->\n    @klass   = @constructor.name\n    @main.log( @klass+'()', @ )\n\n  drawHsv:( orient ) ->\n    obj           = {}\n    obj.hexOrient = orient\n    obj.group     = new THREE.Group()\n    obj.valFun    = ( hue, sat ) -> 35\n    @toGeom( obj )\n    @main.addToScene( obj.group )\n    @main.addToScene( obj.sphereGroup )\n    @main.log( 'Surface.drawHsv()', obj )\n    return\n\n  toGeom:( obj ) ->\n    obj.colors    = []\n    obj.vertices  = []\n    obj.normals   = []\n    obj.uvs       = []\n    obj.indices   = []\n    obj.vertex    = new THREE.Vector3()\n    obj.normal    = new THREE.Vector3()\n    obj.uv        = new THREE.Vector2()\n    obj.sc        = 1.0 / 255.0\n    obj.hueNum    = 24\n    obj.satNum    = 10\n    obj.hueInc    = 360 / obj.hueNum\n    obj.huePri    = obj.hueInc * 2\n    obj.satInc    = 100 / obj.satNum\n    @initSpheres( obj )\n    for   hue in [0...360] by obj.hueInc\n      for rad in [0..100]  by obj.satInc\n        sat = if hue % obj.huePri is 0  then rad else rad + obj.satInc/2\n        fac = if hue % obj.huePri is 0  then 1.0 else 1.0 - rad/2000  # 2000 has been determined empiriaclly\n        @main.log( \"Surface.toGeom\", { hue:hue, rad:rad, sat:sat } )\n        val = obj.valFun(hue,sat)\n        @addVertex( obj, hue, sat, val, sat*fac*vis.cos(-hue-90), 0, sat*fac*vis.sin(hue-90) ) # -90 needs adjust\n    @main.log( \"Surface vertices\", obj.vertices )\n    @createIndices( obj )\n    @createBufferGeometry( obj )\n    numIndices = 3 * obj.hueNum/2 + 4 * obj.satNum * obj.hueNum/2\n    console.log( \"Surface.toGeom Two()\",\n      { numVertex:obj.vertices.length/3, numIndices:obj.indices.length/3, calcIndices:numIndices } )\n    return\n\n  initSpheres:( obj ) ->\n    radius             = 2\n    count              = 3 * obj.hueNum + 4 * obj.hueNum * obj.satNum\n    obj.sphereIndex    = 0\n    obj.sphereGeometry = new THREE.SphereGeometry( radius, 16, 16 )\n    obj.sphereMaterial = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    obj.sphereMesh     = new THREE.InstancedMesh( obj.sphereGeometry, obj.sphereMaterial, count )\n    obj.sphereMatrix   = new THREE.Matrix4()\n    obj.sphereColor    = new THREE.Color()\n    obj.sphereGroup    = new THREE.Group()\n    obj.sphereGroup.add( obj.sphereMesh )\n    return\n\n  vertexIndexXYZ:( obj, x, y, z ) ->\n    vs = obj.vertices\n    for i in [0...vs.length] by 3\n      return i/3 if vis.isCoord( x, vs[i], y, vs[i+1], z, vs[i+2] )\n    -1\n\n  vertexIndex:( obj ) ->\n    obj.vertices.length / 3\n\n  addVertex:( obj, hue, sat, val, x, y, z ) ->\n    index = @vertexIndexXYZ( obj, x, y, z )\n    if index is -1\n      index = @vertexIndex( obj )\n      rgb = vis.rgb( [ hue, sat, val, \"HMIR\" ] )\n      obj.colors.push( rgb.r*obj.sc, rgb.g*obj.sc, rgb.b*obj.sc )\n      obj.vertex.x = x\n      obj.vertex.y = y\n      obj.vertex.z = z\n      obj.vertices.push( obj.vertex.x, obj.vertex.y, obj.vertex.z )\n      obj.normal.copy(   obj.vertex ).normalize();\n      obj.normals.push(  obj.normal.x, obj.normal.y, obj.normal.z )\n      obj.uv.x = hue / obj.hueInc / obj.hueNum\n      obj.uv.y = sat / obj.satInc / obj.satNum\n      obj.uvs.push( obj.uv.x, obj.uv.y )\n      @addSphere( obj, rgb, x, y, z )\n    @main.log( \"Surface.addVertex()\", { index:index, hue:hue, sat:sat, val:val, x:x, y:y, z:z } )\n    index\n\n  addSphere:( obj, rgb, x, y, z ) ->\n    obj.sphereMatrix.setPosition( x, y, z )\n    obj.sphereColor.setRGB( rgb.r*obj.sc, rgb.g*obj.sc, rgb.b*obj.sc )\n    obj.sphereMesh.setMatrixAt( obj.sphereIndex, obj.sphereMatrix )\n    obj.sphereMesh.setColorAt(  obj.sphereIndex, obj.sphereColor  )\n    obj.sphereIndex++\n    return\n\n\n\n  createBufferGeometry:( obj ) ->\n    geom = new THREE.BufferGeometry()\n    geom.setIndex( obj.indices )\n    geom.setAttribute( 'position', new THREE.Float32BufferAttribute( obj.vertices, 3 ) )\n    geom.setAttribute( 'normal',   new THREE.Float32BufferAttribute( obj.normals,  3 ) )\n    geom.setAttribute( 'uv',       new THREE.Float32BufferAttribute( obj.uvs,      2 ) )\n    geom.setAttribute( 'color',    new THREE.Float32BufferAttribute( obj.colors,   3 ) )\n    vertMat  = new THREE.MeshBasicMaterial( { side:THREE.DoubleSide, vertexColors:THREE.FaceColors } )\n    geomMesh = new THREE.Mesh( geom, vertMat )\n    wireMat  = new THREE.MeshBasicMaterial( { wireframe:true, color:0x000000 } )\n    wireMesh = new THREE.Mesh( geom, wireMat )\n    geomMesh.add(  wireMesh )\n    obj.group.add( geomMesh )\n    return\n\n  # Assign vertex indexes to create all the triangular face indices\n  createIndices:( obj ) ->\n    n = obj.satNum + 1\n    for i0 in [0...obj.hueNum] by 2\n      i1 = i0 + 1\n      i2 = if i0 < obj.hueNum-2 then i0 + 2 else 0\n      @add3Indices(   obj, n, i0, i1, i2 )\n      for j in [0...obj.satNum]\n        @add4Indices( obj, n, i0, i1, i2, j )\n    return\n\n  addIndice:(    obj, i1, i2, i3 ) ->\n    obj.indices.push( i1, i2, i3 )\n    # @addLine(  obj, i1, i2, i3 )\n    return\n\n  add3Indices:( obj, n, i0, i1, i2 ) ->\n    oo = i0 * n                     \n    se = i0 * n + 1\n    ce = i1 * n\n    ne = i2 * n + 1\n    @addIndice( obj, oo, ce, se )    # We only create 3 face indices\n    @addIndice( obj, oo, ce, ne )\n    @addIndice( obj, ce, se, ne )\n    @main.log( \"Surface.add3Indices()\", { i0:i0, oo:oo, ce:ce, se:se, ne:ne } )\n    return\n\n  add4Indices:( obj, n, i0, i1, i2, j ) ->\n    sw = i0 * n + j\n    se = i0 * n + j + 1\n    ce = i1 * n + j\n    nw = i2 * n + j\n    ne = i2 * n + j + 1\n    @addIndice( obj, ce, sw, se )\n    @addIndice( obj, ce, se, ne )\n    @addIndice( obj, ce, ne, nw )\n    @addIndice( obj, ce, nw, sw )\n    @main.log( \"Surface.add4Indices()\", { i0:i0, j:j, ce:ce, sw:sw, nw:nw, ne:ne, se:se } )\n    return\n\n# xyzs.push(vis.cos(hue)*sat,vis.sin(hue)*sat,0)\n  genHsvs:( hueInc, satInc, valFunc ) ->\n    hsvs = []\n    for     hue in [0...360] by hueInc\n      for   sat in [0..100]  by satInc\n        hsvs.push(new THREE.Vector3(hue,sat,valFunc(hue,sat)))\n    hsvs\n\n  rgbs:( inMesh, nx, ny, inc ) ->\n    i      = 0\n    matrix = new THREE.Matrix4()\n    color  = new THREE.Color()\n    for   x in [0..nx] by inc\n      for y in [0..ny] by inc\n        z = ( x + y ) * 0.5\n        matrix.setPosition( x, y, z )\n        color.setRGB( x, y, z )           # Just a place holder\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        i++\n    i\n\n  # val 0.25*Math.sin( 12*x + vis.time*0.3 ) + 0.25*Math.sin( 12*y + vis.time*0.3 )\n  hmiWave:( u, v, pt ) ->\n    hue  = u * 360\n    sat  = v * 100\n    val  = 50\n    x    = vis.cos(hue) * sat\n    z    = vis.sin(hue) * sat\n    y    = val # * ( 1.0 + vis.sin(16*hue) )\n    # console.log( \"Surface.hmiWave()\", { uv:[u,v], hsv:[hue,sat,val], xyz:[x,y,z] } )\n    pt.set( x, y, z )\n\n  parametric:() ->\n    i        = 0\n    ndeginc  = 12\n    nsatinc  = 10\n    count    = ndeginc * nsatinc\n    geometry = new THREE.ParametricGeometry( @hmiWave, ndeginc, nsatinc );\n    material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, 1 )\n    matrix   = new THREE.Matrix4()\n    # color  = new THREE.Color()\n    group    = new THREE.Group()\n    matrix.setPosition( 0, 0, 0 )\n    #color.setRGB( 128, 128, 128 )\n    inMesh.setMatrixAt( 0, matrix )\n    # inMesh.setColorAt(  0, color  )\n    @applyColor( geometry )\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.parametric()', { i:i, count:count } )\n    return\n\n  applyColor:( geometry ) ->\n    geometry.computeBoundingBox()\n    vertObj  = geometry.getAttribute(\"position\")\n    # faceObj  = geometry.getAttribute(\"normal\")\n    vertices = vertObj.array\n    # faces  = faceObj.array\n    # colorObj = geometry.getAttribute(\"color\")\n    # colors   = colorObj.array\n    colors     = []\n    console.log( \"Surface.applyColor()\", { vlen:vertObj.count, vertices:vertices } )\n    # faceIndices = ['a','b','c','d']                   # faces are indexed using characters\n    sc = 1.0 / 255.0\n    for i in [0...vertices.length]           # first, assign colors to vertices as desired\n      hsv  = vertices[i].slice()\n      hsv.push(\"HMIR\")\n      rgb = vis.rgb( hsv )\n      color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n      color = new THREE.Color(  rgb.r,  rgb.g,  rgb.b )\n      colors.push( color )\n\n  # Not called. Kept as a reference\n  addLine:( obj, i1, i2, i3 ) ->\n    vc = ( i, j ) -> obj.vertices[i*3+j]\n    points = []\n    v1      = new THREE.Vector3( vc(i1,0), vc(i1,1), vc(i1,2) )\n    v2      = new THREE.Vector3( vc(i2,0), vc(i2,1), vc(i2,2) )\n    v3      = new THREE.Vector3( vc(i3,0), vc(i3,1), vc(i3,2) )\n    points.push( v1, v2, v3 )\n    geom  = new THREE.BufferGeometry().setFromPoints( points )\n    mat   = new THREE.LineBasicMaterial({ color: 0x000000 } )\n    line  = new THREE.LineLoop( geom, mat )\n    vis.noop( line )\n    # obj.lineGroup.add( line )\n    return\n\nexport default Surface"
  ]
}
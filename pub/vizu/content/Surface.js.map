{
  "version": 3,
  "file": "Surface.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Surface.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\nimport { vis }    from \"../../../lib/pub/draw/Vis.js\"\n\nclass Surface\n\n  constructor:( @main ) ->\n    @klass   = @constructor.name\n    @main.log( @klass+'()', @ )\n\n  parametric:() ->\n    i        = 0\n    ndeginc  = 12\n    nsatinc  = 10\n    count    = ndeginc * nsatinc\n    geometry = new THREE.ParametricGeometry( @hmiWave, ndeginc, nsatinc );\n    material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, 1 )\n    matrix   = new THREE.Matrix4()\n    # color  = new THREE.Color()\n    group    = new THREE.Group()\n    matrix.setPosition( 0, 0, 0 )\n    #color.setRGB( 128, 128, 128 )\n    inMesh.setMatrixAt( 0, matrix )\n    # inMesh.setColorAt(  0, color  )\n    @applyColor( geometry )\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.parametric()', { i:i, count:count } )\n    return\n\n  drawHsv:() ->\n    radius   = 8\n    i        = 0\n    sc       = 1.0 / 255.0\n    hueInc   = 30\n    satInc   = 10\n    count    = (360/hueInc)*(1+100/satInc)\n    geometry = new THREE.SphereGeometry( radius, 16, 16 )\n    material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.DoubleSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, count )\n    matrix   = new THREE.Matrix4()\n    color    = new THREE.Color()\n    group    = new THREE.Group()\n    val      = 100\n    sc       = 1.0 / 255.0\n    for   hue in [0...360] by hueInc\n      for sat in [0..100]  by satInc\n        x = 2.5 * vis.cos( hue) * sat\n        z = 2.5 * vis.sin(-hue) * sat\n        y = 125 + 125*vis.sin(4*hue)\n        matrix.setPosition( x, y, z )\n        rgb = vis.rgb( [hue,sat,val,\"HMIR\"] )\n        color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        # console.log( 'Content.drawYsv()', { h:h, s:s, v:v, rgb:rgb } )\n        i++\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.drawHsv()', { i:i, count:count } )\n    return\n\n  genHsvsDisc:( hueInc, satInc ) ->\n    hsvs = []\n    xyzs = []\n    for     hue in [0...360] by hueInc\n      for   sat in [0..100]  by satInc\n        hsvs.push([hue,sat,0,\"HMIR\"])\n        xyzs.push(vis.cos(hue)*sat,vis.sin(hue)*sat,0)\n    hsvs\n\n  applyColor:( geometry ) ->\n    geometry.computeBoundingBox()\n    vertObj  = geometry.getAttribute(\"position\")\n    # faceObj  = geometry.getAttribute(\"normal\")\n    vertices = vertObj.array\n    # faces  = faceObj.array\n    # colorObj = geometry.getAttribute(\"color\")\n    # colors   = colorObj.array\n    colors     = []\n    console.log( \"Surface.applyColor()\", { vlen:vertObj.count, vertices:vertices } )\n    # faceIndices = ['a','b','c','d']                   # faces are indexed using characters\n    sc = 1.0 / 255.0\n    for i in [0...vertices.length]           # first, assign colors to vertices as desired\n      hsv  = vertices[i].slice()\n      hsv.push(\"HMIR\")\n      rgb = vis.rgb( hsv )\n      color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n      color = new THREE.Color(  rgb.r,  rgb.g,  rgb.b )\n      colors.push( color )\n\n  \t# copy the colors as necessary to the face's vertexColors array.\n    ###\n    for i in [0...faces.length]\n      face = faces[i]\n      numberOfSides = 3                  # ( face instanceof THREE.Face ) ? 3 : 4\n      for j in [0...numberOfSides]\n        vertexIndex = face[ faceIndices[j] ]\n        face.vertexColors[j] = colors[vertexIndex]  # Not right yet\n    ###\n    return\n\n  rgbs:( inMesh, nx, ny, inc ) ->\n    i      = 0\n    matrix = new THREE.Matrix4()\n    color  = new THREE.Color()\n    for   x in [0..nx] by inc\n      for y in [0..ny] by inc\n        z = ( x + y ) * 0.5\n        matrix.setPosition( x, y, z )\n        color.setRGB( x, y, z )           # Just a place holder\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        i++\n    i\n\n  funcXY:( x, y, pt ) ->\n    pt.set( x, y, (x+y)*0.5 )\n\n  klein:( u, v, pt ) ->\n    u *=     Math.PI\n    v *= 2 * Math.PI\n    u = u * 2\n    x = 0\n    y = 0\n    z = 0\n    if u < Math.PI\n      x =  3 * Math.cos(u) * (1 + Math.sin(u)) + (2 * (1 - Math.cos(u) / 2)) * Math.cos(u) * Math.cos(v)\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v)\n    else\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + (2 * (1 - Math.cos(u) / 2)) * Math.cos(v + Math.PI)\n      z = -8 * Math.sin(u)\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v)\n    pt.set( x, y, z )\n\n  radialWave:( u, v, pt ) ->\n    r  = 100\n    x  = Math.sin(u) * r\n    z  = Math.sin(v / 2) * 2 * r\n    y  = (Math.sin(u * 4 * Math.PI) + Math.cos(v * 2 * Math.PI)) * 2.8\n    pt.set( x, y, z )\n\n  # val 0.25*Math.sin( 12*x + vis.time*0.3 ) + 0.25*Math.sin( 12*y + vis.time*0.3 )\n  hmiWave:( u, v, pt ) ->\n    hue  = u * 30\n    sat  = v * 10\n    x    = vis.cos(hue) * sat\n    y    = vis.sin(hue) * sat\n    z    = 50 * 25*vis.sin( 12*x ) * 25*vis.sin( 12*y )\n    pt.set( x, y, z )\n\nexport default Surface"
  ]
}
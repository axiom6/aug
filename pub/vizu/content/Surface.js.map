{
  "version": 3,
  "file": "Surface.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Surface.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\nimport { vis }    from \"../../../lib/pub/draw/Vis.js\"\n\nclass Surface\n\n  constructor:( @main ) ->\n    @klass   = @constructor.name\n    @main.log( @klass+'()', @ )\n\n  parametric:() ->\n    i        = 0\n    ndeginc  = 12\n    nsatinc  = 10\n    count    = ndeginc * nsatinc\n    geometry = new THREE.ParametricGeometry( @hmiWave, ndeginc, nsatinc );\n    material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, 1 )\n    matrix   = new THREE.Matrix4()\n    # color  = new THREE.Color()\n    group    = new THREE.Group()\n    matrix.setPosition( 0, 0, 0 )\n    #color.setRGB( 128, 128, 128 )\n    inMesh.setMatrixAt( 0, matrix )\n    # inMesh.setColorAt(  0, color  )\n    @applyColor( geometry )\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.parametric()', { i:i, count:count } )\n    return\n\n  drawHsv:() ->\n    group    = new THREE.Group()\n    valFun   = ( hue, sat ) -> 100\n    @toGeom( valFun, group )\n    @main.addToScene( group )\n    @main.log( 'Surface.drawHsv()', {} )\n    return\n\n  toGeom:( valFun, group ) ->\n    colors   = []\n    vertices = []\n    normals  = []\n    # indices  = []\n    sc       = 1.0 / 255.0\n    nHue = 24\n    nSat = 11\n    for   hue in [0...360] by 15\n      for sat in [0..100]  by 10\n        val = valFun(hue,sat)\n        rgb = vis.rgb( [ hue, sat, val, \"HMIR\" ] )\n        colors.push( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n        vertices.push( sat*vis.cos(-hue-90)*2.5, 0, sat*vis.sin(-hue-90)*2.5 )\n        normals.push( 0, 1, 0 ) # Good only for a flat surface\n    console.log( \"Surface vertices\", vertices )\n    indices = @createIndices( nHue, nSat, valFun, colors, vertices, normals )\n\n    geom = new THREE.BufferGeometry()\n    geom.setIndex( indices )\n    geom.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) )\n    geom.setAttribute( 'normal',   new THREE.Float32BufferAttribute( normals,  3 ) )\n    geom.setAttribute( 'color',    new THREE.Float32BufferAttribute( colors,   3 ) )\n    mats = new THREE.MeshBasicMaterial( { side:THREE.DoubleSide, vertexColors:true } )\n    mesh = new THREE.Mesh( geom, mats )\n    group.add( mesh )\n    return\n\n  createIndices:( nHue, nSat, valFun, colors, vertices, normals ) ->\n    sc      = 1.0 / 255.0\n    indices = []\n    vidx = vertices.length / 3\n    vertices.push( 1, 1, 1 )   # White\n    vertices.push( 0, 0, 0 )\n    normals. push( 0, 1, 0 )\n    for   ii in [0...nHue]\n      i = if ii < nHue-1 then ii else 0\n      indices.push( vidx, i*nSat, i*(nSat+1) )\n      for j in [1...nSat-1]\n        ce =      vidx\n        sw = i *  nSat    + j\n        se = i *  nSat    + j + 1\n        nw = i * (nSat+1) + j\n        ne = i * (nSat+1) + j + 1\n        indices.push( ce, sw, nw )\n        indices.push( ce, nw, ne )\n        indices.push( ce, ne, se )\n        indices.push( ce, se, sw )\n        val = valFun(hue,sat)\n        hue = 7.5 * ( i + (i+1) )\n        sat = 5.0 * ( j + (j+1) )\n        val = valFun( sat )\n        rgb = vis.rgb( [ hue, sat, val, \"HMIR\" ] )\n        colors.push( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n        vertices = @ave( sw, nw, ne, se, vertices )\n        normals.push( 0, 1, 0 )\n        vidx++\n        console.log( \"Surface.addIndices One()\",\n          { i:i, j:j, ce:ce, sw:sw, nw:nw, ne:ne, se:se, vidx:vidx, Hue:hue, sat:sat, val:val } )\n    console.log( \"Surface.addIndices() Teo\", indices )\n    indices\n\n  ave:( sw, nw, ne, se, vertices ) ->\n    cc = ( i ) ->\n      0.25 * ( vertices[3*sw+i] + vertices[3*nw+i] + vertices[3*ne+i] + vertices[3*se+i] )\n    vertices.push( cc(0), cc(1), cc(2) )\n    vertices\n\n  createIndices1:( nHue ) ->\n    indices = []\n    for   hueIdx in [0...nHue]\n      a = hueIdx\n      b = if hueIdx < nHue-1 then hueIdx+1  else 0\n      indices.push( 0, a+1, b+1 )\n    console.log( \"Surface.addIndices()\", indices )\n    indices\n\n  addIndices1:( i, j, n, indices ) ->\n    a = i * ( n + 1 ) + ( j + 1 )\n    b = i * ( n + 1 ) + j\n    c = ( i + 1 ) * ( n + 1 ) + j\n    d = ( i + 1 ) * ( n + 1 ) + ( j + 1 )\n\n    # generate two faces (triangles) per iteration\n    indices.push( a, b, d ); # face one\n    indices.push( b, c, d ); # face two\n    return\n\n  toFace:( indice, color, group ) ->\n    console.log( \"Surface.toFace()\", indice )\n    sc   = 1.0 / 255.0\n    rgb  = vis.rgb( [0,100,100,\"HMIR\"] )\n    color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n    face = new THREE.BufferGeometry().setFromPoints( indice )\n    mat  = new THREE.MeshBasicMaterial( { color:color, transparent:false, side:THREE.FrontSide } )\n    mesh = new THREE.Mesh( face, mat )\n    group.add( mesh )\n    return\n    \n  ###\n  console.log( \"Surface.toGeom()\", vertices )\n  toFace:( v1, v2, v3, color, group ) ->\n    console.log( \"Surface.toFace()\", { v1:v1, v2:v2, v3:v3 } )\n    sc   = 1.0 / 255.0\n    rgb  = vis.rgb( [0,100,100,\"HMIR\"] )\n    color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n    face = new THREE.BufferGeometry().setFromPoints( [v1,v2,v3] )\n    mat  = new THREE.MeshBasicMaterial( { color:color, transparent:false, side:THREE.FrontSide } )\n    mesh = new THREE.Mesh( face, mat )\n    group.add( mesh )\n    return\n\n    positions = geometry.getAttribute(\"position\")\n    vertices  = []\n    for i in [0...positions.count]\n      vertex = new THREE.Vector3()\n      vertex.fromBufferAttribute( positions, i );\n      vertices.push( vertex )\n    pointg = new THREE.BufferGeometry().setFromPoints( vertices )\n    pointm = new THREE.PointsMaterial( { color:0x0000FF, size:10 } )\n    points = new THREE.Points( pointg, pointm )\n\n      for   hue in [0...360] by hueInc\n      for sat in [0..100]  by satInc\n        rgb = vis.rgb( [hue,sat,100,\"HMIR\"] )\n        color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n        hsv.setColor( color )\n  hueInc   = 30\n  satInc   = 10\n  valFunc  = ( hue, sat ) ->\n  vis.noop(  hue )\n  sat\n  hsvs     = @genHsvs( hueInc, satInc, valFunc )\n  color    = new THREE.Color()\n  color.setRGB( 0.5, 0.5, 0.5 )\n  geometry.setColor( color )\n  sc       = 1.0 / 255.0\n  # faces    = geometry['convexHull'].faces\n  for hsv in hsvs\n    rgb = vis.rgb( [hsv[0],hsv[1],hsv[2],\"HMIR\"] )\n    color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n    hsv.setColor( color )\n  ###\n\n  drawHsv2:() ->\n    hueInc   = 30\n    hunNum   = 360 / hueInc\n    satInc   = 10\n    satNum   = 100 / satInc + 1\n\n    geometry = new THREE.ParametricGeometry( @hmiWave, hunNum, satNum )\n    material = new THREE.MeshBasicMaterial( { color:0x808080, transparent:false, side:THREE.DoubleSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, count )\n    matrix   = new THREE.Matrix4()\n    group    = new THREE.Group()\n    matrix.setPosition( 0, 0, 0 )\n    inMesh.setMatrixAt( 0, matrix )\n    indices = geometry.getIndex()\n    console.log( \"Surface.drawHsv()\", indices )\n    # for i in [0...indices.length]\n    #  @toFace( indices[i], color, group )\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.drawHsv()', { i:i, count:count } )\n    return\n\n  # xyzs.push(vis.cos(hue)*sat,vis.sin(hue)*sat,0)\n  genHsvs:( hueInc, satInc, valFunc ) ->\n    hsvs = []\n    for     hue in [0...360] by hueInc\n      for   sat in [0..100]  by satInc\n        hsvs.push(new THREE.Vector3(hue,sat,valFunc(hue,sat)))\n    hsvs\n\n  applyColor:( geometry ) ->\n    geometry.computeBoundingBox()\n    vertObj  = geometry.getAttribute(\"position\")\n    # faceObj  = geometry.getAttribute(\"normal\")\n    vertices = vertObj.array\n    # faces  = faceObj.array\n    # colorObj = geometry.getAttribute(\"color\")\n    # colors   = colorObj.array\n    colors     = []\n    console.log( \"Surface.applyColor()\", { vlen:vertObj.count, vertices:vertices } )\n    # faceIndices = ['a','b','c','d']                   # faces are indexed using characters\n    sc = 1.0 / 255.0\n    for i in [0...vertices.length]           # first, assign colors to vertices as desired\n      hsv  = vertices[i].slice()\n      hsv.push(\"HMIR\")\n      rgb = vis.rgb( hsv )\n      color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n      color = new THREE.Color(  rgb.r,  rgb.g,  rgb.b )\n      colors.push( color )\n\n  \t# copy the colors as necessary to the face's vertexColors array.\n    ###\n    for i in [0...faces.length]\n      face = faces[i]\n      numberOfSides = 3                  # ( face instanceof THREE.Face ) ? 3 : 4\n      for j in [0...numberOfSides]\n        vertexIndex = face[ faceIndices[j] ]\n        face.vertexColors[j] = colors[vertexIndex]  # Not right yet\n    ###\n    return\n\n  rgbs:( inMesh, nx, ny, inc ) ->\n    i      = 0\n    matrix = new THREE.Matrix4()\n    color  = new THREE.Color()\n    for   x in [0..nx] by inc\n      for y in [0..ny] by inc\n        z = ( x + y ) * 0.5\n        matrix.setPosition( x, y, z )\n        color.setRGB( x, y, z )           # Just a place holder\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        i++\n    i\n\n  funcXY:( x, y, pt ) ->\n    pt.set( x, y, (x+y)*0.5 )\n\n  klein:( u, v, pt ) ->\n    u *=     Math.PI\n    v *= 2 * Math.PI\n    u = u * 2\n    x = 0\n    y = 0\n    z = 0\n    if u < Math.PI\n      x =  3 * Math.cos(u) * (1 + Math.sin(u)) + (2 * (1 - Math.cos(u) / 2)) * Math.cos(u) * Math.cos(v)\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v)\n    else\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + (2 * (1 - Math.cos(u) / 2)) * Math.cos(v + Math.PI)\n      z = -8 * Math.sin(u)\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v)\n    pt.set( x, y, z )\n\n  radialWave:( u, v, pt ) ->\n    r  = 100\n    x  = Math.sin(u) * r\n    z  = Math.sin(v / 2) * 2 * r\n    y  = (Math.sin(u * 4 * Math.PI) + Math.cos(v * 2 * Math.PI)) * 2.8\n    pt.set( x, y, z )\n\n  # val 0.25*Math.sin( 12*x + vis.time*0.3 ) + 0.25*Math.sin( 12*y + vis.time*0.3 )\n  hmiWave:( u, v, pt ) ->\n    hue  = u * 360\n    sat  = v * 100\n    val  = 50\n    x    = vis.cos(hue) * sat\n    z    = vis.sin(hue) * sat\n    y    = val # * ( 1.0 + vis.sin(16*hue) )\n    # console.log( \"Surface.hmiWave()\", { uv:[u,v], hsv:[hue,sat,val], xyz:[x,y,z] } )\n    pt.set( x, y, z )\n\nexport default Surface"
  ]
}
{
  "version": 3,
  "file": "Surface.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Surface.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\nimport { vis }    from \"../../../lib/pub/draw/Vis.js\"\n\nclass Surface\n\n  constructor:( @main ) ->\n    @klass   = @constructor.name\n    @main.log( @klass+'()', @ )\n\n  drawHsv:() ->\n    obj         = {}\n    obj.group   = new THREE.Group()\n    obj.valFun = ( hue, sat ) -> 50\n    @toGeom( obj )\n    @main.addToScene( obj.group )\n    @main.addToScene( obj.sphereGroup )\n    #main.addToScene( obj.faceGroup   )\n    @main.log( 'Surface.drawHsv()', {} )\n    return\n\n  toGeom:( obj ) ->\n    obj.colors   = []\n    obj.vertices = []\n    obj.normals  = []\n    obj.indices  = []\n    obj.sc       = 1.0 / 255.0\n    obj.hueNum   = 24\n    obj.satNum   = 10\n    obj.hueInc   = 360 / obj.hueNum\n    obj.huePri   = obj.hueInc * 2\n    obj.satInc   = 100 / obj.satNum  # scount is actually obj.satInc + 1\n    @initSpheres( obj )\n    # @initFaces( obj )\n    for   hue in [0...360] by obj.hueInc\n      for rad in [0..100]  by obj.satInc\n        sat = if hue % obj.huePri is 0 then rad else rad - obj.satInc / 2\n        @addVertex( obj, hue, sat, obj.valFun(hue,sat), sat*vis.cos(-hue-90)*2.5, 0, sat*vis.sin(-hue-90)*2.5 )\n    @main.log( \"Surface vertices\", obj.vertices )\n    @createIndices( obj )\n    @createBufferGeometry( obj )\n    return\n\n  initSpheres:( obj ) ->\n    radius             = 8\n    count              = 3 * obj.hueNum + 4 * obj.hueNum * obj.satNum\n    obj.sphereIndex    = 0\n    obj.sphereGeometry = new THREE.SphereGeometry( radius, 16, 16 )\n    obj.sphereMaterial = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    obj.sphereMesh     = new THREE.InstancedMesh( obj.sphereGeometry, obj.sphereMaterial, count )\n    obj.sphereMatrix   = new THREE.Matrix4()\n    obj.sphereColor    = new THREE.Color()\n    obj.sphereGroup    = new THREE.Group()\n    obj.sphereGroup.add( obj.sphereMesh )\n    return\n\n  initFaces:( obj ) ->\n    radius             = 8\n    count              = obj.hueNum * ( obj.satNum + 1 )\n    obj.faceIndex    = 0\n    obj.faceGeometry = new THREE.SphereGeometry( radius, 16, 16 )\n    obj.faceMaterial = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    obj.faceMesh     = new THREE.InstancedMesh( obj.faceGeometry, obj.faceMaterial, count )\n    obj.faceGroup    = new THREE.Group()\n    obj.faceGroup.add( obj.faceMesh )\n    return\n\n  addVertex:( obj, hue, sat, val, x, y, z ) ->\n    rgb = vis.rgb( [ hue, sat, val, \"HMIR\" ] )\n    obj.colors.push( rgb.r*obj.sc, rgb.g*obj.sc, rgb.b*obj.sc )\n    obj.vertices.push( x, y, z )\n    obj.normals.push(  0, 1, 0 ) # Good only for a flat surface\n    @addSphere( obj, rgb, x, y, z )\n    @main.log( \"Surface.addVertex()\", { hue:hue, sat:sat, val:val, x:x, y:y, z:z } )\n    return\n\n  addSphere:( obj, rgb, x, y, z ) ->\n    obj.sphereMatrix.setPosition( x, y, z );\n    obj.sphereColor.setRGB( rgb.r*obj.sc, rgb.g*obj.sc, rgb.b*obj.sc )\n    obj.sphereMesh.setMatrixAt( obj.sphereIndex, obj.sphereMatrix )\n    obj.sphereMesh.setColorAt(  obj.sphereIndex, obj.sphereColor  )\n    obj.sphereIndex++\n    return\n\n  createBufferGeometry:( obj ) ->\n    geom = new THREE.BufferGeometry()\n    geom.setIndex( obj.indices )\n    geom.setAttribute( 'position', new THREE.Float32BufferAttribute( obj.vertices, 3 ) )\n    geom.setAttribute( 'normal',   new THREE.Float32BufferAttribute( obj.normals,  3 ) )\n    geom.setAttribute( 'color',    new THREE.Float32BufferAttribute( obj.colors,   3 ) )\n    vertMat  = new THREE.MeshBasicMaterial( { side:THREE.DoubleSide, vertexColors:true } )\n    wireMat  = new THREE.MeshBasicMaterial( { wireframe:true, color:0xFFFFFF } )\n    geomMesh = new THREE.Mesh( geom, vertMat )\n    wireMesh = new THREE.Mesh( geom, wireMat )\n    geomMesh.add( wireMesh )\n    obj.group.add( geomMesh )\n    return\n\n  # Assign vertex indexes to create all the triangular face indices\n  createIndices:( obj ) ->\n    n = obj.satNum+1\n    for i0 in [0...obj.hueNum] by 2\n      i1 = i0 + 1\n      i2 = if i0 < obj.hueNum-2 then i0 + 2 else 0\n      oo = i0 * n                      # Case where sat is zero\n      se = i0 * n + 1\n      ce = i1 * n + 1\n      ne = i2 * n + 1\n      @addIndice( obj, oo, ce, se )    # We only create 3 face indices\n      @addIndice( obj, oo, ce, ne )\n      @addIndice( obj, ce, se, ne )\n      @main.log( \"Surface.addIndices One()\", { i0:i0, j:1, oo:oo, se:se, ce:ce, ne:ne } )\n      for j in [1..obj.satNum]\n        sw = i0 * n + j\n        se = i0 * n + j + 1\n        ce = i1 * n\n        nw = i2 * n + j\n        ne = i2 * n + j + 1\n        @addIndice( obj, ce, sw, nw )\n        @addIndice( obj, ce, nw, ne )\n        @addIndice( obj, ce, ne, se )\n        @addIndice( obj, ce, se, sw )\n        @main.log( \"Surface.addIndices One()\", { i0:i0, j:j, ce:ce, sw:sw, nw:nw, ne:ne, se:se } )\n    console.log( \"Surface.addIndices() Two\", { numIndices:obj.indices.length } )\n    return\n\n  addIndice:(    obj, i1, i2, i3 ) ->\n    obj.indices.push( i1, i2, i3 )\n    # @addFace(  obj, i1, i2, i3 )\n    return\n\n  addFace:( obj, i1, i2, i3 ) ->\n    vc = ( i, j ) -> obj.vertices[i*3] + j\n    v1 = new THREE.Vector3( vc(i1,0), vc(i1,1), vc(i1,2) )\n    v2 = new THREE.Vector3( vc(i2,0), vc(i2,1), vc(i2,2) )\n    v3 = new THREE.Vector3( vc(i3,0), vc(i3,1), vc(i3,2) )\n    obj.faceTriangle = THREE.Triangle( v1, v2, v3 )\n    obj.faceIndex++\n\n# xyzs.push(vis.cos(hue)*sat,vis.sin(hue)*sat,0)\n  genHsvs:( hueInc, satInc, valFunc ) ->\n    hsvs = []\n    for     hue in [0...360] by hueInc\n      for   sat in [0..100]  by satInc\n        hsvs.push(new THREE.Vector3(hue,sat,valFunc(hue,sat)))\n    hsvs\n\n  rgbs:( inMesh, nx, ny, inc ) ->\n    i      = 0\n    matrix = new THREE.Matrix4()\n    color  = new THREE.Color()\n    for   x in [0..nx] by inc\n      for y in [0..ny] by inc\n        z = ( x + y ) * 0.5\n        matrix.setPosition( x, y, z )\n        color.setRGB( x, y, z )           # Just a place holder\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        i++\n    i\n\n  # val 0.25*Math.sin( 12*x + vis.time*0.3 ) + 0.25*Math.sin( 12*y + vis.time*0.3 )\n  hmiWave:( u, v, pt ) ->\n    hue  = u * 360\n    sat  = v * 100\n    val  = 50\n    x    = vis.cos(hue) * sat\n    z    = vis.sin(hue) * sat\n    y    = val # * ( 1.0 + vis.sin(16*hue) )\n    # console.log( \"Surface.hmiWave()\", { uv:[u,v], hsv:[hue,sat,val], xyz:[x,y,z] } )\n    pt.set( x, y, z )\n\n  parametric:() ->\n    i        = 0\n    ndeginc  = 12\n    nsatinc  = 10\n    count    = ndeginc * nsatinc\n    geometry = new THREE.ParametricGeometry( @hmiWave, ndeginc, nsatinc );\n    material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, 1 )\n    matrix   = new THREE.Matrix4()\n    # color  = new THREE.Color()\n    group    = new THREE.Group()\n    matrix.setPosition( 0, 0, 0 )\n    #color.setRGB( 128, 128, 128 )\n    inMesh.setMatrixAt( 0, matrix )\n    # inMesh.setColorAt(  0, color  )\n    @applyColor( geometry )\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.parametric()', { i:i, count:count } )\n    return\n\n  applyColor:( geometry ) ->\n    geometry.computeBoundingBox()\n    vertObj  = geometry.getAttribute(\"position\")\n    # faceObj  = geometry.getAttribute(\"normal\")\n    vertices = vertObj.array\n    # faces  = faceObj.array\n    # colorObj = geometry.getAttribute(\"color\")\n    # colors   = colorObj.array\n    colors     = []\n    console.log( \"Surface.applyColor()\", { vlen:vertObj.count, vertices:vertices } )\n    # faceIndices = ['a','b','c','d']                   # faces are indexed using characters\n    sc = 1.0 / 255.0\n    for i in [0...vertices.length]           # first, assign colors to vertices as desired\n      hsv  = vertices[i].slice()\n      hsv.push(\"HMIR\")\n      rgb = vis.rgb( hsv )\n      color.setRGB( rgb.r*sc, rgb.g*sc, rgb.b*sc )\n      color = new THREE.Color(  rgb.r,  rgb.g,  rgb.b )\n      colors.push( color )\n\nexport default Surface"
  ]
}
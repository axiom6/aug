{
  "version": 3,
  "file": "Hexagon.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Hexagon.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\nimport Surface    from \"./Surface.js\"\nimport { vis }    from \"../../../lib/pub/draw/Vis.js\"\n\nclass Hexagon extends Surface\n\n  constructor:( main ) ->\n     super( main )\n     @main.hexagon = @\n\n  toGeom:( obj ) ->\n    @obj          = obj\n    vis.smooth    = true\n    obj.valFun    = ( hue, sat ) -> 100\n    obj.colors     = []\n    obj.vertices   = []\n    obj.normals    = []\n    obj.uvs        = []\n    obj.indices    = []\n    obj.hexIndices = new Array(7)\n    obj.vertex     = new THREE.Vector3()\n    obj.normal     = new THREE.Vector3()\n    obj.uv         = new THREE.Vector2()\n    obj.sc         = 1.0 / 255.0\n    obj.hueNum     = 12\n    obj.satNum     = 10\n    obj.hueInc     = 360 / obj.hueNum\n    obj.huePri     = obj.hueInc * 2\n    obj.satInc     = 100 / obj.satNum\n    obj.priRadius  = 10\n    obj.secRadius  = obj.priRadius * vis.cos(30)\n    obj.idxOrigin  = 0\n    obj.x0         = 0\n    obj.y0         = 0\n    obj.z0         = 0\n    @initSpheres( obj )\n    obj.idxOrigin = @addVertex( obj, 0, 0, obj.valFun(0,0), obj.x0, obj.z0, obj.z0 )  # Origin\n    x      = obj.priRadius*4.5\n    y      = obj.secRadius\n    angle  = vis.atan2(  y, x )\n    radius = vis.hypoth( y, x )\n    if obj.hexOrient is  30\n      @hexVertices( obj, 30, obj.idxOrigin )\n      @sixHexes(    obj, 60, obj.secRadius*2.0, 0 )\n      @sixHexes(    obj, 30, obj.priRadius*3.0, 0 )\n      @sixHexes(    obj, 60, obj.secRadius*4.0, 0 )\n      @sixHexes(    obj, 30, radius, -angle )\n      @sixHexes(    obj, 30, radius,  angle )\n      @sixHexes(    obj, 60, obj.secRadius*6.0, 0 )\n    else if obj.hexOrient is  60\n      @hexVertices( obj, 60, obj.idxOrigin )\n      @sixHexes(    obj, 30, obj.secRadius*2.0, 0 )\n      @sixHexes(    obj, 60, obj.priRadius*3.0, 0 )\n      @sixHexes(    obj, 30, obj.secRadius*4.0, 0 )\n      @sixHexes(    obj, 60, radius, -angle )\n      @sixHexes(    obj, 60, radius,  angle )\n      @sixHexes(    obj, 30, obj.secRadius*6.0, 0 )\n    @createBufferGeometry( obj )\n    @drawCircle( obj.priRadius*5.0 )\n    @pallettes(  obj, false )\n    @main.log( \"Hexagon.toGeom()\",\n      { lenVertices:obj.vertices.length, lenIndices:obj.indices.length, vertices:obj.vertices, indices:obj.indices } )\n    return\n\n  hexAngles:( orient ) ->\n    if orient is 60 then [0,60,120,180,240,300] else [330,30,90,150,210,270]\n\n  sixHexes:(       obj, orient,    radius, angOffset ) ->\n    @calcVertices( obj, orient, 0, radius, angOffset, true )\n    return\n\n  hexVertices:(    obj, orient, idxCen ) ->\n    @calcVertices( obj, orient, idxCen, obj.priRadius, 0, false )\n    @hexIndices(   obj )\n    return\n\n  calcVertices:( obj, orient, idxCen, radius, angOffset, callHexVertices ) ->\n    i  = 1\n    vs = obj.vertices\n    obj.hexIndices[0] = idxCen\n    for ang1 in @hexAngles( orient )\n      ang = ang1 + angOffset\n      x = vs[3*idxCen  ] + radius * vis.cos(ang)\n      y = vs[3*idxCen+1] + radius * vis.sin(ang)\n      z = vs[3*idxCen+2]\n      hue = vis.hueZX(  y, x )\n      hyp = vis.hypoth( y, x )\n      sat = @adjSat( obj, hue, hyp )\n      val = obj.valFun( hue, sat )\n      obj.hexIndices[i] = @addVertex( obj, hue, sat, val, x, y, z )\n      if callHexVertices\n        @hexVertices( obj, obj.hexOrient, obj.hexIndices[i] )\n      @main.log( \"Hexagon.calcVertices\", { idx:obj.hexIndices[i],\n      ang1:ang1, ang:ang, angOffset:angOffset, radius:radius,\n      hyp:hyp, hue:hue, sat:sat, val:val, x:x, y:y, z:z } )\n      i++\n\n  adjSat:( obj, hue, hyp ) ->\n    vis.round( hyp * 2.0 )\n      \n  hexIndices:(  obj ) ->\n    a = obj.hexIndices\n    @addIndice( obj, a[0], a[1], a[2] )\n    @addIndice( obj, a[0], a[2], a[3] )\n    @addIndice( obj, a[0], a[3], a[4] )\n    @addIndice( obj, a[0], a[4], a[5] )\n    @addIndice( obj, a[0], a[5], a[6] )\n    @addIndice( obj, a[0], a[6], a[1] )\n    return\n\n  addIndice:(    obj, i1, i2, i3 ) ->\n    obj.indices.push( i1, i2, i3 )\n    return\n\n  drawCircle:( radius ) ->\n    geometry = new THREE.CircleGeometry( radius, 24 )\n    #eometry.rotateX( Math.PI / 2 )\n    geometry.translate( 0, 0, 0 )\n    material = new THREE.MeshBasicMaterial( { color:0xffff00, transparent:true, opacity:1.0, wireframe:true } )\n    circle   = new THREE.Mesh( geometry, material )\n    @main.addToScene( circle )\n    return\n\n  pallettes:( obj, ysv=false ) ->\n    p          = {}\n    p.ysv      = ysv\n    p.i        = 0\n    p.sc       = 1.0 / 255.0\n    p.hueInc   = if p.ysv then 45 else 60\n    p.satInc   = if obj.hexOrient is 30 then 100/6              else 20\n    p.satNum   = if obj.hexOrient is 30 then   7                else  6\n    p.radius   = if obj.hexOrient is 30 then obj.secRadius*0.06 else obj.priRadius*0.05\n    p.count    = (360/p.hueInc)*p.satNum*(100/10+1)\n    @main.log( \"Hexagon.pallettes()\",\n      { orient:obj.hexOrient, satInc:p.satInc, satNum:p.satNum, radius:p.radius, count:p.count } )\n    p.geometry = new THREE.SphereGeometry( 2, 16, 16 )\n    p.material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    p.inMesh   = new THREE.InstancedMesh( p.geometry, p.material, p.count )\n    p.matrix   = new THREE.Matrix4()\n    p.color    = new THREE.Color()\n    p.group    = new THREE.Group()\n    @pallettePoints( p )\n    p.group.add( p.inMesh )\n    @main.addToScene( p.group )\n    @main.log( 'Hexagon.pallettes()', { i:p.i, count:p.count } )\n    return\n\n  pallettePoints:( p ) ->\n    for     h in [0...360] by p.hueInc\n      for   s in [0..101]  by p.satInc\n        for v in [0...100]  by 10\n          x = vis.cos(h) * s * p.radius\n          y = vis.sin(h) * s * p.radius\n          z = v              * p.radius\n          p.matrix.setPosition( x, y, z )\n          hsv = if p.ysv then [h,s,100-v,\"HMI\"] else [h,s,100-v,\"HMIR\"]\n          rgb = vis.rgb( hsv )\n          p.color.setRGB( rgb.r*p.sc, rgb.g*p.sc, rgb.b*p.sc )\n          p.inMesh.setMatrixAt( p.i, p.matrix )\n          p.inMesh.setColorAt(  p.i, p.color  )\n          @main.log( 'Hexagon.pallettes()', { h:h, s:s, v:v, rgb:rgb } )\n          p.i++\n\n  animateSpheres:( timer ) =>\n    obj   = @obj\n    count = 0\n    for i in [0...obj.sphereIndex]\n      obj.sphereMesh.getMatrixAt( i, obj.sphereMatrix )\n      obj.sphereMesh.getColorAt(  i, obj.sphereColor  )\n\n      position = new THREE.Vector3()\n      position.setFromMatrixPosition( obj.sphereMatrix )\n      rgb = obj.sphereColor.toArray()\n\n      pc = 0.5 - 0.5 * vis.sin( 12 * ( position.x + position.y + timer ) )\n\n      obj.sphereMatrix.setPosition( position.x, position.y, position.z*pc )\n      obj.sphereColor.setRGB( rgb[0]*pc, rgb[1]*pc, rgb[2]*pc )\n\n      count++\n      if count % 100 is 0\n        rrgb = vis.roundRGB( rgb, 255 )\n        console.log( \"Hexagon.animateSpheres()\", { pc:pc, position:position, rgb:rrgb } )\n\n    # console.log( \"Hexagon.animateSpheres()\" )\n    return\n\nexport default Hexagon"
  ]
}
{
  "version": 3,
  "file": "Hexagon.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Hexagon.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\nimport { vis }    from \"../../../lib/pub/draw/Vis.js\"\n\nclass Hexagon\n\n  constructor:( @main ) ->\n     @main.hexagon = @\n\n  drawHsv:( orient ) ->\n    obj           = {}\n    obj.hexOrient = orient\n    obj.group     = new THREE.Group()\n    @toGeom( obj )\n    @main.addToScene( obj.group )\n    @main.addToScene( obj.sphereGroup )\n    @main.log( 'Heagon.drawHsv()', obj )\n    return\n\n  toGeom:( obj ) ->\n    @obj             = obj\n    vis.smooth       = true\n    obj.valFun       = ( hue, sat ) -> 100 * vis.sin( 90 * (1.0-sat*0.01) )\n    obj.valBase      = 100\n    obj.val          = obj.valBase\n    obj.animateOn    = false\n    obj.animateDebug = false\n    obj.animateCount = 0\n    obj.colors       = []\n    obj.vertices     = []\n    obj.normals      = []\n    obj.uvs          = []\n    obj.indices      = []\n    obj.vertexCount  = 0\n    obj.indiceCount  = 0\n    obj.vertexGeom   = null\n    obj.hexIndices   = new Array(7)\n    obj.vertex       = new THREE.Vector3()\n    obj.normal       = new THREE.Vector3()\n    obj.uv           = new THREE.Vector2()\n    obj.sc           = 1.0 / 255.0\n    obj.hueNum       = 12\n    obj.satNum       = 10\n    obj.hueInc       = 360 / obj.hueNum\n    obj.huePri       = obj.hueInc * 2\n    obj.satInc       = 100 / obj.satNum\n    obj.priRadius    = 10\n    obj.secRadius    = obj.priRadius * vis.cos(30)\n    obj.idxOrigin    = 0\n    obj.x0           = 0\n    obj.y0           = 0\n    obj.z0           = 0\n    # @initSpheres( obj )\n    obj.idxOrigin = @addVertex( obj, 0, 0, obj.valFun(0,0), obj.x0, obj.z0, obj.z0 )  # Origin\n    x = obj.priRadius*4.5\n    y = obj.secRadius\n    angle  = vis.atan2(  y, x )\n    radius = vis.hypoth( y, x )\n    if obj.hexOrient is  30\n      @hexVertices( obj, 30, obj.idxOrigin )\n      @sixHexes(    obj, 60, obj.secRadius*2.0, 0 )\n      @sixHexes(    obj, 30, obj.priRadius*3.0, 0 )\n      @sixHexes(    obj, 60, obj.secRadius*4.0, 0 )\n      @sixHexes(    obj, 30, radius, -angle )\n      @sixHexes(    obj, 30, radius,  angle )\n      @sixHexes(    obj, 60, obj.secRadius*6.0, 0 )\n    else if obj.hexOrient is  60\n      @hexVertices( obj, 60, obj.idxOrigin )\n      @sixHexes(    obj, 30, obj.secRadius*2.0, 0 )\n      @sixHexes(    obj, 60, obj.priRadius*3.0, 0 )\n      @sixHexes(    obj, 30, obj.secRadius*4.0, 0 )\n      @sixHexes(    obj, 60, radius, -angle )\n      @sixHexes(    obj, 60, radius,  angle )\n      @sixHexes(    obj, 30, obj.secRadius*6.0, 0 )\n    @createBufferGeometry( obj )\n    @initSpheres( obj )\n    @drawCircle(    obj.priRadius*5.0 )\n    @pallettes(     obj, false )\n    @applyValues(   obj )\n    console.log( \"Hexagon.toGeom()\",\n      { vertexLength:obj.vertices.length, vertexCount:obj.vertexCount,\n      indiceKength:obj.indices.length,    indiceCount:obj.indiceCount,\n      sphereCountCalc:obj.sphereCountCalc, vertices:obj.vertices } )\n    return\n\n  hexAngles:( orient ) ->\n    if orient is 60 then [0,60,120,180,240,300] else [330,30,90,150,210,270]\n\n  sixHexes:(       obj, orient,    radius, angOffset ) ->\n    @calcVertices( obj, orient, 0, radius, angOffset, true )\n    return\n\n  hexVertices:(    obj, orient, idxCen ) ->\n    @calcVertices( obj, orient, idxCen, obj.priRadius, 0, false )\n    @hexIndices(   obj )\n    return\n\n  # valRadius from @pallettePoints()\n  calcVertices:( obj, orient, idxCen, radius, angOffset, callHexVertices ) ->\n    i  = 1\n    vs = obj.vertices\n    obj.hexIndices[0] = idxCen\n\n    for ang1 in @hexAngles( orient )\n      ang = ang1 + angOffset\n      x   = vs[3*idxCen  ] + radius * vis.cos(ang)\n      y   = vs[3*idxCen+1] + radius * vis.sin(ang)\n      hue = vis.hueZX(  y, x )\n      hyp = vis.hypoth( y, x )\n      sat = @adjSat( obj, hue, hyp )\n      val = obj.valBase\n      z   = vs[3*idxCen+2] \n      obj.hexIndices[i] = @addVertex( obj, hue, sat, val, x, y, z )\n      if callHexVertices\n        @hexVertices( obj, obj.hexOrient, obj.hexIndices[i] )\n      @main.log( \"Hexagon.calcVertices\", { idx:obj.hexIndices[i],\n      ang1:ang1, ang:ang, angOffset:angOffset, radius:radius,\n      hyp:hyp, hue:hue, sat:sat, val:val, x:x, y:y, z:z } )\n      i++\n\n  adjSat:( obj, hue, hyp ) ->\n    vis.round( hyp * 2.0 )\n      \n  hexIndices:(  obj ) ->\n    a = obj.hexIndices\n    @addIndice( obj, a[0], a[1], a[2] )\n    @addIndice( obj, a[0], a[2], a[3] )\n    @addIndice( obj, a[0], a[3], a[4] )\n    @addIndice( obj, a[0], a[4], a[5] )\n    @addIndice( obj, a[0], a[5], a[6] )\n    @addIndice( obj, a[0], a[6], a[1] )\n    return\n\n  addIndice:(    obj, i1, i2, i3 ) ->\n    obj.indices.push( i1, i2, i3 )\n    obj.indiceCount++\n    return\n\n  addVertex:( obj, hue, sat, val, x, y, z ) ->\n    index = @vertexIndexXYZ( obj, x, y, z )\n    if index is -1\n      index = @vertexIndex( obj )\n      rgb = vis.rgb( [ hue, sat, val, \"HMIR\" ] )\n      obj.colors.push( rgb.r*obj.sc, rgb.g*obj.sc, rgb.b*obj.sc )\n      obj.vertex.x = x\n      obj.vertex.y = y\n      obj.vertex.z = z\n      obj.vertices.push( obj.vertex.x, obj.vertex.y, obj.vertex.z )\n      obj.normal.copy(   obj.vertex ).normalize();\n      obj.normals.push(  obj.normal.x, obj.normal.y, obj.normal.z )\n      obj.uv.x = hue / obj.hueInc / obj.hueNum\n      obj.uv.y = sat / obj.satInc / obj.satNum\n      obj.uvs.push( obj.uv.x, obj.uv.y )\n      # @addSphere( obj, rgb, x, y, z )\n      obj.vertexCount++\n    @main.log( \"Surface.addVertex()\", { index:index, hue:hue, sat:sat, val:val, x:x, y:y, z:z } )\n    index\n\n  vertexIndex:( obj ) ->\n    obj.vertices.length / 3\n\n  vertexIndexXYZ:( obj, x, y, z ) ->\n    vs = obj.vertices\n    for i in [0...vs.length] by 3\n      return i/3 if vis.isCoord( x, vs[i], y, vs[i+1], z, vs[i+2] )\n    -1\n\n  initSpheres:( obj ) ->\n    radius              = 2\n    obj.sphereCountCalc = obj.hueNum * (obj.satNum+1) + 1 # Look into\n    obj.sphereBaseGeom  = new THREE.SphereGeometry( radius, 16, 16 )\n    obj.sphereGeometry  = new THREE.InstancedBufferGeometry().copy( obj.sphereBaseGeom )\n    obj.sphereGeometry.maxInstancedCount = obj.vertexCount\n    obj.sphereMaterial  = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    obj.sphereMesh      = new THREE.Mesh( obj.sphereGeometry, obj.sphereMaterial )\n    @updateSphereGeometry( obj )\n    obj.sphereGroup     = new THREE.Group()\n    obj.sphereGroup.add( obj.sphereMesh )\n    return\n\n  initSpheres1:( obj ) ->\n    radius              = 2\n    obj.sphereCountCalc = obj.hueNum * (obj.satNum+1) + 1 # Look into\n    obj.sphereGeometry  = new THREE.SphereGeometry( radius, 16, 16 )\n    obj.sphereMaterial  = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    obj.sphereMesh      = new THREE.InstancedMesh( obj.sphereGeometry, obj.sphereMaterial, obj.sphereCountCalc )\n    obj.sphereMatrix    = new THREE.Matrix4()\n    obj.sphereColor     = new THREE.Color()\n    obj.sphereGroup     = new THREE.Group()\n    obj.sphereGroup.add( obj.sphereMesh )\n    return\n\n  addSphere:( obj, rgb, x, y, z ) ->\n    obj.sphereMatrix.setPosition( x, y, z )\n    obj.sphereColor.setRGB( rgb.r*obj.sc, rgb.g*obj.sc, rgb.b*obj.sc )\n    obj.sphereMesh.setMatrixAt( @vertexIndex(obj), obj.sphereMatrix )\n    obj.sphereMesh.setColorAt(  @vertexIndex(obj), obj.sphereColor  )\n    return\n\n  createBufferGeometry:( obj ) ->\n    obj.vertexGeometry = new THREE.BufferGeometry()\n    obj.vertexGeometry.setIndex( obj.indices )\n    @updateVertexGeometry( obj )\n    vertMat  = new THREE.MeshBasicMaterial( { side:THREE.DoubleSide, vertexColors:THREE.FaceColors } )\n    geomMesh = new THREE.Mesh( obj.vertexGeometry, vertMat )\n    wireMat  = new THREE.MeshBasicMaterial( { wireframe:true, color:0x000000 } )\n    wireMesh = new THREE.Mesh( obj.vertexGeometry, wireMat )\n    geomMesh.add(  wireMesh )\n    obj.group.add( geomMesh )\n    return\n\n  updateVertexGeometry:( obj ) ->\n    obj.vertexGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( obj.vertices, 3 ) )\n    obj.vertexGeometry.setAttribute( 'normal',   new THREE.Float32BufferAttribute( obj.normals,  3 ) )\n    obj.vertexGeometry.setAttribute( 'uv',       new THREE.Float32BufferAttribute( obj.uvs,      2 ) )\n    obj.vertexGeometry.setAttribute( 'color',    new THREE.Float32BufferAttribute( obj.colors,   3 ) )\n    return\n\n  updateSphereGeometry:( obj ) ->\n    obj.sphereGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( obj.vertices, 3 ) )\n    obj.sphereGeometry.setAttribute( 'color',    new THREE.Float32BufferAttribute( obj.colors,   3 ) )\n    return\n\n  updateSphereGeometry2:( obj ) ->\n    obj.sphereGeometry.setAttribute( new THREE.InstancedBufferAttribute( 'position', new THREE.Float32BufferAttribute( obj.vertices, 3, false ) ) )\n    obj.sphereGeometry.setAttribute( new THREE.InstancedBufferAttribute( 'color',    new THREE.Float32BufferAttribute( obj.colors,   3, false ) ) )\n    return\n    \n  drawCircle:( radius ) ->\n    geometry = new THREE.CircleGeometry( radius, 24 )\n    #eometry.rotateX( Math.PI / 2 )\n    geometry.translate( 0, 0, 0 )\n    material = new THREE.MeshBasicMaterial( { color:0xffff00, transparent:true, opacity:1.0, wireframe:true } )\n    circle   = new THREE.Mesh( geometry, material )\n    @main.addToScene( circle )\n    return\n\n  pallettes:( obj, ysv=false ) ->\n    p          = {}\n    p.ysv      = ysv\n    p.i        = 0\n    p.sc       = 1.0 / 255.0\n    p.hueInc   = if p.ysv then 45 else 60\n    p.satInc   = if obj.hexOrient is 30 then 100/6              else 20\n    p.satNum   = if obj.hexOrient is 30 then   7                else  6\n    p.radius   = if obj.hexOrient is 30 then obj.secRadius*0.06 else obj.priRadius*0.05\n    p.count    = (360/p.hueInc)*p.satNum*(100/10+1)\n    @main.log( \"Hexagon.pallettes()\",\n      { orient:obj.hexOrient, satInc:p.satInc, satNum:p.satNum, radius:p.radius, count:p.count } )\n    p.geometry = new THREE.SphereGeometry( 2, 16, 16 )\n    p.material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    p.inMesh   = new THREE.InstancedMesh( p.geometry, p.material, p.count )\n    p.matrix   = new THREE.Matrix4()\n    p.color    = new THREE.Color()\n    p.group    = new THREE.Group()\n    @pallettePoints( p )\n    p.group.add( p.inMesh )\n    @main.addToScene( p.group )\n    @main.log( 'Hexagon.pallettes()', { i:p.i, count:p.count } )\n    return\n\n  pallettePoints:( p ) ->\n    for     h in [0...360] by p.hueInc\n      for   s in [0..101]  by p.satInc\n        for v in [0...100]  by 10\n          x = vis.cos(h) * s * p.radius\n          y = vis.sin(h) * s * p.radius\n          z = v              * p.radius\n          p.matrix.setPosition( x, y, z )\n          hsv = if p.ysv then [h,s,100-v,\"HMI\"] else [h,s,100-v,\"HMIR\"]\n          rgb = vis.rgb( hsv )\n          p.color.setRGB( rgb.r*p.sc, rgb.g*p.sc, rgb.b*p.sc )\n          p.inMesh.setMatrixAt( p.i, p.matrix )\n          p.inMesh.setColorAt(  p.i, p.color  )\n          @main.log( 'Hexagon.pallettes()', { h:h, s:s, v:v, rgb:rgb } )\n          p.i++\n\n  applyValues:( obj, val ) ->\n    vs  = obj.vertices\n    fac = if obj.hexOrient is 30 then obj.secRadius*0.03 else obj.priRadius*0.025\n    for i in [0...obj.vertexCount]\n      #valPercent = (100.0-val) * 0.01\n      z          = val * fac\n      vs[3*i+2]  = z\n      # @applySphere( obj, i, z, valPercent )\n    return\n\n  # Not called\n  applySphere:( obj, i, z, valPercent ) ->\n    obj.sphereMesh.getMatrixAt( i, obj.sphereMatrix )\n    obj.sphereMesh.getColorAt(  i, obj.sphereColor  )\n    position = new THREE.Vector3()\n    position.setFromMatrixPosition( obj.sphereMatrix )\n    rgb = obj.sphereColor.toArray()\n    obj.sphereMatrix.setPosition( position.x, position.y, z )\n    obj.sphereColor.setRGB( rgb[0]*valPercent, rgb[1]*valPercent, rgb[2]*valPercent )\n    return\n\n    # Not called\n    needsUpdate:( obj ) =>\n      obj.vertexGeometry.attributes.position.needsUpdate = true\n      obj.vertexGeometry.attributes.color.needsUpdate = true\n      obj.vertexGeometry.computeVertexNormals()\n\n  animateLog:( obj ) ->\n    if obj.animateDebug and obj.animateCount % 100 is 0\n      valPercent = obj.val * 0.01\n      console.log( \"Hexagon.animate()\", { val:obj.val, valPercent:valPercent } )\n      obj.animateCount++\n    return\n\n  updateSpheres:( obj ) ->\n    obj.sphereGeometry.attributes.position.needsUpdate = true\n    #bj.sphereGeometry.attributes.color.needsUpdate    = true\n    obj.sphereMesh.instanceMatrix.needsUpdate          = true\n    obj.sphereMesh.instanceColor.needsUpdate           = true\n    obj.sphereGeometry.computeVertexNormals()\n    return\n\n  animate:( timer ) =>\n    vis.noop( timer )\n    obj      = @obj\n    obj.val -= 10\n    obj.val  = if obj.val < 0 then obj.valBase else obj.val\n    @applyValues( obj, obj.val )\n    @updateVertexGeometry( obj )\n    @updateSphereGeometry( obj )\n    @animateLog( obj )\n    return\n\nexport default Hexagon\n\n#bj.sphereGeometry.addAttribute( new THREE.InstancedBufferAttribute( 'normal',   new\n# THREE.Float32BufferAttribute( obj.normals,  3, false ) ) )\n#bj.sphereGeometry.addAttribute( new THREE.InstancedBufferAttribute( 'uv',       new\n# THREE.Float32BufferAttribute( obj.uvs,      2, false ) ) )"
  ]
}
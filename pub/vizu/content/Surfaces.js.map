{
  "version": 3,
  "file": "Surfaces.js",
  "sourceRoot": "../../../src/vizu/content",
  "sources": [
    "Surfaces.coffee"
  ],
  "names": [],
  "mappings": "AACA,IAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AAEM,WAAN,MAAA,SAAA;EAEE,WAAY,KAAA,CAAA;IAAE,IAAC,CAAA;IACb,IAAC,CAAA,KAAD,GAAW,IAAC,CAAA,WAAW,CAAC;IACxB,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,IAAC,CAAA,KAAD,GAAO,IAAlB,EAAwB,IAAxB;EAFU;;EAIZ,QAAS,CAAA,CAAA;AACX,QAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,KAAA,EAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAI,CAAA,GAAW;IACX,GAAA,GAAW;IACX,GAAA,GAAW,GAAA,GAAI;IACf,KAAA,GAAW,IAAI,CAAC,GAAL,CAAU,GAAV,EAAe,CAAf;IACX,IAAA,GAAW,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,EAAR,CAAA;MACT,EAAE,CAAC,CAAH,GAAO;MACP,EAAE,CAAC,CAAH,GAAO;aACP,EAAE,CAAC,CAAH,GAAO,CAAE,CAAA,GAAI,CAAN,CAAA,GAAY;IAHV;IAIX,QAAA,GAAW,IAAI,KAAK,CAAC,kBAAV,CAA8B,IAA9B,EAAoC,GAApC,EAAyC,GAAzC;IACX,QAAA,GAAW,IAAI,KAAK,CAAC,iBAAV,CAA6B;MAAE,WAAA,EAAY,KAAd;MAAqB,IAAA,EAAK,KAAK,CAAC;IAAhC,CAA7B;IACX,MAAA,GAAW,IAAI,KAAK,CAAC,aAAV,CAAyB,QAAzB,EAAmC,QAAnC,EAA6C,KAA7C;IACX,MAAA,GAAW,IAAI,KAAK,CAAC,OAAV,CAAA;IACX,KAAA,GAAW,IAAI,KAAK,CAAC,KAAV,CAAA;IACX,KAAA,GAAW,IAAI,KAAK,CAAC,KAAV,CAAA;IACX,GAAA,GAAW;IACX,KAAW,gFAAX;MACE,KAAS,oFAAT;QACE,CAAA,GAAI,CAAE,CAAA,GAAI,CAAN,CAAA,GAAY;QAChB,MAAM,CAAC,WAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;QACA,KAAK,CAAC,MAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;QACA,MAAM,CAAC,WAAP,CAAoB,CAApB,EAAuB,MAAvB;QACA,MAAM,CAAC,UAAP,CAAoB,CAApB,EAAuB,KAAvB,EAJR;;QAMQ,CAAA;MAPF;IADF;IASA,KAAK,CAAC,GAAN,CAAW,MAAX;IACA,IAAC,CAAA,IAAI,CAAC,UAAN,CAAkB,KAAlB;IACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAW,oBAAX,EAAiC;MAAE,CAAA,EAAE,CAAJ;MAAO,KAAA,EAAM;IAAb,CAAjC;EA3BO;;AANX;;AAoCA,OAAA,QAAe",
  "sourcesContent": [
    "\nimport * as THREE from \"three\"\n\nclass Surfaces\n\n  constructor:( @main ) ->\n    @klass   = @constructor.name\n    @main.log( @klass+'()', @ )\n\n  drawRgbs:() ->\n    i        = 0\n    inc      = 32\n    num      = 256/inc\n    count    = Math.pow( num, 2 )\n    func     = ( x, y, pt ) ->\n      pt.x = x\n      pt.y = y\n      pt.z = ( x + y ) * 0.5\n    geometry = new THREE.ParametricGeometry( func, num, num );\n    material = new THREE.MeshBasicMaterial( { transparent:false, side:THREE.FrontSide } )\n    inMesh   = new THREE.InstancedMesh( geometry, material, count )\n    matrix   = new THREE.Matrix4()\n    color    = new THREE.Color()\n    group    = new THREE.Group()\n    inc      = 32\n    for   r in [0..256] by inc\n      for g in [0..256] by inc\n        b = ( r + b ) * 0.5\n        matrix.setPosition( r, g, b )\n        color.setRGB( r, g, b )\n        inMesh.setMatrixAt( i, matrix )\n        inMesh.setColorAt(  i, color  )\n        # console.log( 'Content.drawYsv()', { hue:hue, s:s, v:v, rgb:rgb } )\n        i++\n    group.add( inMesh )\n    @main.addToScene( group )\n    @main.log( 'Surface.drawRgbs()', { i:i, count:count } )\n    return\n\nexport default Surfaces"
  ]
}
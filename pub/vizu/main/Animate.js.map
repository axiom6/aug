{
  "version": 3,
  "file": "Animate.js",
  "sourceRoot": "../../../src/vizu/main",
  "sources": [
    "Animate.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { MathUtils } from 'three'\n\nclass Animate\n\n  constructor:( @main ) ->\n    @klass       = @constructor.name\n    @opts        = @main.opts.animate\n    @cc          = @main.cartesian\n    @theta       = if @opts.rotate? and @opts.rotate.theta?  then @opts.rotate.theta  else 0\n    @radius      = if @opts.rotate? and @opts.rotate.radius? then @opts.rotate.radius else @cc.dist\n    @camControls = @main.cameras.controls\n    @camControls.addEventListener( 'change', () => @main.needsRender = true ) if @camControls?\n    @main.log( @klass+'()', @ )\n\n  # Call before animate to insure an initial rendering\n  # Significant step. Not called when scene is static\n  render:() =>\n    if @main.needsRender or @main.animateOn\n       @main.render.renderer.render( @main.scene, @main.cameras.camera )\n       @main.needsRender = false\n    return\n\n  animate:() =>\n    @rotate()       if @opts.rotate?\n    @lightHelpers() if @main.needsRender and @main.lights.lightHelpers.length > 0\n    @controls()     if @main.needsRender and @camControls?\n    @doAnimations() if @main.animateOn\n    @render()\n    requestAnimationFrame( @animate )\n    return\n\n  doAnimations:() =>\n    if @main.hexagon?\n       @main.hexagon.animate()\n    return\n\n  controls:() =>\n    @camControls.update()       # if @camControls.enableDamping or @camControls.autoRotate\n    return\n\n  lightHelpers:() ->\n    for lightHelper in @main.lights.lightHelpers\n        lightHelper.update()\n    return\n\n  rotate:() =>\n    camera = @main.cameras.camera\n    @theta += 0.1\n    camera.position.x = @radius * Math.sin( MathUtils.degToRad( @theta ) )\n    camera.position.y = @radius * Math.sin( MathUtils.degToRad( @theta ) )\n    camera.position.z = @radius * Math.cos( MathUtils.degToRad( @theta ) )\n    camera.lookAt( @main.scene.position );\n    camera.updateMatrixWorld()\n    @main.needsRender = true\n    return\n\n  delayNeedsRender:() ->\n    callback = () => @main.needsRender = true\n    @main.nav.delayCallback( 1000, callback )\n    return\n\nexport default Animate"
  ]
}
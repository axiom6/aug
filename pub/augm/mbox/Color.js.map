{
  "version": 3,
  "file": "Color.js",
  "sourceRoot": "../../../src/augm/mbox",
  "sources": [
    "Color.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport Util     from '../../../lib/pub/base/util/Util.js'\nimport Vis      from '../../../lib/pub/base/draw/Vis.js'\n\nclass Color\n\n  constructor:( @mbox ) ->\n    @spaces   = ['hci','rgb','hsi','hsl','hsv','lab','lch','hcl','cmyk','gl']\n\n  addARgb:(  a, r, g, b    ) -> [ r+a, g+a, b+a ]\n  mulSRgb:(  s, r, g, b    ) -> [ r*s, g*s, b*s ]\n  addARygb:( a, r, y, g, b ) -> [ r+a, y+a, g+a, b+a ]\n  mulSRygb:( s, r, y, g, b ) -> [ r*s, y*s, g*s, b*s ]\n\n  addRygbs:( rygb1, rygb2 ) ->\n    rygb3 = [0,0,0,0]\n    for i in [0...4]\n      rygb3[i] = rygb1[i] + rygb2[i]\n    rygb3\n\n  toRygbFromHue:( hue ) =>\n    cos = Math.abs(Vis.cos(hue))\n    sin = Math.abs(Vis.sin(hue))\n    [r,y,g,b] = [cos,sin,cos,sin]\n    rygb      = [  0,  0,  0,  0]\n    if        0 <= hue and hue <  90 then rygb = [ r, y, 0, 0 ]\n    else if  90 <= hue and hue < 180 then rygb = [ 0, y, g, 0 ]\n    else if 180 <= hue and hue < 270 then rygb = [ 0, 0, g, b ]\n    else if 270 <= hue and hue < 360 then rygb = [ r, 0, 0, b ]\n    rygb\n\n  toRgbFromHue:( hue ) =>\n    cos = (h) -> Math.abs(Vis.cos(h*90/120))\n    R=0; G=0; B=0\n    [R,G,B] = [cos(hue),cos(hue-120),cos(hue-240),1]\n    rgb = [0,0,0]\n    if        0 <= hue and hue < 120 then rgb = [R,G,0]\n    else if 120 <= hue and hue < 240 then rgb = [0,G,B]\n    else if 240 <= hue and hue < 360 then rgb = [R,0,B]\n    rgb\n\n  genWithVecs:( coord, view ) =>\n    hcss = 0; rgbs = 0;\n    [hcss,rgbs] = @genVecs()\n    coord.cylLookup( view, hcss, rgbs )\n\n  genWithVecsRgb:( coord, view, see ) =>\n    hcss = 0; rgbs = 0;\n    [hcss,rgbs] = @genVecsRgb( see)\n    coord.cylLookup( view, hcss, rgbs )\n\n  genPolarRgbs:( coord, view, scale ) =>\n    hcss = 0; rgbs = 0;\n    [hcss,rgbs] = @genPolarRgb( scale )\n    console.log( 'genPolarRgbs', hcss.length, rgbs.length )\n    coord.cylLookup( view, hcss, rgbs )\n    #genPolarSurf(   view, hcss, rgbs )\n\n  genPolarSurf:( view, hcss, rgbs ) =>\n    for s in [90] #[0,10,20,30,40,50,60,70,80,90]\n      #view.play( { delay:1, speed:1000 } )\n      points = []\n      colors = []\n      for i in [0...hcss.length]\n        sh = hcss[i][2]\n        if s <= sh and sh < s + 10\n          points.push( hcss[i] )\n          colors.push( rgbs[i] )\n      pts = view.area( { data:points, width:points.length, height:1, axes:[1,2], channels:3 } )\n      rgs = view.area( { data:colors, width:colors.length, height:1, axes:[1,2], channels:3 } )\n      view.surface( { points:pts, colors:rgs, color: 0xffffff, shaded:false, opacity:1.0, lineX:true, lineY:true, width:5 } )\n\n  toHue:( C1,N ) -> # ,C2\n    n   = 100-N\n    hue = n\n    if      C1 is 'Y' then hue = n\n    else if C1 is 'G' then hue = n + 100\n    else if C1 is 'B' then hue = n + 200\n    else if C1 is 'R' then hue = n + 300\n    else if C1 is ' ' then hue = 0\n    hue = hue * 0.9\n    hue = 0 if hue is 360\n    hue\n\n  scsPts:( colors ) ->\n    pts = []\n    for key, color of colors\n      pts.push( [ Vis.rad(color.hue-2), color.c, 100-color.s, 1 ] )\n      pts.push( [ Vis.rad(color.hue+2), color.c, 100-color.s, 1 ] )\n    pts\n\n  scsRgbs:( colors ) ->\n    rgbs = []\n    s    = 1/255\n    for key, color of colors\n      rgbs.push( [ color.r*s, color.g*s, color.b*s, 1 ] )\n      rgbs.push( [ color.R*s, color.G*s, color.B*s, 1 ] )\n    rgbs\n\n  genVecsCompare:() ->\n    hcss = []\n    rgbs = []\n    for hue   in [0...360] by 15\n      for c   in [0,10,20,30,40,50,60,70,80,90,100]\n        for s in [0,10,20,30,40,50,60,70,80,90,100]\n          hcss.push( [ Vis.rad(hue-3), c, s, 1 ] )\n          hcss.push( [ Vis.rad(hue  ), c, s, 1 ] )\n          hcss.push( [ Vis.rad(hue+3), c, s, 1 ] )\n          rgbs.push( Vis.rgba( [hue, c, s ] ) )\n          rgbs.push( Vis.rgba( [hue, c, s ] ) )\n          rgbs.push( Vis.rgba( [hue, c, s ] ) )\n    [hcss,rgbs]\n\n  genVecs:() ->\n    hcss = []\n    rgbs = []\n    for hue   in [0...360] by 15\n      for c   in [0,10,20,30,40,50,60,70,80,90,100]\n        for s in [0,10,20,30,40,50,60,70,80,90,100]\n          hcss.push( [Vis.rad( hue), c, s, 1 ] )\n          rgbs.push(  Vis.rgba([hue,  c, s ] ) )\n    [hcss,rgbs]\n\n  genVecsRgb:( see ) ->\n    hcss = []\n    rgbs = []\n    sf   = 1 / 255\n    if see is 'two' or see is 'rgb'\n      for r     in [0..255] by 15\n        for g   in [0..255] by 15\n          for b in [0..255] by 15\n            [h, c, s ] = Vis.hcv( { r:r, g:g, b:b } )\n            if h%15 <= 2 or h%15 >= 13\n              ss         = @sScale( h, c, s )\n              hcss.push( [ Vis.rad(h-2), c, ss, 1 ] )\n              rgbs.push( [ r*sf, g*sf, b*sf, 1 ] )\n    if see is 'two' or see is 'hsv'\n      for hue   in [0...360] by 15\n        for c   in [0,16,32,48,64,80,100]\n          for s in [0,16,32,48,64,80,100]\n            hcss.push( [ Vis.rad(hue+2), c, s, 1 ] )\n            rgbs.push(   Vis.rgba( [hue,  c, s] ) )\n    [hcss,rgbs]\n\n  # console.log( 'gpr', { r:r, g:g, b:b, hue:hue, c:Math.round(c), s:Math.round(s) } ) if c is 0\n  # hRygb = h # @hueRygb( hue )\n  genPolarRgb:( scale=false ) ->\n    hcss = []\n    rgbs = []\n    sf   = 1 / 255\n    for r     in [0..255] by 15\n      for g   in [0..255] by 15\n        for b in [0..255] by 15\n          h = 0; c = 0; s = 0;\n          [h, c, s ] = Vis.hsv( r, g, b ) # Hcs is a special color system\n          ss         = if scale then @sScale( h, c, s ) else s\n          hcss.push( [ Vis.rad(h), c, ss, 1 ] )\n          rgbs.push( [ r*sf, g*sf, b*sf, 1 ] )\n    [hcss,rgbs]\n\n  # Hue in RYGB\n  vecs:( hue ) ->\n    v1 = [1,1,1]\n    v2 = [1,1,1]\n    c  = Math.abs(Vis.cos(hue))\n    s  = Math.abs(Vis.sin(hue))\n    y  = Math.max(c,s)\n    if        0 <= hue and hue <  90 then v2 = [y,s,0]\n    else if  90 <= hue and hue < 180 then v2 = [c,y,0]\n    else if 180 <= hue and hue < 270 then v2 = [0,c,s]\n    else if 270 <= hue and hue < 360 then v2 = [c,0,s]\n    [v1,v2]\n\n  csvec:( c, s, v1, v2 ) ->\n    c1 = 0.0001 * s * (100 - c)\n    c2 = 0.0001 * s * c\n    v3 = [0,0,0,1]\n    for i in [0...3]\n      v3[i] = v1[i]*c1 + v2[i]*c2\n    v3\n\n  rgbPc:( r, g, b, R, G, B ) ->\n    pc  = (f) -> Util.toInt(f * 100)\n    rd = if r isnt 0 then r else -R\n    gd = if g isnt 0 then g else -G\n    bd = if b isnt 0 then b else -B\n    [pc(R/rd),pc(G/gd),pc(B/bd)]\n\n  sScale:( hue, c, s ) ->\n    ss   = 1.0\n    m60  = hue %  60\n    m120 = hue % 120\n    s60  = m60 /  60\n    ch   = c   / 100\n    ss = if m120 < 60 then 3.0 - 1.5 * s60 else 1.5 + 1.5 * s60\n    s * (1-ch) + s * ch * ss\n\n  sScaleCf:( hue, c, s ) ->\n    ss   = @sScale( hue, c, s )\n    m60  = hue %  60\n    m120 = hue % 120\n    cosu = (1-Vis.cos(   m60))*100.00\n    cosd = (1-Vis.cos(60-m60))*100.00\n    cf = if m120 < 60 then cosu else cosd\n    ss - cf\n\nexport default Color"
  ]
}
{
  "version": 3,
  "file": "Coord.js",
  "sourceRoot": "../../../src/augm/hues",
  "sources": [
    "Coord.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { vis } from '../../../lib/pub/draw/Vis.js'\n\nclass Coord\n\n  constructor:( @mbox, @width, @height, @depth=10 ) ->\n    @mathbox  = @mbox.mathbox\n    @npoints  = 24 * @width\n\n  # [[-100,100],[0,100],[-100,100]]\n  cartesian:( range=[[0,1],[0,1],[0,1]], scale=[2,1,2], divide=[10,10] ) ->\n    @mathbox.camera( { position:[2.4,2.4,2.4], proxy:true } )\n    view  = @mathbox.cartesian( { range:range, scale:scale } )\n    @axesXYZ( view,  8, 0xFFFFFF )\n    @gridXYZ( view,  4, 0xFFFFFF, divide[0], 0.7, '10' )\n    @tickXYZ( view, 64, 0xFFFFFF, divide[1], 2 )\n    view\n\n  polar:( range=[[0,2*π],[0,100],[0,100]], scale=[2,1.5,0.75] ) ->\n    @mathbox.camera( { position:[0,0,4], proxy:true } ) # 2*π\n    view = @mathbox.polar( { range:range, scale:scale } )\n    #@tick(  view, 64, 0xFFFFFF, 12, 3, 1 )\n    view.transform( {position: [0, 100, 0] } )\n        .grid({ unitX:π/12, baseX:2, zWrite:false, detailX:81, divideX:12, divideY:10,axes:'xz',\n        blending:'add', color:0x00F0B0, width:@width, opacity:1 } )\n    @radPolar( view )\n    view\n\n  sphere:( range=[[0,2*π],[0,2*π],[0,1]], scale=[1,1,1] ) ->\n    @mathbox.camera( { position:[0,0,4], proxy:true } ) # 2*π\n    view = @mathbox.spherical( { range:range, scale:scale } )\n    view\n\n  axesXYZ:( view, width, color ) ->\n    view.axis( { axis:1, width:width, color:color, end:false } )\n        .axis( { axis:2, width:width, color:color, end:false } )\n        .axis( { axis:3, width:width, color:color, end:false } )\n\n  gridXYZ:( view, width, color, divide, opacity, id ) ->\n    view.grid( { axes:[1,2], width:width, color:color, divideX:divide, divideY:divide, opacity:opacity, id:\"gridXY#{id}\" } )\n        .grid( { axes:[2,3], width:width, color:color, divideX:divide, divideY:divide, opacity:opacity, id:\"gridYZ#{id}\" } )\n        .grid( { axes:[3,1], width:width, color:color, divideX:divide, divideY:divide, opacity:opacity, id:\"gridZX#{id}\" } )\n\n  tickXYZ:( view, size, color, divide, digits ) ->\n    @tick(  view, size, color, divide, digits, 1 )\n    @tick(  view, size, color, divide, digits, 2 )\n    @tick(  view, size, color, divide, digits, 3 )\n\n  tick:( view, size, color, divide, digits, axis ) ->\n    offset = if axis is 2 then [0,0.06] else [0.0]\n    view.scale(  {  axis:axis, divide:divide } )\n    .ticks(  { zBias:axis, width:5, size:size*0.25, color:color } )\n    .format( { digits:digits, font:\"Arial\" } )\n    .label(  { size:size, depth:1, color:color, outline:1, offset:offset } )\n\n  radPolar:( view ) ->\n    points = view.area( @angPolar( ) )\n    view.vector( { points:points, color:'white', width:10 } )\n\n  angPolar:( ) ->\n    obj = { id:\"angPolar\", axes:[1,2], width:13, height:1, items:2, channels:3 }\n    obj.expr =  ( emit, a, r ) =>\n      vis.noop( r )\n      emit( 0, 0, 1 )\n      emit( a, 1, 1 )\n      return\n    obj\n\n  cartData:( range=[[0,1],[0,1],[0,1]] ) ->\n    array = []\n    dx = ( range[0][1]-range[0][0] ) / (@width-1)\n    dy = ( range[1][1]-range[1][0] ) / (@height-1)\n    dz = ( range[2][1]-range[2][0] ) / (@depth-1)\n    for     x in [range[0][0]..range[0][1]] by dx\n      for   y in [range[1][0]..range[1][1]] by dy\n        for z in [range[2][0]..range[2][1]] by dz\n          array.push([x,y,z,1])\n    { data:array, items:1, channels:4, live:false, id:'cartData', width:@width*@height*@depth }\n\n  cartPoints:( id=\"cartPoints\" ) ->\n    obj =  { id:id, width:@width, height:@height, depth:@depth, items:1, channels:4 }\n    obj.expr = ( emit, x, y, z ) =>\n      emit( x, y, z, 1 )\n    obj\n\n  cartColors:( id=\"cartColors\") ->\n    obj  =  { id:id, width:@width, height:@height, depth:@depth, channels:4 } #\n    obj.expr  = ( emit, x, y, z ) =>\n      [r,g,b,a] = vis.rgba([x,y,z])\n      emit( r, g, b, a )\n    obj\n\n  point:( size=40, pid=\"points\", cid=\"colors\" ) ->\n    { points:'#'+pid, colors:'#'+cid, color: 0xffffff, size:size }\n\n  cartVolume:( view ) ->\n    view.volume( @cartPoints() )\n    view.volume( @cartColors() )\n    view.point(  @point(  40, \"cartPoints\", \"cartColors\" ) )\n\n  cartArray:( view ) ->\n    view.array(  @cartData()   )\n    view.point(  @point(  40, \"cartData\", \"cartData\" ) )\n\n  cartSurfPoints:( toZ, id=\"cartSurfPoints\" ) ->\n    obj  =  { id:id, width:@width, height:@height, axes:[1,3], channels:3 }\n    obj.expr = ( emit, x, y ) =>\n      emit( x, toZ(x,y), y )\n    obj\n\n  # added z ?\n  cartSurfColors:( id=\"cartSurfColors\" ) ->\n    obj  =  { id:id, width:@width,  height:@height, channels:4, axes:[1,2] } #\n    obj.expr = ( emit, x, y, z ) =>\n      [r,g,b,a] = vis.rgba( x, y, z )\n      emit( r, g, b, a )\n    obj\n\n  cartSurface:( view, toDep ) ->\n    points = view.area( @cartSurfPoints( toDep ) )\n    colors = view.area( @cartSurfColors() )\n    view.surface( { points:points, colors:colors, color: 0xffffff, shaded:false, opacity:1.0, lineX:true, lineY:true, width:5 } )\n\n  cylData:( range=[[0,2*π],[0,100],[0,100]] ) ->\n    array = []\n    dx = ( range[0][1]-range[0][0] ) / @width\n    dy = ( range[1][1]-range[1][0] ) / @height\n    dz = ( range[2][1]-range[2][0] ) / @depth\n    for     h in [range[0][0]..range[0][1]] by dx\n      for   c in [range[1][0]..range[1][1]] by dy\n        for s in [range[2][0]..range[2][1]] by dz\n          array.push([h,c,s])\n    { data:array, items:1, channels:4, live:false, id:'hcss', width: @width * @height * @depth }\n\n  # Cylindrical ang, rad, dep\n  cylPoints:( id=\"cylPoints\" ) ->\n    obj =  {  id:id, width:@width, height:@height, depth:@depth, items:1, channels:4 }\n    obj.expr = ( emit, ang, rad, dep, i ) =>\n      radian = @mbox.toRad( i, @width )\n      emit( radian, rad, dep, 1 )\n    obj\n\n  # Cylindrical ang, rad, dep  \n  cylColors:( id=\"cylColors\" ) ->\n    obj  =  { id:id, width:@width, height:@height, depth:@depth, channels:4 } #\n    obj.expr  = ( emit, ang, rad, dep, i ) =>\n      hue     = @mbox.toHue( i, @width )\n      [r,g,b,a] = vis.rgba( [hue, rad, dep] ) # HCS\n      emit( r, g, b, a )\n    obj\n\n  cylVolume:( view ) ->\n    view.volume( @cylPoints() )\n    view.volume( @cylColors() )\n    view.point(  @point(  40, \"cylPoints\", \"cylColors\" ) )\n\n  cylLookup:( view, hcss, rgbs ) =>\n    view.array( { data:hcss, id:\"hcss\", items:1, channels:4, live:false, width:hcss.length } )\n    view.array( { data:rgbs, id:\"rgbs\", items:1, channels:4, live:false, width:rgbs.length } )\n    view.point( { points:'#'+\"hcss\", colors:'#'+\"rgbs\", color:0xffffff, size:40 } )\n\n  cylSurfPoints:( toDep, id=\"cylSurfPoints\" ) ->\n    obj  =  { id:id, width:@npoints+1, height:@height, axes:[1,2], channels:3 } # Need @npoints+1 to complete rotation\n    obj.expr = ( emit, ang, rad, i ) =>\n      radian = @mbox.toRad( i, @npoints )\n      emit( radian, rad, 100*toDep(radian,rad) )\n    obj\n\n  cylSurfColors:( toDep, id=\"cylSurfColors\" ) ->\n    obj  =  { id:id, width:@npoints+1, height:@height, channels:4, axes:[1,2] } # Need @npoints+1 to complete rotation\n    obj.expr = ( emit, ang, rad, i ) =>\n      hue     = @mbox.toHue( i, @npoints )\n      radian  = @mbox.toRad( i, @npoints )\n      # console.log( \"cylSurfColors\", hue, rad, toDep(radian,rad)*100 )\n      [r,g,b,a] = vis.rgba( [hue, rad, toDep(radian,rad)*100] )\n      emit( r, g, b, a )\n    obj\n\n  cylSurface:( view, toDep ) ->\n    points = view.area( @cylSurfPoints( toDep ) )\n    colors = view.area( @cylSurfColors( toDep ) )\n    view.surface( { points:points, colors:colors, color: 0xffffff, shaded:false, opacity:1.0, lineX:true, lineY:true, width:5 } )\n\n  # Spherical Points\n  sphPoints:( id=\"sphPoints\" ) ->\n    obj =   { id:id, width:@width, height:@height, depth:@depth, items:1, channels:4 }\n    obj.expr = ( emit, ang1, ang2, rad, i, j ) =>\n      emit( i*π*2/@width, j*π*2/@height, rad, 1 ) #if j*π*2/@height <= π\n    obj\n\n  sphColors:( id=\"sphColors\" ) ->\n    obj  =  { id:id, width:@width, height:@height, depth:@depth, channels:4 } #\n    obj.expr  = ( emit, ang1, ang2, rad, i, j ) =>\n      [r,g,b,a] = vis.rgba( [i*360/@width, j*360/@height, rad] )\n      emit( r, g, b, a )\n    obj\n\n  sphVolume:( view ) ->\n    view.volume( @sphPoints() )\n    view.volume( @sphColors() )\n    view.point(  @point(  40, \"sphPoints\", \"sphColors\" ) )\n\n  domeColors:() ->\n    obj =  { id:'domeColors', width:@width, height:@height, depth:@depth, channels:4 } #\n    obj.expr  = ( emit, ang1, ang2, rad, i, j ) =>\n      if j*360/@height <= 180\n        [r,g,b,a] = vis.rgba( [i*360/@width, j*360/@height, rad ] )\n        emit( r, g, b, 1 )\n      else\n        emit( 0, 0, 0, 0 )\n    obj\n\nexport default Coord"
  ]
}